
TBJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad0  08005ad0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ad0  08005ad0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ad0  08005ad0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000002c  08005b04  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08005b04  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001373b  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290a  00000000  00000000  0003378f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  000360a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00037208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6f0  00000000  00000000  00038238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001301b  00000000  00000000  00055928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c04cd  00000000  00000000  00068943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128e10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004014  00000000  00000000  00128e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005a38 	.word	0x08005a38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08005a38 	.word	0x08005a38

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 feaf 	bl	8000f88 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe0f 	bl	8000e54 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fa76 	bl	8000730 <__aeabi_dsub>
 8000244:	f000 fe06 	bl	8000e54 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dmul>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	4698      	mov	r8, r3
 8000266:	030c      	lsls	r4, r1, #12
 8000268:	004b      	lsls	r3, r1, #1
 800026a:	0006      	movs	r6, r0
 800026c:	4692      	mov	sl, r2
 800026e:	b087      	sub	sp, #28
 8000270:	0b24      	lsrs	r4, r4, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	0fcf      	lsrs	r7, r1, #31
 8000276:	2b00      	cmp	r3, #0
 8000278:	d06c      	beq.n	8000354 <__aeabi_dmul+0xfc>
 800027a:	4add      	ldr	r2, [pc, #884]	; (80005f0 <__aeabi_dmul+0x398>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d100      	bne.n	8000282 <__aeabi_dmul+0x2a>
 8000280:	e086      	b.n	8000390 <__aeabi_dmul+0x138>
 8000282:	0f42      	lsrs	r2, r0, #29
 8000284:	00e4      	lsls	r4, r4, #3
 8000286:	4314      	orrs	r4, r2
 8000288:	2280      	movs	r2, #128	; 0x80
 800028a:	0412      	lsls	r2, r2, #16
 800028c:	4314      	orrs	r4, r2
 800028e:	4ad9      	ldr	r2, [pc, #868]	; (80005f4 <__aeabi_dmul+0x39c>)
 8000290:	00c5      	lsls	r5, r0, #3
 8000292:	4694      	mov	ip, r2
 8000294:	4463      	add	r3, ip
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2300      	movs	r3, #0
 800029a:	4699      	mov	r9, r3
 800029c:	469b      	mov	fp, r3
 800029e:	4643      	mov	r3, r8
 80002a0:	4642      	mov	r2, r8
 80002a2:	031e      	lsls	r6, r3, #12
 80002a4:	0fd2      	lsrs	r2, r2, #31
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	4650      	mov	r0, sl
 80002aa:	4690      	mov	r8, r2
 80002ac:	0b36      	lsrs	r6, r6, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	d100      	bne.n	80002b4 <__aeabi_dmul+0x5c>
 80002b2:	e078      	b.n	80003a6 <__aeabi_dmul+0x14e>
 80002b4:	4ace      	ldr	r2, [pc, #824]	; (80005f0 <__aeabi_dmul+0x398>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01d      	beq.n	80002f6 <__aeabi_dmul+0x9e>
 80002ba:	49ce      	ldr	r1, [pc, #824]	; (80005f4 <__aeabi_dmul+0x39c>)
 80002bc:	0f42      	lsrs	r2, r0, #29
 80002be:	468c      	mov	ip, r1
 80002c0:	9900      	ldr	r1, [sp, #0]
 80002c2:	4463      	add	r3, ip
 80002c4:	00f6      	lsls	r6, r6, #3
 80002c6:	468c      	mov	ip, r1
 80002c8:	4316      	orrs	r6, r2
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	449c      	add	ip, r3
 80002ce:	0412      	lsls	r2, r2, #16
 80002d0:	4663      	mov	r3, ip
 80002d2:	4316      	orrs	r6, r2
 80002d4:	00c2      	lsls	r2, r0, #3
 80002d6:	2000      	movs	r0, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	9900      	ldr	r1, [sp, #0]
 80002dc:	4643      	mov	r3, r8
 80002de:	3101      	adds	r1, #1
 80002e0:	468c      	mov	ip, r1
 80002e2:	4649      	mov	r1, r9
 80002e4:	407b      	eors	r3, r7
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	290f      	cmp	r1, #15
 80002ea:	d900      	bls.n	80002ee <__aeabi_dmul+0x96>
 80002ec:	e07e      	b.n	80003ec <__aeabi_dmul+0x194>
 80002ee:	4bc2      	ldr	r3, [pc, #776]	; (80005f8 <__aeabi_dmul+0x3a0>)
 80002f0:	0089      	lsls	r1, r1, #2
 80002f2:	5859      	ldr	r1, [r3, r1]
 80002f4:	468f      	mov	pc, r1
 80002f6:	4652      	mov	r2, sl
 80002f8:	9b00      	ldr	r3, [sp, #0]
 80002fa:	4332      	orrs	r2, r6
 80002fc:	d000      	beq.n	8000300 <__aeabi_dmul+0xa8>
 80002fe:	e156      	b.n	80005ae <__aeabi_dmul+0x356>
 8000300:	49bb      	ldr	r1, [pc, #748]	; (80005f0 <__aeabi_dmul+0x398>)
 8000302:	2600      	movs	r6, #0
 8000304:	468c      	mov	ip, r1
 8000306:	4463      	add	r3, ip
 8000308:	4649      	mov	r1, r9
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2302      	movs	r3, #2
 800030e:	4319      	orrs	r1, r3
 8000310:	4689      	mov	r9, r1
 8000312:	2002      	movs	r0, #2
 8000314:	e7e1      	b.n	80002da <__aeabi_dmul+0x82>
 8000316:	4643      	mov	r3, r8
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	0034      	movs	r4, r6
 800031c:	0015      	movs	r5, r2
 800031e:	4683      	mov	fp, r0
 8000320:	465b      	mov	r3, fp
 8000322:	2b02      	cmp	r3, #2
 8000324:	d05e      	beq.n	80003e4 <__aeabi_dmul+0x18c>
 8000326:	2b03      	cmp	r3, #3
 8000328:	d100      	bne.n	800032c <__aeabi_dmul+0xd4>
 800032a:	e1f3      	b.n	8000714 <__aeabi_dmul+0x4bc>
 800032c:	2b01      	cmp	r3, #1
 800032e:	d000      	beq.n	8000332 <__aeabi_dmul+0xda>
 8000330:	e118      	b.n	8000564 <__aeabi_dmul+0x30c>
 8000332:	2200      	movs	r2, #0
 8000334:	2400      	movs	r4, #0
 8000336:	2500      	movs	r5, #0
 8000338:	9b01      	ldr	r3, [sp, #4]
 800033a:	0512      	lsls	r2, r2, #20
 800033c:	4322      	orrs	r2, r4
 800033e:	07db      	lsls	r3, r3, #31
 8000340:	431a      	orrs	r2, r3
 8000342:	0028      	movs	r0, r5
 8000344:	0011      	movs	r1, r2
 8000346:	b007      	add	sp, #28
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	46bb      	mov	fp, r7
 800034c:	46b2      	mov	sl, r6
 800034e:	46a9      	mov	r9, r5
 8000350:	46a0      	mov	r8, r4
 8000352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000354:	0025      	movs	r5, r4
 8000356:	4305      	orrs	r5, r0
 8000358:	d100      	bne.n	800035c <__aeabi_dmul+0x104>
 800035a:	e141      	b.n	80005e0 <__aeabi_dmul+0x388>
 800035c:	2c00      	cmp	r4, #0
 800035e:	d100      	bne.n	8000362 <__aeabi_dmul+0x10a>
 8000360:	e1ad      	b.n	80006be <__aeabi_dmul+0x466>
 8000362:	0020      	movs	r0, r4
 8000364:	f000 fe1a 	bl	8000f9c <__clzsi2>
 8000368:	0001      	movs	r1, r0
 800036a:	0002      	movs	r2, r0
 800036c:	390b      	subs	r1, #11
 800036e:	231d      	movs	r3, #29
 8000370:	0010      	movs	r0, r2
 8000372:	1a5b      	subs	r3, r3, r1
 8000374:	0031      	movs	r1, r6
 8000376:	0035      	movs	r5, r6
 8000378:	3808      	subs	r0, #8
 800037a:	4084      	lsls	r4, r0
 800037c:	40d9      	lsrs	r1, r3
 800037e:	4085      	lsls	r5, r0
 8000380:	430c      	orrs	r4, r1
 8000382:	489e      	ldr	r0, [pc, #632]	; (80005fc <__aeabi_dmul+0x3a4>)
 8000384:	1a83      	subs	r3, r0, r2
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2300      	movs	r3, #0
 800038a:	4699      	mov	r9, r3
 800038c:	469b      	mov	fp, r3
 800038e:	e786      	b.n	800029e <__aeabi_dmul+0x46>
 8000390:	0005      	movs	r5, r0
 8000392:	4325      	orrs	r5, r4
 8000394:	d000      	beq.n	8000398 <__aeabi_dmul+0x140>
 8000396:	e11c      	b.n	80005d2 <__aeabi_dmul+0x37a>
 8000398:	2208      	movs	r2, #8
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2302      	movs	r3, #2
 800039e:	2400      	movs	r4, #0
 80003a0:	4691      	mov	r9, r2
 80003a2:	469b      	mov	fp, r3
 80003a4:	e77b      	b.n	800029e <__aeabi_dmul+0x46>
 80003a6:	4652      	mov	r2, sl
 80003a8:	4332      	orrs	r2, r6
 80003aa:	d100      	bne.n	80003ae <__aeabi_dmul+0x156>
 80003ac:	e10a      	b.n	80005c4 <__aeabi_dmul+0x36c>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d100      	bne.n	80003b4 <__aeabi_dmul+0x15c>
 80003b2:	e176      	b.n	80006a2 <__aeabi_dmul+0x44a>
 80003b4:	0030      	movs	r0, r6
 80003b6:	f000 fdf1 	bl	8000f9c <__clzsi2>
 80003ba:	0002      	movs	r2, r0
 80003bc:	3a0b      	subs	r2, #11
 80003be:	231d      	movs	r3, #29
 80003c0:	0001      	movs	r1, r0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	4652      	mov	r2, sl
 80003c6:	3908      	subs	r1, #8
 80003c8:	40da      	lsrs	r2, r3
 80003ca:	408e      	lsls	r6, r1
 80003cc:	4316      	orrs	r6, r2
 80003ce:	4652      	mov	r2, sl
 80003d0:	408a      	lsls	r2, r1
 80003d2:	9b00      	ldr	r3, [sp, #0]
 80003d4:	4989      	ldr	r1, [pc, #548]	; (80005fc <__aeabi_dmul+0x3a4>)
 80003d6:	1a18      	subs	r0, r3, r0
 80003d8:	0003      	movs	r3, r0
 80003da:	468c      	mov	ip, r1
 80003dc:	4463      	add	r3, ip
 80003de:	2000      	movs	r0, #0
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	e77a      	b.n	80002da <__aeabi_dmul+0x82>
 80003e4:	2400      	movs	r4, #0
 80003e6:	2500      	movs	r5, #0
 80003e8:	4a81      	ldr	r2, [pc, #516]	; (80005f0 <__aeabi_dmul+0x398>)
 80003ea:	e7a5      	b.n	8000338 <__aeabi_dmul+0xe0>
 80003ec:	0c2f      	lsrs	r7, r5, #16
 80003ee:	042d      	lsls	r5, r5, #16
 80003f0:	0c2d      	lsrs	r5, r5, #16
 80003f2:	002b      	movs	r3, r5
 80003f4:	0c11      	lsrs	r1, r2, #16
 80003f6:	0412      	lsls	r2, r2, #16
 80003f8:	0c12      	lsrs	r2, r2, #16
 80003fa:	4353      	muls	r3, r2
 80003fc:	4698      	mov	r8, r3
 80003fe:	0013      	movs	r3, r2
 8000400:	0028      	movs	r0, r5
 8000402:	437b      	muls	r3, r7
 8000404:	4699      	mov	r9, r3
 8000406:	4348      	muls	r0, r1
 8000408:	4448      	add	r0, r9
 800040a:	4683      	mov	fp, r0
 800040c:	4640      	mov	r0, r8
 800040e:	000b      	movs	r3, r1
 8000410:	0c00      	lsrs	r0, r0, #16
 8000412:	4682      	mov	sl, r0
 8000414:	4658      	mov	r0, fp
 8000416:	437b      	muls	r3, r7
 8000418:	4450      	add	r0, sl
 800041a:	9302      	str	r3, [sp, #8]
 800041c:	4581      	cmp	r9, r0
 800041e:	d906      	bls.n	800042e <__aeabi_dmul+0x1d6>
 8000420:	469a      	mov	sl, r3
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	025b      	lsls	r3, r3, #9
 8000426:	4699      	mov	r9, r3
 8000428:	44ca      	add	sl, r9
 800042a:	4653      	mov	r3, sl
 800042c:	9302      	str	r3, [sp, #8]
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	469b      	mov	fp, r3
 8000432:	4643      	mov	r3, r8
 8000434:	041b      	lsls	r3, r3, #16
 8000436:	0400      	lsls	r0, r0, #16
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	4698      	mov	r8, r3
 800043c:	0003      	movs	r3, r0
 800043e:	4443      	add	r3, r8
 8000440:	9304      	str	r3, [sp, #16]
 8000442:	0c33      	lsrs	r3, r6, #16
 8000444:	4699      	mov	r9, r3
 8000446:	002b      	movs	r3, r5
 8000448:	0436      	lsls	r6, r6, #16
 800044a:	0c36      	lsrs	r6, r6, #16
 800044c:	4373      	muls	r3, r6
 800044e:	4698      	mov	r8, r3
 8000450:	0033      	movs	r3, r6
 8000452:	437b      	muls	r3, r7
 8000454:	469a      	mov	sl, r3
 8000456:	464b      	mov	r3, r9
 8000458:	435d      	muls	r5, r3
 800045a:	435f      	muls	r7, r3
 800045c:	4643      	mov	r3, r8
 800045e:	4455      	add	r5, sl
 8000460:	0c18      	lsrs	r0, r3, #16
 8000462:	1940      	adds	r0, r0, r5
 8000464:	4582      	cmp	sl, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_dmul+0x218>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	469a      	mov	sl, r3
 800046e:	4457      	add	r7, sl
 8000470:	0c05      	lsrs	r5, r0, #16
 8000472:	19eb      	adds	r3, r5, r7
 8000474:	9305      	str	r3, [sp, #20]
 8000476:	4643      	mov	r3, r8
 8000478:	041d      	lsls	r5, r3, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	0400      	lsls	r0, r0, #16
 800047e:	1940      	adds	r0, r0, r5
 8000480:	0c25      	lsrs	r5, r4, #16
 8000482:	0424      	lsls	r4, r4, #16
 8000484:	0c24      	lsrs	r4, r4, #16
 8000486:	0027      	movs	r7, r4
 8000488:	4357      	muls	r7, r2
 800048a:	436a      	muls	r2, r5
 800048c:	4690      	mov	r8, r2
 800048e:	002a      	movs	r2, r5
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	469a      	mov	sl, r3
 8000494:	434a      	muls	r2, r1
 8000496:	4361      	muls	r1, r4
 8000498:	4441      	add	r1, r8
 800049a:	4451      	add	r1, sl
 800049c:	4483      	add	fp, r0
 800049e:	4588      	cmp	r8, r1
 80004a0:	d903      	bls.n	80004aa <__aeabi_dmul+0x252>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	4698      	mov	r8, r3
 80004a8:	4442      	add	r2, r8
 80004aa:	043f      	lsls	r7, r7, #16
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	0c3f      	lsrs	r7, r7, #16
 80004b0:	0409      	lsls	r1, r1, #16
 80004b2:	19c9      	adds	r1, r1, r7
 80004b4:	0027      	movs	r7, r4
 80004b6:	4698      	mov	r8, r3
 80004b8:	464b      	mov	r3, r9
 80004ba:	4377      	muls	r7, r6
 80004bc:	435c      	muls	r4, r3
 80004be:	436e      	muls	r6, r5
 80004c0:	435d      	muls	r5, r3
 80004c2:	0c3b      	lsrs	r3, r7, #16
 80004c4:	4699      	mov	r9, r3
 80004c6:	19a4      	adds	r4, r4, r6
 80004c8:	444c      	add	r4, r9
 80004ca:	4442      	add	r2, r8
 80004cc:	9503      	str	r5, [sp, #12]
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d904      	bls.n	80004dc <__aeabi_dmul+0x284>
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	025b      	lsls	r3, r3, #9
 80004d6:	4698      	mov	r8, r3
 80004d8:	4445      	add	r5, r8
 80004da:	9503      	str	r5, [sp, #12]
 80004dc:	9b02      	ldr	r3, [sp, #8]
 80004de:	043f      	lsls	r7, r7, #16
 80004e0:	445b      	add	r3, fp
 80004e2:	001e      	movs	r6, r3
 80004e4:	4283      	cmp	r3, r0
 80004e6:	4180      	sbcs	r0, r0
 80004e8:	0423      	lsls	r3, r4, #16
 80004ea:	4698      	mov	r8, r3
 80004ec:	9b05      	ldr	r3, [sp, #20]
 80004ee:	0c3f      	lsrs	r7, r7, #16
 80004f0:	4447      	add	r7, r8
 80004f2:	4698      	mov	r8, r3
 80004f4:	1876      	adds	r6, r6, r1
 80004f6:	428e      	cmp	r6, r1
 80004f8:	4189      	sbcs	r1, r1
 80004fa:	4447      	add	r7, r8
 80004fc:	4240      	negs	r0, r0
 80004fe:	183d      	adds	r5, r7, r0
 8000500:	46a8      	mov	r8, r5
 8000502:	4693      	mov	fp, r2
 8000504:	4249      	negs	r1, r1
 8000506:	468a      	mov	sl, r1
 8000508:	44c3      	add	fp, r8
 800050a:	429f      	cmp	r7, r3
 800050c:	41bf      	sbcs	r7, r7
 800050e:	4580      	cmp	r8, r0
 8000510:	4180      	sbcs	r0, r0
 8000512:	9b03      	ldr	r3, [sp, #12]
 8000514:	44da      	add	sl, fp
 8000516:	4698      	mov	r8, r3
 8000518:	4653      	mov	r3, sl
 800051a:	4240      	negs	r0, r0
 800051c:	427f      	negs	r7, r7
 800051e:	4307      	orrs	r7, r0
 8000520:	0c24      	lsrs	r4, r4, #16
 8000522:	4593      	cmp	fp, r2
 8000524:	4192      	sbcs	r2, r2
 8000526:	458a      	cmp	sl, r1
 8000528:	4189      	sbcs	r1, r1
 800052a:	193f      	adds	r7, r7, r4
 800052c:	0ddc      	lsrs	r4, r3, #23
 800052e:	9b04      	ldr	r3, [sp, #16]
 8000530:	0275      	lsls	r5, r6, #9
 8000532:	431d      	orrs	r5, r3
 8000534:	1e68      	subs	r0, r5, #1
 8000536:	4185      	sbcs	r5, r0
 8000538:	4653      	mov	r3, sl
 800053a:	4252      	negs	r2, r2
 800053c:	4249      	negs	r1, r1
 800053e:	430a      	orrs	r2, r1
 8000540:	18bf      	adds	r7, r7, r2
 8000542:	4447      	add	r7, r8
 8000544:	0df6      	lsrs	r6, r6, #23
 8000546:	027f      	lsls	r7, r7, #9
 8000548:	4335      	orrs	r5, r6
 800054a:	025a      	lsls	r2, r3, #9
 800054c:	433c      	orrs	r4, r7
 800054e:	4315      	orrs	r5, r2
 8000550:	01fb      	lsls	r3, r7, #7
 8000552:	d400      	bmi.n	8000556 <__aeabi_dmul+0x2fe>
 8000554:	e0c1      	b.n	80006da <__aeabi_dmul+0x482>
 8000556:	2101      	movs	r1, #1
 8000558:	086a      	lsrs	r2, r5, #1
 800055a:	400d      	ands	r5, r1
 800055c:	4315      	orrs	r5, r2
 800055e:	07e2      	lsls	r2, r4, #31
 8000560:	4315      	orrs	r5, r2
 8000562:	0864      	lsrs	r4, r4, #1
 8000564:	4926      	ldr	r1, [pc, #152]	; (8000600 <__aeabi_dmul+0x3a8>)
 8000566:	4461      	add	r1, ip
 8000568:	2900      	cmp	r1, #0
 800056a:	dd56      	ble.n	800061a <__aeabi_dmul+0x3c2>
 800056c:	076b      	lsls	r3, r5, #29
 800056e:	d009      	beq.n	8000584 <__aeabi_dmul+0x32c>
 8000570:	220f      	movs	r2, #15
 8000572:	402a      	ands	r2, r5
 8000574:	2a04      	cmp	r2, #4
 8000576:	d005      	beq.n	8000584 <__aeabi_dmul+0x32c>
 8000578:	1d2a      	adds	r2, r5, #4
 800057a:	42aa      	cmp	r2, r5
 800057c:	41ad      	sbcs	r5, r5
 800057e:	426d      	negs	r5, r5
 8000580:	1964      	adds	r4, r4, r5
 8000582:	0015      	movs	r5, r2
 8000584:	01e3      	lsls	r3, r4, #7
 8000586:	d504      	bpl.n	8000592 <__aeabi_dmul+0x33a>
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <__aeabi_dmul+0x3ac>)
 800058c:	00c9      	lsls	r1, r1, #3
 800058e:	4014      	ands	r4, r2
 8000590:	4461      	add	r1, ip
 8000592:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <__aeabi_dmul+0x3b0>)
 8000594:	4291      	cmp	r1, r2
 8000596:	dd00      	ble.n	800059a <__aeabi_dmul+0x342>
 8000598:	e724      	b.n	80003e4 <__aeabi_dmul+0x18c>
 800059a:	0762      	lsls	r2, r4, #29
 800059c:	08ed      	lsrs	r5, r5, #3
 800059e:	0264      	lsls	r4, r4, #9
 80005a0:	0549      	lsls	r1, r1, #21
 80005a2:	4315      	orrs	r5, r2
 80005a4:	0b24      	lsrs	r4, r4, #12
 80005a6:	0d4a      	lsrs	r2, r1, #21
 80005a8:	e6c6      	b.n	8000338 <__aeabi_dmul+0xe0>
 80005aa:	9701      	str	r7, [sp, #4]
 80005ac:	e6b8      	b.n	8000320 <__aeabi_dmul+0xc8>
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <__aeabi_dmul+0x398>)
 80005b0:	2003      	movs	r0, #3
 80005b2:	4694      	mov	ip, r2
 80005b4:	4463      	add	r3, ip
 80005b6:	464a      	mov	r2, r9
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2303      	movs	r3, #3
 80005bc:	431a      	orrs	r2, r3
 80005be:	4691      	mov	r9, r2
 80005c0:	4652      	mov	r2, sl
 80005c2:	e68a      	b.n	80002da <__aeabi_dmul+0x82>
 80005c4:	4649      	mov	r1, r9
 80005c6:	2301      	movs	r3, #1
 80005c8:	4319      	orrs	r1, r3
 80005ca:	4689      	mov	r9, r1
 80005cc:	2600      	movs	r6, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	e683      	b.n	80002da <__aeabi_dmul+0x82>
 80005d2:	220c      	movs	r2, #12
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2303      	movs	r3, #3
 80005d8:	0005      	movs	r5, r0
 80005da:	4691      	mov	r9, r2
 80005dc:	469b      	mov	fp, r3
 80005de:	e65e      	b.n	800029e <__aeabi_dmul+0x46>
 80005e0:	2304      	movs	r3, #4
 80005e2:	4699      	mov	r9, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	2400      	movs	r4, #0
 80005ec:	469b      	mov	fp, r3
 80005ee:	e656      	b.n	800029e <__aeabi_dmul+0x46>
 80005f0:	000007ff 	.word	0x000007ff
 80005f4:	fffffc01 	.word	0xfffffc01
 80005f8:	08005a50 	.word	0x08005a50
 80005fc:	fffffc0d 	.word	0xfffffc0d
 8000600:	000003ff 	.word	0x000003ff
 8000604:	feffffff 	.word	0xfeffffff
 8000608:	000007fe 	.word	0x000007fe
 800060c:	2300      	movs	r3, #0
 800060e:	2480      	movs	r4, #128	; 0x80
 8000610:	2500      	movs	r5, #0
 8000612:	4a44      	ldr	r2, [pc, #272]	; (8000724 <__aeabi_dmul+0x4cc>)
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	0324      	lsls	r4, r4, #12
 8000618:	e68e      	b.n	8000338 <__aeabi_dmul+0xe0>
 800061a:	2001      	movs	r0, #1
 800061c:	1a40      	subs	r0, r0, r1
 800061e:	2838      	cmp	r0, #56	; 0x38
 8000620:	dd00      	ble.n	8000624 <__aeabi_dmul+0x3cc>
 8000622:	e686      	b.n	8000332 <__aeabi_dmul+0xda>
 8000624:	281f      	cmp	r0, #31
 8000626:	dd5b      	ble.n	80006e0 <__aeabi_dmul+0x488>
 8000628:	221f      	movs	r2, #31
 800062a:	0023      	movs	r3, r4
 800062c:	4252      	negs	r2, r2
 800062e:	1a51      	subs	r1, r2, r1
 8000630:	40cb      	lsrs	r3, r1
 8000632:	0019      	movs	r1, r3
 8000634:	2820      	cmp	r0, #32
 8000636:	d003      	beq.n	8000640 <__aeabi_dmul+0x3e8>
 8000638:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <__aeabi_dmul+0x4d0>)
 800063a:	4462      	add	r2, ip
 800063c:	4094      	lsls	r4, r2
 800063e:	4325      	orrs	r5, r4
 8000640:	1e6a      	subs	r2, r5, #1
 8000642:	4195      	sbcs	r5, r2
 8000644:	002a      	movs	r2, r5
 8000646:	430a      	orrs	r2, r1
 8000648:	2107      	movs	r1, #7
 800064a:	000d      	movs	r5, r1
 800064c:	2400      	movs	r4, #0
 800064e:	4015      	ands	r5, r2
 8000650:	4211      	tst	r1, r2
 8000652:	d05b      	beq.n	800070c <__aeabi_dmul+0x4b4>
 8000654:	210f      	movs	r1, #15
 8000656:	2400      	movs	r4, #0
 8000658:	4011      	ands	r1, r2
 800065a:	2904      	cmp	r1, #4
 800065c:	d053      	beq.n	8000706 <__aeabi_dmul+0x4ae>
 800065e:	1d11      	adds	r1, r2, #4
 8000660:	4291      	cmp	r1, r2
 8000662:	4192      	sbcs	r2, r2
 8000664:	4252      	negs	r2, r2
 8000666:	18a4      	adds	r4, r4, r2
 8000668:	000a      	movs	r2, r1
 800066a:	0223      	lsls	r3, r4, #8
 800066c:	d54b      	bpl.n	8000706 <__aeabi_dmul+0x4ae>
 800066e:	2201      	movs	r2, #1
 8000670:	2400      	movs	r4, #0
 8000672:	2500      	movs	r5, #0
 8000674:	e660      	b.n	8000338 <__aeabi_dmul+0xe0>
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	031b      	lsls	r3, r3, #12
 800067a:	421c      	tst	r4, r3
 800067c:	d009      	beq.n	8000692 <__aeabi_dmul+0x43a>
 800067e:	421e      	tst	r6, r3
 8000680:	d107      	bne.n	8000692 <__aeabi_dmul+0x43a>
 8000682:	4333      	orrs	r3, r6
 8000684:	031c      	lsls	r4, r3, #12
 8000686:	4643      	mov	r3, r8
 8000688:	0015      	movs	r5, r2
 800068a:	0b24      	lsrs	r4, r4, #12
 800068c:	4a25      	ldr	r2, [pc, #148]	; (8000724 <__aeabi_dmul+0x4cc>)
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	e652      	b.n	8000338 <__aeabi_dmul+0xe0>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	0312      	lsls	r2, r2, #12
 8000696:	4314      	orrs	r4, r2
 8000698:	0324      	lsls	r4, r4, #12
 800069a:	4a22      	ldr	r2, [pc, #136]	; (8000724 <__aeabi_dmul+0x4cc>)
 800069c:	0b24      	lsrs	r4, r4, #12
 800069e:	9701      	str	r7, [sp, #4]
 80006a0:	e64a      	b.n	8000338 <__aeabi_dmul+0xe0>
 80006a2:	f000 fc7b 	bl	8000f9c <__clzsi2>
 80006a6:	0003      	movs	r3, r0
 80006a8:	001a      	movs	r2, r3
 80006aa:	3215      	adds	r2, #21
 80006ac:	3020      	adds	r0, #32
 80006ae:	2a1c      	cmp	r2, #28
 80006b0:	dc00      	bgt.n	80006b4 <__aeabi_dmul+0x45c>
 80006b2:	e684      	b.n	80003be <__aeabi_dmul+0x166>
 80006b4:	4656      	mov	r6, sl
 80006b6:	3b08      	subs	r3, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	409e      	lsls	r6, r3
 80006bc:	e689      	b.n	80003d2 <__aeabi_dmul+0x17a>
 80006be:	f000 fc6d 	bl	8000f9c <__clzsi2>
 80006c2:	0001      	movs	r1, r0
 80006c4:	0002      	movs	r2, r0
 80006c6:	3115      	adds	r1, #21
 80006c8:	3220      	adds	r2, #32
 80006ca:	291c      	cmp	r1, #28
 80006cc:	dc00      	bgt.n	80006d0 <__aeabi_dmul+0x478>
 80006ce:	e64e      	b.n	800036e <__aeabi_dmul+0x116>
 80006d0:	0034      	movs	r4, r6
 80006d2:	3808      	subs	r0, #8
 80006d4:	2500      	movs	r5, #0
 80006d6:	4084      	lsls	r4, r0
 80006d8:	e653      	b.n	8000382 <__aeabi_dmul+0x12a>
 80006da:	9b00      	ldr	r3, [sp, #0]
 80006dc:	469c      	mov	ip, r3
 80006de:	e741      	b.n	8000564 <__aeabi_dmul+0x30c>
 80006e0:	4912      	ldr	r1, [pc, #72]	; (800072c <__aeabi_dmul+0x4d4>)
 80006e2:	0022      	movs	r2, r4
 80006e4:	4461      	add	r1, ip
 80006e6:	002e      	movs	r6, r5
 80006e8:	408d      	lsls	r5, r1
 80006ea:	408a      	lsls	r2, r1
 80006ec:	40c6      	lsrs	r6, r0
 80006ee:	1e69      	subs	r1, r5, #1
 80006f0:	418d      	sbcs	r5, r1
 80006f2:	4332      	orrs	r2, r6
 80006f4:	432a      	orrs	r2, r5
 80006f6:	40c4      	lsrs	r4, r0
 80006f8:	0753      	lsls	r3, r2, #29
 80006fa:	d0b6      	beq.n	800066a <__aeabi_dmul+0x412>
 80006fc:	210f      	movs	r1, #15
 80006fe:	4011      	ands	r1, r2
 8000700:	2904      	cmp	r1, #4
 8000702:	d1ac      	bne.n	800065e <__aeabi_dmul+0x406>
 8000704:	e7b1      	b.n	800066a <__aeabi_dmul+0x412>
 8000706:	0765      	lsls	r5, r4, #29
 8000708:	0264      	lsls	r4, r4, #9
 800070a:	0b24      	lsrs	r4, r4, #12
 800070c:	08d2      	lsrs	r2, r2, #3
 800070e:	4315      	orrs	r5, r2
 8000710:	2200      	movs	r2, #0
 8000712:	e611      	b.n	8000338 <__aeabi_dmul+0xe0>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0312      	lsls	r2, r2, #12
 8000718:	4314      	orrs	r4, r2
 800071a:	0324      	lsls	r4, r4, #12
 800071c:	4a01      	ldr	r2, [pc, #4]	; (8000724 <__aeabi_dmul+0x4cc>)
 800071e:	0b24      	lsrs	r4, r4, #12
 8000720:	e60a      	b.n	8000338 <__aeabi_dmul+0xe0>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	000007ff 	.word	0x000007ff
 8000728:	0000043e 	.word	0x0000043e
 800072c:	0000041e 	.word	0x0000041e

08000730 <__aeabi_dsub>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4657      	mov	r7, sl
 8000734:	464e      	mov	r6, r9
 8000736:	4645      	mov	r5, r8
 8000738:	46de      	mov	lr, fp
 800073a:	0004      	movs	r4, r0
 800073c:	b5e0      	push	{r5, r6, r7, lr}
 800073e:	001f      	movs	r7, r3
 8000740:	0010      	movs	r0, r2
 8000742:	030b      	lsls	r3, r1, #12
 8000744:	0f62      	lsrs	r2, r4, #29
 8000746:	004e      	lsls	r6, r1, #1
 8000748:	0fcd      	lsrs	r5, r1, #31
 800074a:	0a5b      	lsrs	r3, r3, #9
 800074c:	0339      	lsls	r1, r7, #12
 800074e:	4313      	orrs	r3, r2
 8000750:	0a49      	lsrs	r1, r1, #9
 8000752:	00e2      	lsls	r2, r4, #3
 8000754:	0f44      	lsrs	r4, r0, #29
 8000756:	4321      	orrs	r1, r4
 8000758:	4cc2      	ldr	r4, [pc, #776]	; (8000a64 <__aeabi_dsub+0x334>)
 800075a:	4691      	mov	r9, r2
 800075c:	4692      	mov	sl, r2
 800075e:	00c0      	lsls	r0, r0, #3
 8000760:	007a      	lsls	r2, r7, #1
 8000762:	4680      	mov	r8, r0
 8000764:	0d76      	lsrs	r6, r6, #21
 8000766:	0d52      	lsrs	r2, r2, #21
 8000768:	0fff      	lsrs	r7, r7, #31
 800076a:	42a2      	cmp	r2, r4
 800076c:	d100      	bne.n	8000770 <__aeabi_dsub+0x40>
 800076e:	e0b4      	b.n	80008da <__aeabi_dsub+0x1aa>
 8000770:	2401      	movs	r4, #1
 8000772:	4067      	eors	r7, r4
 8000774:	46bb      	mov	fp, r7
 8000776:	42bd      	cmp	r5, r7
 8000778:	d100      	bne.n	800077c <__aeabi_dsub+0x4c>
 800077a:	e088      	b.n	800088e <__aeabi_dsub+0x15e>
 800077c:	1ab4      	subs	r4, r6, r2
 800077e:	46a4      	mov	ip, r4
 8000780:	2c00      	cmp	r4, #0
 8000782:	dc00      	bgt.n	8000786 <__aeabi_dsub+0x56>
 8000784:	e0b2      	b.n	80008ec <__aeabi_dsub+0x1bc>
 8000786:	2a00      	cmp	r2, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dsub+0x5c>
 800078a:	e0c5      	b.n	8000918 <__aeabi_dsub+0x1e8>
 800078c:	4ab5      	ldr	r2, [pc, #724]	; (8000a64 <__aeabi_dsub+0x334>)
 800078e:	4296      	cmp	r6, r2
 8000790:	d100      	bne.n	8000794 <__aeabi_dsub+0x64>
 8000792:	e28b      	b.n	8000cac <__aeabi_dsub+0x57c>
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0412      	lsls	r2, r2, #16
 8000798:	4311      	orrs	r1, r2
 800079a:	4662      	mov	r2, ip
 800079c:	2a38      	cmp	r2, #56	; 0x38
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dsub+0x72>
 80007a0:	e1a1      	b.n	8000ae6 <__aeabi_dsub+0x3b6>
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dsub+0x78>
 80007a6:	e216      	b.n	8000bd6 <__aeabi_dsub+0x4a6>
 80007a8:	2720      	movs	r7, #32
 80007aa:	000c      	movs	r4, r1
 80007ac:	1abf      	subs	r7, r7, r2
 80007ae:	40bc      	lsls	r4, r7
 80007b0:	0002      	movs	r2, r0
 80007b2:	46a0      	mov	r8, r4
 80007b4:	4664      	mov	r4, ip
 80007b6:	40b8      	lsls	r0, r7
 80007b8:	40e2      	lsrs	r2, r4
 80007ba:	4644      	mov	r4, r8
 80007bc:	4314      	orrs	r4, r2
 80007be:	0002      	movs	r2, r0
 80007c0:	1e50      	subs	r0, r2, #1
 80007c2:	4182      	sbcs	r2, r0
 80007c4:	4660      	mov	r0, ip
 80007c6:	40c1      	lsrs	r1, r0
 80007c8:	4322      	orrs	r2, r4
 80007ca:	1a5b      	subs	r3, r3, r1
 80007cc:	4649      	mov	r1, r9
 80007ce:	1a8c      	subs	r4, r1, r2
 80007d0:	45a1      	cmp	r9, r4
 80007d2:	4192      	sbcs	r2, r2
 80007d4:	4252      	negs	r2, r2
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	4698      	mov	r8, r3
 80007da:	4643      	mov	r3, r8
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	d400      	bmi.n	80007e2 <__aeabi_dsub+0xb2>
 80007e0:	e117      	b.n	8000a12 <__aeabi_dsub+0x2e2>
 80007e2:	4643      	mov	r3, r8
 80007e4:	025b      	lsls	r3, r3, #9
 80007e6:	0a5b      	lsrs	r3, r3, #9
 80007e8:	4698      	mov	r8, r3
 80007ea:	4643      	mov	r3, r8
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dsub+0xc2>
 80007f0:	e16c      	b.n	8000acc <__aeabi_dsub+0x39c>
 80007f2:	4640      	mov	r0, r8
 80007f4:	f000 fbd2 	bl	8000f9c <__clzsi2>
 80007f8:	0002      	movs	r2, r0
 80007fa:	3a08      	subs	r2, #8
 80007fc:	2120      	movs	r1, #32
 80007fe:	0020      	movs	r0, r4
 8000800:	4643      	mov	r3, r8
 8000802:	1a89      	subs	r1, r1, r2
 8000804:	4093      	lsls	r3, r2
 8000806:	40c8      	lsrs	r0, r1
 8000808:	4094      	lsls	r4, r2
 800080a:	4303      	orrs	r3, r0
 800080c:	4296      	cmp	r6, r2
 800080e:	dd00      	ble.n	8000812 <__aeabi_dsub+0xe2>
 8000810:	e157      	b.n	8000ac2 <__aeabi_dsub+0x392>
 8000812:	1b96      	subs	r6, r2, r6
 8000814:	1c71      	adds	r1, r6, #1
 8000816:	291f      	cmp	r1, #31
 8000818:	dd00      	ble.n	800081c <__aeabi_dsub+0xec>
 800081a:	e1cb      	b.n	8000bb4 <__aeabi_dsub+0x484>
 800081c:	2220      	movs	r2, #32
 800081e:	0018      	movs	r0, r3
 8000820:	0026      	movs	r6, r4
 8000822:	1a52      	subs	r2, r2, r1
 8000824:	4094      	lsls	r4, r2
 8000826:	4090      	lsls	r0, r2
 8000828:	40ce      	lsrs	r6, r1
 800082a:	40cb      	lsrs	r3, r1
 800082c:	1e62      	subs	r2, r4, #1
 800082e:	4194      	sbcs	r4, r2
 8000830:	4330      	orrs	r0, r6
 8000832:	4698      	mov	r8, r3
 8000834:	2600      	movs	r6, #0
 8000836:	4304      	orrs	r4, r0
 8000838:	0763      	lsls	r3, r4, #29
 800083a:	d009      	beq.n	8000850 <__aeabi_dsub+0x120>
 800083c:	230f      	movs	r3, #15
 800083e:	4023      	ands	r3, r4
 8000840:	2b04      	cmp	r3, #4
 8000842:	d005      	beq.n	8000850 <__aeabi_dsub+0x120>
 8000844:	1d23      	adds	r3, r4, #4
 8000846:	42a3      	cmp	r3, r4
 8000848:	41a4      	sbcs	r4, r4
 800084a:	4264      	negs	r4, r4
 800084c:	44a0      	add	r8, r4
 800084e:	001c      	movs	r4, r3
 8000850:	4643      	mov	r3, r8
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dsub+0x128>
 8000856:	e0df      	b.n	8000a18 <__aeabi_dsub+0x2e8>
 8000858:	4b82      	ldr	r3, [pc, #520]	; (8000a64 <__aeabi_dsub+0x334>)
 800085a:	3601      	adds	r6, #1
 800085c:	429e      	cmp	r6, r3
 800085e:	d100      	bne.n	8000862 <__aeabi_dsub+0x132>
 8000860:	e0fb      	b.n	8000a5a <__aeabi_dsub+0x32a>
 8000862:	4642      	mov	r2, r8
 8000864:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <__aeabi_dsub+0x338>)
 8000866:	08e4      	lsrs	r4, r4, #3
 8000868:	401a      	ands	r2, r3
 800086a:	0013      	movs	r3, r2
 800086c:	0571      	lsls	r1, r6, #21
 800086e:	0752      	lsls	r2, r2, #29
 8000870:	025b      	lsls	r3, r3, #9
 8000872:	4322      	orrs	r2, r4
 8000874:	0b1b      	lsrs	r3, r3, #12
 8000876:	0d49      	lsrs	r1, r1, #21
 8000878:	0509      	lsls	r1, r1, #20
 800087a:	07ed      	lsls	r5, r5, #31
 800087c:	4319      	orrs	r1, r3
 800087e:	4329      	orrs	r1, r5
 8000880:	0010      	movs	r0, r2
 8000882:	bcf0      	pop	{r4, r5, r6, r7}
 8000884:	46bb      	mov	fp, r7
 8000886:	46b2      	mov	sl, r6
 8000888:	46a9      	mov	r9, r5
 800088a:	46a0      	mov	r8, r4
 800088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800088e:	1ab4      	subs	r4, r6, r2
 8000890:	46a4      	mov	ip, r4
 8000892:	2c00      	cmp	r4, #0
 8000894:	dd58      	ble.n	8000948 <__aeabi_dsub+0x218>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d100      	bne.n	800089c <__aeabi_dsub+0x16c>
 800089a:	e09e      	b.n	80009da <__aeabi_dsub+0x2aa>
 800089c:	4a71      	ldr	r2, [pc, #452]	; (8000a64 <__aeabi_dsub+0x334>)
 800089e:	4296      	cmp	r6, r2
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x174>
 80008a2:	e13b      	b.n	8000b1c <__aeabi_dsub+0x3ec>
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0412      	lsls	r2, r2, #16
 80008a8:	4311      	orrs	r1, r2
 80008aa:	4662      	mov	r2, ip
 80008ac:	2a38      	cmp	r2, #56	; 0x38
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_dsub+0x182>
 80008b0:	e0c1      	b.n	8000a36 <__aeabi_dsub+0x306>
 80008b2:	2a1f      	cmp	r2, #31
 80008b4:	dc00      	bgt.n	80008b8 <__aeabi_dsub+0x188>
 80008b6:	e1bb      	b.n	8000c30 <__aeabi_dsub+0x500>
 80008b8:	000c      	movs	r4, r1
 80008ba:	3a20      	subs	r2, #32
 80008bc:	40d4      	lsrs	r4, r2
 80008be:	0022      	movs	r2, r4
 80008c0:	4664      	mov	r4, ip
 80008c2:	2c20      	cmp	r4, #32
 80008c4:	d004      	beq.n	80008d0 <__aeabi_dsub+0x1a0>
 80008c6:	2740      	movs	r7, #64	; 0x40
 80008c8:	1b3f      	subs	r7, r7, r4
 80008ca:	40b9      	lsls	r1, r7
 80008cc:	4308      	orrs	r0, r1
 80008ce:	4680      	mov	r8, r0
 80008d0:	4644      	mov	r4, r8
 80008d2:	1e61      	subs	r1, r4, #1
 80008d4:	418c      	sbcs	r4, r1
 80008d6:	4314      	orrs	r4, r2
 80008d8:	e0b1      	b.n	8000a3e <__aeabi_dsub+0x30e>
 80008da:	000c      	movs	r4, r1
 80008dc:	4304      	orrs	r4, r0
 80008de:	d02a      	beq.n	8000936 <__aeabi_dsub+0x206>
 80008e0:	46bb      	mov	fp, r7
 80008e2:	42bd      	cmp	r5, r7
 80008e4:	d02d      	beq.n	8000942 <__aeabi_dsub+0x212>
 80008e6:	4c61      	ldr	r4, [pc, #388]	; (8000a6c <__aeabi_dsub+0x33c>)
 80008e8:	46a4      	mov	ip, r4
 80008ea:	44b4      	add	ip, r6
 80008ec:	4664      	mov	r4, ip
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d05c      	beq.n	80009ac <__aeabi_dsub+0x27c>
 80008f2:	1b94      	subs	r4, r2, r6
 80008f4:	46a4      	mov	ip, r4
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_dsub+0x1cc>
 80008fa:	e115      	b.n	8000b28 <__aeabi_dsub+0x3f8>
 80008fc:	464d      	mov	r5, r9
 80008fe:	431d      	orrs	r5, r3
 8000900:	d100      	bne.n	8000904 <__aeabi_dsub+0x1d4>
 8000902:	e1c3      	b.n	8000c8c <__aeabi_dsub+0x55c>
 8000904:	1e65      	subs	r5, r4, #1
 8000906:	2c01      	cmp	r4, #1
 8000908:	d100      	bne.n	800090c <__aeabi_dsub+0x1dc>
 800090a:	e20c      	b.n	8000d26 <__aeabi_dsub+0x5f6>
 800090c:	4e55      	ldr	r6, [pc, #340]	; (8000a64 <__aeabi_dsub+0x334>)
 800090e:	42b4      	cmp	r4, r6
 8000910:	d100      	bne.n	8000914 <__aeabi_dsub+0x1e4>
 8000912:	e1f8      	b.n	8000d06 <__aeabi_dsub+0x5d6>
 8000914:	46ac      	mov	ip, r5
 8000916:	e10e      	b.n	8000b36 <__aeabi_dsub+0x406>
 8000918:	000a      	movs	r2, r1
 800091a:	4302      	orrs	r2, r0
 800091c:	d100      	bne.n	8000920 <__aeabi_dsub+0x1f0>
 800091e:	e136      	b.n	8000b8e <__aeabi_dsub+0x45e>
 8000920:	0022      	movs	r2, r4
 8000922:	3a01      	subs	r2, #1
 8000924:	2c01      	cmp	r4, #1
 8000926:	d100      	bne.n	800092a <__aeabi_dsub+0x1fa>
 8000928:	e1c6      	b.n	8000cb8 <__aeabi_dsub+0x588>
 800092a:	4c4e      	ldr	r4, [pc, #312]	; (8000a64 <__aeabi_dsub+0x334>)
 800092c:	45a4      	cmp	ip, r4
 800092e:	d100      	bne.n	8000932 <__aeabi_dsub+0x202>
 8000930:	e0f4      	b.n	8000b1c <__aeabi_dsub+0x3ec>
 8000932:	4694      	mov	ip, r2
 8000934:	e731      	b.n	800079a <__aeabi_dsub+0x6a>
 8000936:	2401      	movs	r4, #1
 8000938:	4067      	eors	r7, r4
 800093a:	46bb      	mov	fp, r7
 800093c:	42bd      	cmp	r5, r7
 800093e:	d000      	beq.n	8000942 <__aeabi_dsub+0x212>
 8000940:	e71c      	b.n	800077c <__aeabi_dsub+0x4c>
 8000942:	4c4a      	ldr	r4, [pc, #296]	; (8000a6c <__aeabi_dsub+0x33c>)
 8000944:	46a4      	mov	ip, r4
 8000946:	44b4      	add	ip, r6
 8000948:	4664      	mov	r4, ip
 800094a:	2c00      	cmp	r4, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_dsub+0x220>
 800094e:	e0cf      	b.n	8000af0 <__aeabi_dsub+0x3c0>
 8000950:	1b94      	subs	r4, r2, r6
 8000952:	46a4      	mov	ip, r4
 8000954:	2e00      	cmp	r6, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x22a>
 8000958:	e15c      	b.n	8000c14 <__aeabi_dsub+0x4e4>
 800095a:	4e42      	ldr	r6, [pc, #264]	; (8000a64 <__aeabi_dsub+0x334>)
 800095c:	42b2      	cmp	r2, r6
 800095e:	d100      	bne.n	8000962 <__aeabi_dsub+0x232>
 8000960:	e1ec      	b.n	8000d3c <__aeabi_dsub+0x60c>
 8000962:	2680      	movs	r6, #128	; 0x80
 8000964:	0436      	lsls	r6, r6, #16
 8000966:	4333      	orrs	r3, r6
 8000968:	4664      	mov	r4, ip
 800096a:	2c38      	cmp	r4, #56	; 0x38
 800096c:	dd00      	ble.n	8000970 <__aeabi_dsub+0x240>
 800096e:	e1b3      	b.n	8000cd8 <__aeabi_dsub+0x5a8>
 8000970:	2c1f      	cmp	r4, #31
 8000972:	dd00      	ble.n	8000976 <__aeabi_dsub+0x246>
 8000974:	e238      	b.n	8000de8 <__aeabi_dsub+0x6b8>
 8000976:	2620      	movs	r6, #32
 8000978:	1b36      	subs	r6, r6, r4
 800097a:	001c      	movs	r4, r3
 800097c:	40b4      	lsls	r4, r6
 800097e:	464f      	mov	r7, r9
 8000980:	46a0      	mov	r8, r4
 8000982:	4664      	mov	r4, ip
 8000984:	40e7      	lsrs	r7, r4
 8000986:	4644      	mov	r4, r8
 8000988:	433c      	orrs	r4, r7
 800098a:	464f      	mov	r7, r9
 800098c:	40b7      	lsls	r7, r6
 800098e:	003e      	movs	r6, r7
 8000990:	1e77      	subs	r7, r6, #1
 8000992:	41be      	sbcs	r6, r7
 8000994:	4334      	orrs	r4, r6
 8000996:	4666      	mov	r6, ip
 8000998:	40f3      	lsrs	r3, r6
 800099a:	18c9      	adds	r1, r1, r3
 800099c:	1824      	adds	r4, r4, r0
 800099e:	4284      	cmp	r4, r0
 80009a0:	419b      	sbcs	r3, r3
 80009a2:	425b      	negs	r3, r3
 80009a4:	4698      	mov	r8, r3
 80009a6:	0016      	movs	r6, r2
 80009a8:	4488      	add	r8, r1
 80009aa:	e04e      	b.n	8000a4a <__aeabi_dsub+0x31a>
 80009ac:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <__aeabi_dsub+0x340>)
 80009ae:	1c74      	adds	r4, r6, #1
 80009b0:	4214      	tst	r4, r2
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dsub+0x286>
 80009b4:	e0d6      	b.n	8000b64 <__aeabi_dsub+0x434>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_dsub+0x290>
 80009be:	e15b      	b.n	8000c78 <__aeabi_dsub+0x548>
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dsub+0x296>
 80009c4:	e1a5      	b.n	8000d12 <__aeabi_dsub+0x5e2>
 80009c6:	000a      	movs	r2, r1
 80009c8:	4302      	orrs	r2, r0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dsub+0x29e>
 80009cc:	e1bb      	b.n	8000d46 <__aeabi_dsub+0x616>
 80009ce:	464a      	mov	r2, r9
 80009d0:	0759      	lsls	r1, r3, #29
 80009d2:	08d2      	lsrs	r2, r2, #3
 80009d4:	430a      	orrs	r2, r1
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	e027      	b.n	8000a2a <__aeabi_dsub+0x2fa>
 80009da:	000a      	movs	r2, r1
 80009dc:	4302      	orrs	r2, r0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dsub+0x2b2>
 80009e0:	e174      	b.n	8000ccc <__aeabi_dsub+0x59c>
 80009e2:	0022      	movs	r2, r4
 80009e4:	3a01      	subs	r2, #1
 80009e6:	2c01      	cmp	r4, #1
 80009e8:	d005      	beq.n	80009f6 <__aeabi_dsub+0x2c6>
 80009ea:	4c1e      	ldr	r4, [pc, #120]	; (8000a64 <__aeabi_dsub+0x334>)
 80009ec:	45a4      	cmp	ip, r4
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dsub+0x2c2>
 80009f0:	e094      	b.n	8000b1c <__aeabi_dsub+0x3ec>
 80009f2:	4694      	mov	ip, r2
 80009f4:	e759      	b.n	80008aa <__aeabi_dsub+0x17a>
 80009f6:	4448      	add	r0, r9
 80009f8:	4548      	cmp	r0, r9
 80009fa:	4192      	sbcs	r2, r2
 80009fc:	185b      	adds	r3, r3, r1
 80009fe:	4698      	mov	r8, r3
 8000a00:	0004      	movs	r4, r0
 8000a02:	4252      	negs	r2, r2
 8000a04:	4490      	add	r8, r2
 8000a06:	4643      	mov	r3, r8
 8000a08:	2602      	movs	r6, #2
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	d500      	bpl.n	8000a10 <__aeabi_dsub+0x2e0>
 8000a0e:	e0c4      	b.n	8000b9a <__aeabi_dsub+0x46a>
 8000a10:	3e01      	subs	r6, #1
 8000a12:	0763      	lsls	r3, r4, #29
 8000a14:	d000      	beq.n	8000a18 <__aeabi_dsub+0x2e8>
 8000a16:	e711      	b.n	800083c <__aeabi_dsub+0x10c>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	46b4      	mov	ip, r6
 8000a1c:	0759      	lsls	r1, r3, #29
 8000a1e:	08e2      	lsrs	r2, r4, #3
 8000a20:	430a      	orrs	r2, r1
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	490f      	ldr	r1, [pc, #60]	; (8000a64 <__aeabi_dsub+0x334>)
 8000a26:	458c      	cmp	ip, r1
 8000a28:	d040      	beq.n	8000aac <__aeabi_dsub+0x37c>
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	031b      	lsls	r3, r3, #12
 8000a2e:	0549      	lsls	r1, r1, #21
 8000a30:	0b1b      	lsrs	r3, r3, #12
 8000a32:	0d49      	lsrs	r1, r1, #21
 8000a34:	e720      	b.n	8000878 <__aeabi_dsub+0x148>
 8000a36:	4301      	orrs	r1, r0
 8000a38:	000c      	movs	r4, r1
 8000a3a:	1e61      	subs	r1, r4, #1
 8000a3c:	418c      	sbcs	r4, r1
 8000a3e:	444c      	add	r4, r9
 8000a40:	454c      	cmp	r4, r9
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	4252      	negs	r2, r2
 8000a46:	4690      	mov	r8, r2
 8000a48:	4498      	add	r8, r3
 8000a4a:	4643      	mov	r3, r8
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	d5e0      	bpl.n	8000a12 <__aeabi_dsub+0x2e2>
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__aeabi_dsub+0x334>)
 8000a52:	3601      	adds	r6, #1
 8000a54:	429e      	cmp	r6, r3
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dsub+0x32a>
 8000a58:	e09f      	b.n	8000b9a <__aeabi_dsub+0x46a>
 8000a5a:	0031      	movs	r1, r6
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	e70a      	b.n	8000878 <__aeabi_dsub+0x148>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	000007ff 	.word	0x000007ff
 8000a68:	ff7fffff 	.word	0xff7fffff
 8000a6c:	fffff801 	.word	0xfffff801
 8000a70:	000007fe 	.word	0x000007fe
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dsub+0x34a>
 8000a78:	e160      	b.n	8000d3c <__aeabi_dsub+0x60c>
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	4302      	orrs	r2, r0
 8000a7e:	d04d      	beq.n	8000b1c <__aeabi_dsub+0x3ec>
 8000a80:	464a      	mov	r2, r9
 8000a82:	075c      	lsls	r4, r3, #29
 8000a84:	08d2      	lsrs	r2, r2, #3
 8000a86:	4322      	orrs	r2, r4
 8000a88:	2480      	movs	r4, #128	; 0x80
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	0324      	lsls	r4, r4, #12
 8000a8e:	4223      	tst	r3, r4
 8000a90:	d007      	beq.n	8000aa2 <__aeabi_dsub+0x372>
 8000a92:	08ce      	lsrs	r6, r1, #3
 8000a94:	4226      	tst	r6, r4
 8000a96:	d104      	bne.n	8000aa2 <__aeabi_dsub+0x372>
 8000a98:	465d      	mov	r5, fp
 8000a9a:	0033      	movs	r3, r6
 8000a9c:	08c2      	lsrs	r2, r0, #3
 8000a9e:	0749      	lsls	r1, r1, #29
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	0f51      	lsrs	r1, r2, #29
 8000aa4:	00d2      	lsls	r2, r2, #3
 8000aa6:	08d2      	lsrs	r2, r2, #3
 8000aa8:	0749      	lsls	r1, r1, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	0011      	movs	r1, r2
 8000aae:	4319      	orrs	r1, r3
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dsub+0x384>
 8000ab2:	e1c8      	b.n	8000e46 <__aeabi_dsub+0x716>
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0309      	lsls	r1, r1, #12
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	031b      	lsls	r3, r3, #12
 8000abc:	49d5      	ldr	r1, [pc, #852]	; (8000e14 <__aeabi_dsub+0x6e4>)
 8000abe:	0b1b      	lsrs	r3, r3, #12
 8000ac0:	e6da      	b.n	8000878 <__aeabi_dsub+0x148>
 8000ac2:	49d5      	ldr	r1, [pc, #852]	; (8000e18 <__aeabi_dsub+0x6e8>)
 8000ac4:	1ab6      	subs	r6, r6, r2
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	4698      	mov	r8, r3
 8000aca:	e6b5      	b.n	8000838 <__aeabi_dsub+0x108>
 8000acc:	0020      	movs	r0, r4
 8000ace:	f000 fa65 	bl	8000f9c <__clzsi2>
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	3218      	adds	r2, #24
 8000ad6:	2a1f      	cmp	r2, #31
 8000ad8:	dc00      	bgt.n	8000adc <__aeabi_dsub+0x3ac>
 8000ada:	e68f      	b.n	80007fc <__aeabi_dsub+0xcc>
 8000adc:	0023      	movs	r3, r4
 8000ade:	3808      	subs	r0, #8
 8000ae0:	4083      	lsls	r3, r0
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	e692      	b.n	800080c <__aeabi_dsub+0xdc>
 8000ae6:	4308      	orrs	r0, r1
 8000ae8:	0002      	movs	r2, r0
 8000aea:	1e50      	subs	r0, r2, #1
 8000aec:	4182      	sbcs	r2, r0
 8000aee:	e66d      	b.n	80007cc <__aeabi_dsub+0x9c>
 8000af0:	4cca      	ldr	r4, [pc, #808]	; (8000e1c <__aeabi_dsub+0x6ec>)
 8000af2:	1c72      	adds	r2, r6, #1
 8000af4:	4222      	tst	r2, r4
 8000af6:	d000      	beq.n	8000afa <__aeabi_dsub+0x3ca>
 8000af8:	e0ad      	b.n	8000c56 <__aeabi_dsub+0x526>
 8000afa:	464a      	mov	r2, r9
 8000afc:	431a      	orrs	r2, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d1b8      	bne.n	8000a74 <__aeabi_dsub+0x344>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dsub+0x3d8>
 8000b06:	e158      	b.n	8000dba <__aeabi_dsub+0x68a>
 8000b08:	000a      	movs	r2, r1
 8000b0a:	4302      	orrs	r2, r0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dsub+0x3e0>
 8000b0e:	e159      	b.n	8000dc4 <__aeabi_dsub+0x694>
 8000b10:	464a      	mov	r2, r9
 8000b12:	0759      	lsls	r1, r3, #29
 8000b14:	08d2      	lsrs	r2, r2, #3
 8000b16:	430a      	orrs	r2, r1
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	e786      	b.n	8000a2a <__aeabi_dsub+0x2fa>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	0759      	lsls	r1, r3, #29
 8000b20:	08d2      	lsrs	r2, r2, #3
 8000b22:	430a      	orrs	r2, r1
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	e7c1      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000b28:	4dba      	ldr	r5, [pc, #744]	; (8000e14 <__aeabi_dsub+0x6e4>)
 8000b2a:	42aa      	cmp	r2, r5
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dsub+0x400>
 8000b2e:	e11e      	b.n	8000d6e <__aeabi_dsub+0x63e>
 8000b30:	2580      	movs	r5, #128	; 0x80
 8000b32:	042d      	lsls	r5, r5, #16
 8000b34:	432b      	orrs	r3, r5
 8000b36:	4664      	mov	r4, ip
 8000b38:	2c38      	cmp	r4, #56	; 0x38
 8000b3a:	dc5d      	bgt.n	8000bf8 <__aeabi_dsub+0x4c8>
 8000b3c:	2c1f      	cmp	r4, #31
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_dsub+0x412>
 8000b40:	e0d0      	b.n	8000ce4 <__aeabi_dsub+0x5b4>
 8000b42:	2520      	movs	r5, #32
 8000b44:	4667      	mov	r7, ip
 8000b46:	1b2d      	subs	r5, r5, r4
 8000b48:	464e      	mov	r6, r9
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	40fe      	lsrs	r6, r7
 8000b4e:	40ac      	lsls	r4, r5
 8000b50:	4334      	orrs	r4, r6
 8000b52:	464e      	mov	r6, r9
 8000b54:	40ae      	lsls	r6, r5
 8000b56:	0035      	movs	r5, r6
 8000b58:	40fb      	lsrs	r3, r7
 8000b5a:	1e6e      	subs	r6, r5, #1
 8000b5c:	41b5      	sbcs	r5, r6
 8000b5e:	1ac9      	subs	r1, r1, r3
 8000b60:	432c      	orrs	r4, r5
 8000b62:	e04e      	b.n	8000c02 <__aeabi_dsub+0x4d2>
 8000b64:	464a      	mov	r2, r9
 8000b66:	1a14      	subs	r4, r2, r0
 8000b68:	45a1      	cmp	r9, r4
 8000b6a:	4192      	sbcs	r2, r2
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	4690      	mov	r8, r2
 8000b70:	1a5f      	subs	r7, r3, r1
 8000b72:	003a      	movs	r2, r7
 8000b74:	4647      	mov	r7, r8
 8000b76:	1bd2      	subs	r2, r2, r7
 8000b78:	4690      	mov	r8, r2
 8000b7a:	0212      	lsls	r2, r2, #8
 8000b7c:	d500      	bpl.n	8000b80 <__aeabi_dsub+0x450>
 8000b7e:	e08b      	b.n	8000c98 <__aeabi_dsub+0x568>
 8000b80:	4642      	mov	r2, r8
 8000b82:	4322      	orrs	r2, r4
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dsub+0x458>
 8000b86:	e630      	b.n	80007ea <__aeabi_dsub+0xba>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	e74d      	b.n	8000a2a <__aeabi_dsub+0x2fa>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	0759      	lsls	r1, r3, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	430a      	orrs	r2, r1
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	e744      	b.n	8000a24 <__aeabi_dsub+0x2f4>
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	4b9e      	ldr	r3, [pc, #632]	; (8000e18 <__aeabi_dsub+0x6e8>)
 8000b9e:	0861      	lsrs	r1, r4, #1
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4014      	ands	r4, r2
 8000ba8:	430c      	orrs	r4, r1
 8000baa:	07da      	lsls	r2, r3, #31
 8000bac:	085b      	lsrs	r3, r3, #1
 8000bae:	4698      	mov	r8, r3
 8000bb0:	4314      	orrs	r4, r2
 8000bb2:	e641      	b.n	8000838 <__aeabi_dsub+0x108>
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	3e1f      	subs	r6, #31
 8000bb8:	40f2      	lsrs	r2, r6
 8000bba:	0016      	movs	r6, r2
 8000bbc:	2920      	cmp	r1, #32
 8000bbe:	d003      	beq.n	8000bc8 <__aeabi_dsub+0x498>
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	1a51      	subs	r1, r2, r1
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	431c      	orrs	r4, r3
 8000bc8:	1e62      	subs	r2, r4, #1
 8000bca:	4194      	sbcs	r4, r2
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4334      	orrs	r4, r6
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	2600      	movs	r6, #0
 8000bd4:	e71d      	b.n	8000a12 <__aeabi_dsub+0x2e2>
 8000bd6:	000c      	movs	r4, r1
 8000bd8:	3a20      	subs	r2, #32
 8000bda:	40d4      	lsrs	r4, r2
 8000bdc:	0022      	movs	r2, r4
 8000bde:	4664      	mov	r4, ip
 8000be0:	2c20      	cmp	r4, #32
 8000be2:	d004      	beq.n	8000bee <__aeabi_dsub+0x4be>
 8000be4:	2740      	movs	r7, #64	; 0x40
 8000be6:	1b3f      	subs	r7, r7, r4
 8000be8:	40b9      	lsls	r1, r7
 8000bea:	4308      	orrs	r0, r1
 8000bec:	4680      	mov	r8, r0
 8000bee:	4644      	mov	r4, r8
 8000bf0:	1e61      	subs	r1, r4, #1
 8000bf2:	418c      	sbcs	r4, r1
 8000bf4:	4322      	orrs	r2, r4
 8000bf6:	e5e9      	b.n	80007cc <__aeabi_dsub+0x9c>
 8000bf8:	464c      	mov	r4, r9
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	1b04      	subs	r4, r0, r4
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	419b      	sbcs	r3, r3
 8000c08:	425b      	negs	r3, r3
 8000c0a:	1acb      	subs	r3, r1, r3
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	465d      	mov	r5, fp
 8000c10:	0016      	movs	r6, r2
 8000c12:	e5e2      	b.n	80007da <__aeabi_dsub+0xaa>
 8000c14:	464e      	mov	r6, r9
 8000c16:	431e      	orrs	r6, r3
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dsub+0x4ec>
 8000c1a:	e0ae      	b.n	8000d7a <__aeabi_dsub+0x64a>
 8000c1c:	1e66      	subs	r6, r4, #1
 8000c1e:	2c01      	cmp	r4, #1
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dsub+0x4f4>
 8000c22:	e0fd      	b.n	8000e20 <__aeabi_dsub+0x6f0>
 8000c24:	4f7b      	ldr	r7, [pc, #492]	; (8000e14 <__aeabi_dsub+0x6e4>)
 8000c26:	42bc      	cmp	r4, r7
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dsub+0x4fc>
 8000c2a:	e107      	b.n	8000e3c <__aeabi_dsub+0x70c>
 8000c2c:	46b4      	mov	ip, r6
 8000c2e:	e69b      	b.n	8000968 <__aeabi_dsub+0x238>
 8000c30:	4664      	mov	r4, ip
 8000c32:	2220      	movs	r2, #32
 8000c34:	1b12      	subs	r2, r2, r4
 8000c36:	000c      	movs	r4, r1
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	0007      	movs	r7, r0
 8000c3c:	4090      	lsls	r0, r2
 8000c3e:	46a0      	mov	r8, r4
 8000c40:	4664      	mov	r4, ip
 8000c42:	1e42      	subs	r2, r0, #1
 8000c44:	4190      	sbcs	r0, r2
 8000c46:	4662      	mov	r2, ip
 8000c48:	40e7      	lsrs	r7, r4
 8000c4a:	4644      	mov	r4, r8
 8000c4c:	40d1      	lsrs	r1, r2
 8000c4e:	433c      	orrs	r4, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	185b      	adds	r3, r3, r1
 8000c54:	e6f3      	b.n	8000a3e <__aeabi_dsub+0x30e>
 8000c56:	4c6f      	ldr	r4, [pc, #444]	; (8000e14 <__aeabi_dsub+0x6e4>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dsub+0x52e>
 8000c5c:	e0d5      	b.n	8000e0a <__aeabi_dsub+0x6da>
 8000c5e:	4448      	add	r0, r9
 8000c60:	185b      	adds	r3, r3, r1
 8000c62:	4548      	cmp	r0, r9
 8000c64:	4189      	sbcs	r1, r1
 8000c66:	4249      	negs	r1, r1
 8000c68:	185b      	adds	r3, r3, r1
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6cc      	b.n	8000a12 <__aeabi_dsub+0x2e2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dsub+0x54e>
 8000c7c:	e082      	b.n	8000d84 <__aeabi_dsub+0x654>
 8000c7e:	000a      	movs	r2, r1
 8000c80:	4302      	orrs	r2, r0
 8000c82:	d140      	bne.n	8000d06 <__aeabi_dsub+0x5d6>
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	2500      	movs	r5, #0
 8000c88:	031b      	lsls	r3, r3, #12
 8000c8a:	e713      	b.n	8000ab4 <__aeabi_dsub+0x384>
 8000c8c:	074b      	lsls	r3, r1, #29
 8000c8e:	08c2      	lsrs	r2, r0, #3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	465d      	mov	r5, fp
 8000c94:	08cb      	lsrs	r3, r1, #3
 8000c96:	e6c5      	b.n	8000a24 <__aeabi_dsub+0x2f4>
 8000c98:	464a      	mov	r2, r9
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	42a0      	cmp	r0, r4
 8000c9e:	4192      	sbcs	r2, r2
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	4252      	negs	r2, r2
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	465d      	mov	r5, fp
 8000caa:	e59e      	b.n	80007ea <__aeabi_dsub+0xba>
 8000cac:	464a      	mov	r2, r9
 8000cae:	0759      	lsls	r1, r3, #29
 8000cb0:	08d2      	lsrs	r2, r2, #3
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	e6f9      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000cb8:	464a      	mov	r2, r9
 8000cba:	1a14      	subs	r4, r2, r0
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	4192      	sbcs	r2, r2
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	1a9b      	subs	r3, r3, r2
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e586      	b.n	80007da <__aeabi_dsub+0xaa>
 8000ccc:	464a      	mov	r2, r9
 8000cce:	0759      	lsls	r1, r3, #29
 8000cd0:	08d2      	lsrs	r2, r2, #3
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	e6a5      	b.n	8000a24 <__aeabi_dsub+0x2f4>
 8000cd8:	464c      	mov	r4, r9
 8000cda:	4323      	orrs	r3, r4
 8000cdc:	001c      	movs	r4, r3
 8000cde:	1e63      	subs	r3, r4, #1
 8000ce0:	419c      	sbcs	r4, r3
 8000ce2:	e65b      	b.n	800099c <__aeabi_dsub+0x26c>
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	001e      	movs	r6, r3
 8000ce8:	3d20      	subs	r5, #32
 8000cea:	40ee      	lsrs	r6, r5
 8000cec:	2c20      	cmp	r4, #32
 8000cee:	d005      	beq.n	8000cfc <__aeabi_dsub+0x5cc>
 8000cf0:	2540      	movs	r5, #64	; 0x40
 8000cf2:	1b2d      	subs	r5, r5, r4
 8000cf4:	40ab      	lsls	r3, r5
 8000cf6:	464c      	mov	r4, r9
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	46a2      	mov	sl, r4
 8000cfc:	4654      	mov	r4, sl
 8000cfe:	1e63      	subs	r3, r4, #1
 8000d00:	419c      	sbcs	r4, r3
 8000d02:	4334      	orrs	r4, r6
 8000d04:	e77d      	b.n	8000c02 <__aeabi_dsub+0x4d2>
 8000d06:	074b      	lsls	r3, r1, #29
 8000d08:	08c2      	lsrs	r2, r0, #3
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	465d      	mov	r5, fp
 8000d0e:	08cb      	lsrs	r3, r1, #3
 8000d10:	e6cc      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000d12:	000a      	movs	r2, r1
 8000d14:	4302      	orrs	r2, r0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dsub+0x5ea>
 8000d18:	e736      	b.n	8000b88 <__aeabi_dsub+0x458>
 8000d1a:	074b      	lsls	r3, r1, #29
 8000d1c:	08c2      	lsrs	r2, r0, #3
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	465d      	mov	r5, fp
 8000d22:	08cb      	lsrs	r3, r1, #3
 8000d24:	e681      	b.n	8000a2a <__aeabi_dsub+0x2fa>
 8000d26:	464a      	mov	r2, r9
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	42a0      	cmp	r0, r4
 8000d2c:	4192      	sbcs	r2, r2
 8000d2e:	1acb      	subs	r3, r1, r3
 8000d30:	4252      	negs	r2, r2
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	4698      	mov	r8, r3
 8000d36:	465d      	mov	r5, fp
 8000d38:	2601      	movs	r6, #1
 8000d3a:	e54e      	b.n	80007da <__aeabi_dsub+0xaa>
 8000d3c:	074b      	lsls	r3, r1, #29
 8000d3e:	08c2      	lsrs	r2, r0, #3
 8000d40:	431a      	orrs	r2, r3
 8000d42:	08cb      	lsrs	r3, r1, #3
 8000d44:	e6b2      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000d46:	464a      	mov	r2, r9
 8000d48:	1a14      	subs	r4, r2, r0
 8000d4a:	45a1      	cmp	r9, r4
 8000d4c:	4192      	sbcs	r2, r2
 8000d4e:	1a5f      	subs	r7, r3, r1
 8000d50:	4252      	negs	r2, r2
 8000d52:	1aba      	subs	r2, r7, r2
 8000d54:	4690      	mov	r8, r2
 8000d56:	0212      	lsls	r2, r2, #8
 8000d58:	d56b      	bpl.n	8000e32 <__aeabi_dsub+0x702>
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	42a0      	cmp	r0, r4
 8000d60:	4192      	sbcs	r2, r2
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	4252      	negs	r2, r2
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	4698      	mov	r8, r3
 8000d6a:	465d      	mov	r5, fp
 8000d6c:	e564      	b.n	8000838 <__aeabi_dsub+0x108>
 8000d6e:	074b      	lsls	r3, r1, #29
 8000d70:	08c2      	lsrs	r2, r0, #3
 8000d72:	431a      	orrs	r2, r3
 8000d74:	465d      	mov	r5, fp
 8000d76:	08cb      	lsrs	r3, r1, #3
 8000d78:	e698      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000d7a:	074b      	lsls	r3, r1, #29
 8000d7c:	08c2      	lsrs	r2, r0, #3
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	08cb      	lsrs	r3, r1, #3
 8000d82:	e64f      	b.n	8000a24 <__aeabi_dsub+0x2f4>
 8000d84:	000a      	movs	r2, r1
 8000d86:	4302      	orrs	r2, r0
 8000d88:	d090      	beq.n	8000cac <__aeabi_dsub+0x57c>
 8000d8a:	464a      	mov	r2, r9
 8000d8c:	075c      	lsls	r4, r3, #29
 8000d8e:	08d2      	lsrs	r2, r2, #3
 8000d90:	4314      	orrs	r4, r2
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	0312      	lsls	r2, r2, #12
 8000d98:	4213      	tst	r3, r2
 8000d9a:	d008      	beq.n	8000dae <__aeabi_dsub+0x67e>
 8000d9c:	08ce      	lsrs	r6, r1, #3
 8000d9e:	4216      	tst	r6, r2
 8000da0:	d105      	bne.n	8000dae <__aeabi_dsub+0x67e>
 8000da2:	08c0      	lsrs	r0, r0, #3
 8000da4:	0749      	lsls	r1, r1, #29
 8000da6:	4308      	orrs	r0, r1
 8000da8:	0004      	movs	r4, r0
 8000daa:	465d      	mov	r5, fp
 8000dac:	0033      	movs	r3, r6
 8000dae:	0f61      	lsrs	r1, r4, #29
 8000db0:	00e2      	lsls	r2, r4, #3
 8000db2:	0749      	lsls	r1, r1, #29
 8000db4:	08d2      	lsrs	r2, r2, #3
 8000db6:	430a      	orrs	r2, r1
 8000db8:	e678      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000dba:	074b      	lsls	r3, r1, #29
 8000dbc:	08c2      	lsrs	r2, r0, #3
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	08cb      	lsrs	r3, r1, #3
 8000dc2:	e632      	b.n	8000a2a <__aeabi_dsub+0x2fa>
 8000dc4:	4448      	add	r0, r9
 8000dc6:	185b      	adds	r3, r3, r1
 8000dc8:	4548      	cmp	r0, r9
 8000dca:	4192      	sbcs	r2, r2
 8000dcc:	4698      	mov	r8, r3
 8000dce:	4252      	negs	r2, r2
 8000dd0:	4490      	add	r8, r2
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	0004      	movs	r4, r0
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	d400      	bmi.n	8000ddc <__aeabi_dsub+0x6ac>
 8000dda:	e61a      	b.n	8000a12 <__aeabi_dsub+0x2e2>
 8000ddc:	4642      	mov	r2, r8
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <__aeabi_dsub+0x6e8>)
 8000de0:	2601      	movs	r6, #1
 8000de2:	401a      	ands	r2, r3
 8000de4:	4690      	mov	r8, r2
 8000de6:	e614      	b.n	8000a12 <__aeabi_dsub+0x2e2>
 8000de8:	4666      	mov	r6, ip
 8000dea:	001f      	movs	r7, r3
 8000dec:	3e20      	subs	r6, #32
 8000dee:	40f7      	lsrs	r7, r6
 8000df0:	2c20      	cmp	r4, #32
 8000df2:	d005      	beq.n	8000e00 <__aeabi_dsub+0x6d0>
 8000df4:	2640      	movs	r6, #64	; 0x40
 8000df6:	1b36      	subs	r6, r6, r4
 8000df8:	40b3      	lsls	r3, r6
 8000dfa:	464c      	mov	r4, r9
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	46a2      	mov	sl, r4
 8000e00:	4654      	mov	r4, sl
 8000e02:	1e63      	subs	r3, r4, #1
 8000e04:	419c      	sbcs	r4, r3
 8000e06:	433c      	orrs	r4, r7
 8000e08:	e5c8      	b.n	800099c <__aeabi_dsub+0x26c>
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	e532      	b.n	8000878 <__aeabi_dsub+0x148>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff
 8000e1c:	000007fe 	.word	0x000007fe
 8000e20:	464a      	mov	r2, r9
 8000e22:	1814      	adds	r4, r2, r0
 8000e24:	4284      	cmp	r4, r0
 8000e26:	4192      	sbcs	r2, r2
 8000e28:	185b      	adds	r3, r3, r1
 8000e2a:	4698      	mov	r8, r3
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	4490      	add	r8, r2
 8000e30:	e5e9      	b.n	8000a06 <__aeabi_dsub+0x2d6>
 8000e32:	4642      	mov	r2, r8
 8000e34:	4322      	orrs	r2, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dsub+0x70a>
 8000e38:	e6a6      	b.n	8000b88 <__aeabi_dsub+0x458>
 8000e3a:	e5ea      	b.n	8000a12 <__aeabi_dsub+0x2e2>
 8000e3c:	074b      	lsls	r3, r1, #29
 8000e3e:	08c2      	lsrs	r2, r0, #3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	08cb      	lsrs	r3, r1, #3
 8000e44:	e632      	b.n	8000aac <__aeabi_dsub+0x37c>
 8000e46:	2200      	movs	r2, #0
 8000e48:	4901      	ldr	r1, [pc, #4]	; (8000e50 <__aeabi_dsub+0x720>)
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	e514      	b.n	8000878 <__aeabi_dsub+0x148>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	000007ff 	.word	0x000007ff

08000e54 <__aeabi_d2iz>:
 8000e54:	000a      	movs	r2, r1
 8000e56:	b530      	push	{r4, r5, lr}
 8000e58:	4c13      	ldr	r4, [pc, #76]	; (8000ea8 <__aeabi_d2iz+0x54>)
 8000e5a:	0053      	lsls	r3, r2, #1
 8000e5c:	0309      	lsls	r1, r1, #12
 8000e5e:	0005      	movs	r5, r0
 8000e60:	0b09      	lsrs	r1, r1, #12
 8000e62:	2000      	movs	r0, #0
 8000e64:	0d5b      	lsrs	r3, r3, #21
 8000e66:	0fd2      	lsrs	r2, r2, #31
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	dd04      	ble.n	8000e76 <__aeabi_d2iz+0x22>
 8000e6c:	480f      	ldr	r0, [pc, #60]	; (8000eac <__aeabi_d2iz+0x58>)
 8000e6e:	4283      	cmp	r3, r0
 8000e70:	dd02      	ble.n	8000e78 <__aeabi_d2iz+0x24>
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <__aeabi_d2iz+0x5c>)
 8000e74:	18d0      	adds	r0, r2, r3
 8000e76:	bd30      	pop	{r4, r5, pc}
 8000e78:	2080      	movs	r0, #128	; 0x80
 8000e7a:	0340      	lsls	r0, r0, #13
 8000e7c:	4301      	orrs	r1, r0
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <__aeabi_d2iz+0x60>)
 8000e80:	1ac0      	subs	r0, r0, r3
 8000e82:	281f      	cmp	r0, #31
 8000e84:	dd08      	ble.n	8000e98 <__aeabi_d2iz+0x44>
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <__aeabi_d2iz+0x64>)
 8000e88:	1ac3      	subs	r3, r0, r3
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	000b      	movs	r3, r1
 8000e8e:	4258      	negs	r0, r3
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	d1f0      	bne.n	8000e76 <__aeabi_d2iz+0x22>
 8000e94:	0018      	movs	r0, r3
 8000e96:	e7ee      	b.n	8000e76 <__aeabi_d2iz+0x22>
 8000e98:	4c08      	ldr	r4, [pc, #32]	; (8000ebc <__aeabi_d2iz+0x68>)
 8000e9a:	40c5      	lsrs	r5, r0
 8000e9c:	46a4      	mov	ip, r4
 8000e9e:	4463      	add	r3, ip
 8000ea0:	4099      	lsls	r1, r3
 8000ea2:	000b      	movs	r3, r1
 8000ea4:	432b      	orrs	r3, r5
 8000ea6:	e7f2      	b.n	8000e8e <__aeabi_d2iz+0x3a>
 8000ea8:	000003fe 	.word	0x000003fe
 8000eac:	0000041d 	.word	0x0000041d
 8000eb0:	7fffffff 	.word	0x7fffffff
 8000eb4:	00000433 	.word	0x00000433
 8000eb8:	00000413 	.word	0x00000413
 8000ebc:	fffffbed 	.word	0xfffffbed

08000ec0 <__aeabi_i2d>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d016      	beq.n	8000ef4 <__aeabi_i2d+0x34>
 8000ec6:	17c3      	asrs	r3, r0, #31
 8000ec8:	18c5      	adds	r5, r0, r3
 8000eca:	405d      	eors	r5, r3
 8000ecc:	0fc4      	lsrs	r4, r0, #31
 8000ece:	0028      	movs	r0, r5
 8000ed0:	f000 f864 	bl	8000f9c <__clzsi2>
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <__aeabi_i2d+0x5c>)
 8000ed6:	1a12      	subs	r2, r2, r0
 8000ed8:	280a      	cmp	r0, #10
 8000eda:	dc16      	bgt.n	8000f0a <__aeabi_i2d+0x4a>
 8000edc:	0003      	movs	r3, r0
 8000ede:	002e      	movs	r6, r5
 8000ee0:	3315      	adds	r3, #21
 8000ee2:	409e      	lsls	r6, r3
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	1a18      	subs	r0, r3, r0
 8000ee8:	40c5      	lsrs	r5, r0
 8000eea:	0553      	lsls	r3, r2, #21
 8000eec:	032d      	lsls	r5, r5, #12
 8000eee:	0b2d      	lsrs	r5, r5, #12
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	e003      	b.n	8000efc <__aeabi_i2d+0x3c>
 8000ef4:	2400      	movs	r4, #0
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2500      	movs	r5, #0
 8000efa:	2600      	movs	r6, #0
 8000efc:	051b      	lsls	r3, r3, #20
 8000efe:	432b      	orrs	r3, r5
 8000f00:	07e4      	lsls	r4, r4, #31
 8000f02:	4323      	orrs	r3, r4
 8000f04:	0030      	movs	r0, r6
 8000f06:	0019      	movs	r1, r3
 8000f08:	bd70      	pop	{r4, r5, r6, pc}
 8000f0a:	380b      	subs	r0, #11
 8000f0c:	4085      	lsls	r5, r0
 8000f0e:	0553      	lsls	r3, r2, #21
 8000f10:	032d      	lsls	r5, r5, #12
 8000f12:	2600      	movs	r6, #0
 8000f14:	0b2d      	lsrs	r5, r5, #12
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	e7f0      	b.n	8000efc <__aeabi_i2d+0x3c>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	0000041e 	.word	0x0000041e

08000f20 <__aeabi_cdrcmple>:
 8000f20:	4684      	mov	ip, r0
 8000f22:	1c10      	adds	r0, r2, #0
 8000f24:	4662      	mov	r2, ip
 8000f26:	468c      	mov	ip, r1
 8000f28:	1c19      	adds	r1, r3, #0
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	e000      	b.n	8000f30 <__aeabi_cdcmpeq>
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <__aeabi_cdcmpeq>:
 8000f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f32:	f000 f8ff 	bl	8001134 <__ledf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d401      	bmi.n	8000f3e <__aeabi_cdcmpeq+0xe>
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	42c8      	cmn	r0, r1
 8000f3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f40 <__aeabi_dcmpeq>:
 8000f40:	b510      	push	{r4, lr}
 8000f42:	f000 f849 	bl	8000fd8 <__eqdf2>
 8000f46:	4240      	negs	r0, r0
 8000f48:	3001      	adds	r0, #1
 8000f4a:	bd10      	pop	{r4, pc}

08000f4c <__aeabi_dcmplt>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	f000 f8f1 	bl	8001134 <__ledf2>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	db01      	blt.n	8000f5a <__aeabi_dcmplt+0xe>
 8000f56:	2000      	movs	r0, #0
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)

08000f60 <__aeabi_dcmple>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f000 f8e7 	bl	8001134 <__ledf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	dd01      	ble.n	8000f6e <__aeabi_dcmple+0xe>
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	2001      	movs	r0, #1
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)

08000f74 <__aeabi_dcmpgt>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	f000 f86b 	bl	8001050 <__gedf2>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	dc01      	bgt.n	8000f82 <__aeabi_dcmpgt+0xe>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	2001      	movs	r0, #1
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <__aeabi_dcmpge>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f000 f861 	bl	8001050 <__gedf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	da01      	bge.n	8000f96 <__aeabi_dcmpge+0xe>
 8000f92:	2000      	movs	r0, #0
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	2001      	movs	r0, #1
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)

08000f9c <__clzsi2>:
 8000f9c:	211c      	movs	r1, #28
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d301      	bcc.n	8000faa <__clzsi2+0xe>
 8000fa6:	0c00      	lsrs	r0, r0, #16
 8000fa8:	3910      	subs	r1, #16
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	4298      	cmp	r0, r3
 8000fae:	d301      	bcc.n	8000fb4 <__clzsi2+0x18>
 8000fb0:	0a00      	lsrs	r0, r0, #8
 8000fb2:	3908      	subs	r1, #8
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d301      	bcc.n	8000fbe <__clzsi2+0x22>
 8000fba:	0900      	lsrs	r0, r0, #4
 8000fbc:	3904      	subs	r1, #4
 8000fbe:	a202      	add	r2, pc, #8	; (adr r2, 8000fc8 <__clzsi2+0x2c>)
 8000fc0:	5c10      	ldrb	r0, [r2, r0]
 8000fc2:	1840      	adds	r0, r0, r1
 8000fc4:	4770      	bx	lr
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	02020304 	.word	0x02020304
 8000fcc:	01010101 	.word	0x01010101
	...

08000fd8 <__eqdf2>:
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	464f      	mov	r7, r9
 8000fdc:	4646      	mov	r6, r8
 8000fde:	46d6      	mov	lr, sl
 8000fe0:	4694      	mov	ip, r2
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	031a      	lsls	r2, r3, #12
 8000fe6:	0b12      	lsrs	r2, r2, #12
 8000fe8:	4d18      	ldr	r5, [pc, #96]	; (800104c <__eqdf2+0x74>)
 8000fea:	b5c0      	push	{r6, r7, lr}
 8000fec:	004c      	lsls	r4, r1, #1
 8000fee:	030f      	lsls	r7, r1, #12
 8000ff0:	4692      	mov	sl, r2
 8000ff2:	005a      	lsls	r2, r3, #1
 8000ff4:	0006      	movs	r6, r0
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	0b3f      	lsrs	r7, r7, #12
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	0d64      	lsrs	r4, r4, #21
 8000ffe:	0fc9      	lsrs	r1, r1, #31
 8001000:	0d52      	lsrs	r2, r2, #21
 8001002:	0fdb      	lsrs	r3, r3, #31
 8001004:	42ac      	cmp	r4, r5
 8001006:	d00a      	beq.n	800101e <__eqdf2+0x46>
 8001008:	42aa      	cmp	r2, r5
 800100a:	d003      	beq.n	8001014 <__eqdf2+0x3c>
 800100c:	4294      	cmp	r4, r2
 800100e:	d101      	bne.n	8001014 <__eqdf2+0x3c>
 8001010:	4557      	cmp	r7, sl
 8001012:	d00d      	beq.n	8001030 <__eqdf2+0x58>
 8001014:	bce0      	pop	{r5, r6, r7}
 8001016:	46ba      	mov	sl, r7
 8001018:	46b1      	mov	r9, r6
 800101a:	46a8      	mov	r8, r5
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101e:	003d      	movs	r5, r7
 8001020:	4335      	orrs	r5, r6
 8001022:	d1f7      	bne.n	8001014 <__eqdf2+0x3c>
 8001024:	42a2      	cmp	r2, r4
 8001026:	d1f5      	bne.n	8001014 <__eqdf2+0x3c>
 8001028:	4652      	mov	r2, sl
 800102a:	4665      	mov	r5, ip
 800102c:	432a      	orrs	r2, r5
 800102e:	d1f1      	bne.n	8001014 <__eqdf2+0x3c>
 8001030:	2001      	movs	r0, #1
 8001032:	45c8      	cmp	r8, r9
 8001034:	d1ee      	bne.n	8001014 <__eqdf2+0x3c>
 8001036:	4299      	cmp	r1, r3
 8001038:	d006      	beq.n	8001048 <__eqdf2+0x70>
 800103a:	2c00      	cmp	r4, #0
 800103c:	d1ea      	bne.n	8001014 <__eqdf2+0x3c>
 800103e:	433e      	orrs	r6, r7
 8001040:	0030      	movs	r0, r6
 8001042:	1e46      	subs	r6, r0, #1
 8001044:	41b0      	sbcs	r0, r6
 8001046:	e7e5      	b.n	8001014 <__eqdf2+0x3c>
 8001048:	2000      	movs	r0, #0
 800104a:	e7e3      	b.n	8001014 <__eqdf2+0x3c>
 800104c:	000007ff 	.word	0x000007ff

08001050 <__gedf2>:
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	464e      	mov	r6, r9
 8001054:	4645      	mov	r5, r8
 8001056:	4657      	mov	r7, sl
 8001058:	46de      	mov	lr, fp
 800105a:	0004      	movs	r4, r0
 800105c:	0018      	movs	r0, r3
 800105e:	b5e0      	push	{r5, r6, r7, lr}
 8001060:	0016      	movs	r6, r2
 8001062:	031b      	lsls	r3, r3, #12
 8001064:	0b1b      	lsrs	r3, r3, #12
 8001066:	4d32      	ldr	r5, [pc, #200]	; (8001130 <__gedf2+0xe0>)
 8001068:	030f      	lsls	r7, r1, #12
 800106a:	004a      	lsls	r2, r1, #1
 800106c:	4699      	mov	r9, r3
 800106e:	0043      	lsls	r3, r0, #1
 8001070:	46a4      	mov	ip, r4
 8001072:	46b0      	mov	r8, r6
 8001074:	0b3f      	lsrs	r7, r7, #12
 8001076:	0d52      	lsrs	r2, r2, #21
 8001078:	0fc9      	lsrs	r1, r1, #31
 800107a:	0d5b      	lsrs	r3, r3, #21
 800107c:	0fc0      	lsrs	r0, r0, #31
 800107e:	42aa      	cmp	r2, r5
 8001080:	d029      	beq.n	80010d6 <__gedf2+0x86>
 8001082:	42ab      	cmp	r3, r5
 8001084:	d018      	beq.n	80010b8 <__gedf2+0x68>
 8001086:	2a00      	cmp	r2, #0
 8001088:	d12a      	bne.n	80010e0 <__gedf2+0x90>
 800108a:	433c      	orrs	r4, r7
 800108c:	46a3      	mov	fp, r4
 800108e:	4265      	negs	r5, r4
 8001090:	4165      	adcs	r5, r4
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <__gedf2+0x4c>
 8001096:	464c      	mov	r4, r9
 8001098:	4326      	orrs	r6, r4
 800109a:	d027      	beq.n	80010ec <__gedf2+0x9c>
 800109c:	2d00      	cmp	r5, #0
 800109e:	d115      	bne.n	80010cc <__gedf2+0x7c>
 80010a0:	4281      	cmp	r1, r0
 80010a2:	d028      	beq.n	80010f6 <__gedf2+0xa6>
 80010a4:	2002      	movs	r0, #2
 80010a6:	3901      	subs	r1, #1
 80010a8:	4008      	ands	r0, r1
 80010aa:	3801      	subs	r0, #1
 80010ac:	bcf0      	pop	{r4, r5, r6, r7}
 80010ae:	46bb      	mov	fp, r7
 80010b0:	46b2      	mov	sl, r6
 80010b2:	46a9      	mov	r9, r5
 80010b4:	46a0      	mov	r8, r4
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b8:	464d      	mov	r5, r9
 80010ba:	432e      	orrs	r6, r5
 80010bc:	d12f      	bne.n	800111e <__gedf2+0xce>
 80010be:	2a00      	cmp	r2, #0
 80010c0:	d1ee      	bne.n	80010a0 <__gedf2+0x50>
 80010c2:	433c      	orrs	r4, r7
 80010c4:	4265      	negs	r5, r4
 80010c6:	4165      	adcs	r5, r4
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	d0e9      	beq.n	80010a0 <__gedf2+0x50>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d1ed      	bne.n	80010ac <__gedf2+0x5c>
 80010d0:	2001      	movs	r0, #1
 80010d2:	4240      	negs	r0, r0
 80010d4:	e7ea      	b.n	80010ac <__gedf2+0x5c>
 80010d6:	003d      	movs	r5, r7
 80010d8:	4325      	orrs	r5, r4
 80010da:	d120      	bne.n	800111e <__gedf2+0xce>
 80010dc:	4293      	cmp	r3, r2
 80010de:	d0eb      	beq.n	80010b8 <__gedf2+0x68>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1dd      	bne.n	80010a0 <__gedf2+0x50>
 80010e4:	464c      	mov	r4, r9
 80010e6:	4326      	orrs	r6, r4
 80010e8:	d1da      	bne.n	80010a0 <__gedf2+0x50>
 80010ea:	e7db      	b.n	80010a4 <__gedf2+0x54>
 80010ec:	465b      	mov	r3, fp
 80010ee:	2000      	movs	r0, #0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0db      	beq.n	80010ac <__gedf2+0x5c>
 80010f4:	e7d6      	b.n	80010a4 <__gedf2+0x54>
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dc0a      	bgt.n	8001110 <__gedf2+0xc0>
 80010fa:	dbe7      	blt.n	80010cc <__gedf2+0x7c>
 80010fc:	454f      	cmp	r7, r9
 80010fe:	d8d1      	bhi.n	80010a4 <__gedf2+0x54>
 8001100:	d010      	beq.n	8001124 <__gedf2+0xd4>
 8001102:	2000      	movs	r0, #0
 8001104:	454f      	cmp	r7, r9
 8001106:	d2d1      	bcs.n	80010ac <__gedf2+0x5c>
 8001108:	2900      	cmp	r1, #0
 800110a:	d0e1      	beq.n	80010d0 <__gedf2+0x80>
 800110c:	0008      	movs	r0, r1
 800110e:	e7cd      	b.n	80010ac <__gedf2+0x5c>
 8001110:	4243      	negs	r3, r0
 8001112:	4158      	adcs	r0, r3
 8001114:	2302      	movs	r3, #2
 8001116:	4240      	negs	r0, r0
 8001118:	4018      	ands	r0, r3
 800111a:	3801      	subs	r0, #1
 800111c:	e7c6      	b.n	80010ac <__gedf2+0x5c>
 800111e:	2002      	movs	r0, #2
 8001120:	4240      	negs	r0, r0
 8001122:	e7c3      	b.n	80010ac <__gedf2+0x5c>
 8001124:	45c4      	cmp	ip, r8
 8001126:	d8bd      	bhi.n	80010a4 <__gedf2+0x54>
 8001128:	2000      	movs	r0, #0
 800112a:	45c4      	cmp	ip, r8
 800112c:	d2be      	bcs.n	80010ac <__gedf2+0x5c>
 800112e:	e7eb      	b.n	8001108 <__gedf2+0xb8>
 8001130:	000007ff 	.word	0x000007ff

08001134 <__ledf2>:
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001136:	464e      	mov	r6, r9
 8001138:	4645      	mov	r5, r8
 800113a:	4657      	mov	r7, sl
 800113c:	46de      	mov	lr, fp
 800113e:	0004      	movs	r4, r0
 8001140:	0018      	movs	r0, r3
 8001142:	b5e0      	push	{r5, r6, r7, lr}
 8001144:	0016      	movs	r6, r2
 8001146:	031b      	lsls	r3, r3, #12
 8001148:	0b1b      	lsrs	r3, r3, #12
 800114a:	4d31      	ldr	r5, [pc, #196]	; (8001210 <__ledf2+0xdc>)
 800114c:	030f      	lsls	r7, r1, #12
 800114e:	004a      	lsls	r2, r1, #1
 8001150:	4699      	mov	r9, r3
 8001152:	0043      	lsls	r3, r0, #1
 8001154:	46a4      	mov	ip, r4
 8001156:	46b0      	mov	r8, r6
 8001158:	0b3f      	lsrs	r7, r7, #12
 800115a:	0d52      	lsrs	r2, r2, #21
 800115c:	0fc9      	lsrs	r1, r1, #31
 800115e:	0d5b      	lsrs	r3, r3, #21
 8001160:	0fc0      	lsrs	r0, r0, #31
 8001162:	42aa      	cmp	r2, r5
 8001164:	d011      	beq.n	800118a <__ledf2+0x56>
 8001166:	42ab      	cmp	r3, r5
 8001168:	d014      	beq.n	8001194 <__ledf2+0x60>
 800116a:	2a00      	cmp	r2, #0
 800116c:	d12f      	bne.n	80011ce <__ledf2+0x9a>
 800116e:	433c      	orrs	r4, r7
 8001170:	46a3      	mov	fp, r4
 8001172:	4265      	negs	r5, r4
 8001174:	4165      	adcs	r5, r4
 8001176:	2b00      	cmp	r3, #0
 8001178:	d114      	bne.n	80011a4 <__ledf2+0x70>
 800117a:	464c      	mov	r4, r9
 800117c:	4326      	orrs	r6, r4
 800117e:	d111      	bne.n	80011a4 <__ledf2+0x70>
 8001180:	465b      	mov	r3, fp
 8001182:	2000      	movs	r0, #0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d017      	beq.n	80011b8 <__ledf2+0x84>
 8001188:	e010      	b.n	80011ac <__ledf2+0x78>
 800118a:	003d      	movs	r5, r7
 800118c:	4325      	orrs	r5, r4
 800118e:	d112      	bne.n	80011b6 <__ledf2+0x82>
 8001190:	4293      	cmp	r3, r2
 8001192:	d11c      	bne.n	80011ce <__ledf2+0x9a>
 8001194:	464d      	mov	r5, r9
 8001196:	432e      	orrs	r6, r5
 8001198:	d10d      	bne.n	80011b6 <__ledf2+0x82>
 800119a:	2a00      	cmp	r2, #0
 800119c:	d104      	bne.n	80011a8 <__ledf2+0x74>
 800119e:	433c      	orrs	r4, r7
 80011a0:	4265      	negs	r5, r4
 80011a2:	4165      	adcs	r5, r4
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d10d      	bne.n	80011c4 <__ledf2+0x90>
 80011a8:	4281      	cmp	r1, r0
 80011aa:	d016      	beq.n	80011da <__ledf2+0xa6>
 80011ac:	2002      	movs	r0, #2
 80011ae:	3901      	subs	r1, #1
 80011b0:	4008      	ands	r0, r1
 80011b2:	3801      	subs	r0, #1
 80011b4:	e000      	b.n	80011b8 <__ledf2+0x84>
 80011b6:	2002      	movs	r0, #2
 80011b8:	bcf0      	pop	{r4, r5, r6, r7}
 80011ba:	46bb      	mov	fp, r7
 80011bc:	46b2      	mov	sl, r6
 80011be:	46a9      	mov	r9, r5
 80011c0:	46a0      	mov	r8, r4
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d1f7      	bne.n	80011b8 <__ledf2+0x84>
 80011c8:	2001      	movs	r0, #1
 80011ca:	4240      	negs	r0, r0
 80011cc:	e7f4      	b.n	80011b8 <__ledf2+0x84>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ea      	bne.n	80011a8 <__ledf2+0x74>
 80011d2:	464c      	mov	r4, r9
 80011d4:	4326      	orrs	r6, r4
 80011d6:	d1e7      	bne.n	80011a8 <__ledf2+0x74>
 80011d8:	e7e8      	b.n	80011ac <__ledf2+0x78>
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd06      	ble.n	80011ec <__ledf2+0xb8>
 80011de:	4243      	negs	r3, r0
 80011e0:	4158      	adcs	r0, r3
 80011e2:	2302      	movs	r3, #2
 80011e4:	4240      	negs	r0, r0
 80011e6:	4018      	ands	r0, r3
 80011e8:	3801      	subs	r0, #1
 80011ea:	e7e5      	b.n	80011b8 <__ledf2+0x84>
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbe9      	blt.n	80011c4 <__ledf2+0x90>
 80011f0:	454f      	cmp	r7, r9
 80011f2:	d8db      	bhi.n	80011ac <__ledf2+0x78>
 80011f4:	d006      	beq.n	8001204 <__ledf2+0xd0>
 80011f6:	2000      	movs	r0, #0
 80011f8:	454f      	cmp	r7, r9
 80011fa:	d2dd      	bcs.n	80011b8 <__ledf2+0x84>
 80011fc:	2900      	cmp	r1, #0
 80011fe:	d0e3      	beq.n	80011c8 <__ledf2+0x94>
 8001200:	0008      	movs	r0, r1
 8001202:	e7d9      	b.n	80011b8 <__ledf2+0x84>
 8001204:	45c4      	cmp	ip, r8
 8001206:	d8d1      	bhi.n	80011ac <__ledf2+0x78>
 8001208:	2000      	movs	r0, #0
 800120a:	45c4      	cmp	ip, r8
 800120c:	d2d4      	bcs.n	80011b8 <__ledf2+0x84>
 800120e:	e7f5      	b.n	80011fc <__ledf2+0xc8>
 8001210:	000007ff 	.word	0x000007ff

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 fc3a 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f80f 	bl	800123e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f000 f998 	bl	8001554 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001224:	f000 f8d4 	bl	80013d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001228:	f000 f910 	bl	800144c <MX_TIM1_Init>
  MX_ADC1_Init();
 800122c:	f000 f866 	bl	80012fc <MX_ADC1_Init>
  MX_TIM16_Init();
 8001230:	f000 f968 	bl	8001504 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  app_init();
 8001234:	f003 ffd4 	bl	80051e0 <app_init>

  app_run();
 8001238:	f004 f818 	bl	800526c <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123c:	e7fe      	b.n	800123c <main+0x28>

0800123e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b095      	sub	sp, #84	; 0x54
 8001242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001244:	2414      	movs	r4, #20
 8001246:	193b      	adds	r3, r7, r4
 8001248:	0018      	movs	r0, r3
 800124a:	233c      	movs	r3, #60	; 0x3c
 800124c:	001a      	movs	r2, r3
 800124e:	2100      	movs	r1, #0
 8001250:	f004 fbea 	bl	8005a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	0018      	movs	r0, r3
 8001258:	2310      	movs	r3, #16
 800125a:	001a      	movs	r2, r3
 800125c:	2100      	movs	r1, #0
 800125e:	f004 fbe3 	bl	8005a28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	0018      	movs	r0, r3
 8001268:	f001 fdea 	bl	8002e40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	193b      	adds	r3, r7, r4
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001272:	193b      	adds	r3, r7, r4
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	0052      	lsls	r2, r2, #1
 8001278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800127a:	0021      	movs	r1, r4
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2202      	movs	r2, #2
 800128c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2202      	movs	r2, #2
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2200      	movs	r2, #0
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2208      	movs	r2, #8
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0292      	lsls	r2, r2, #10
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0492      	lsls	r2, r2, #18
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0592      	lsls	r2, r2, #22
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 fe00 	bl	8002ec0 <HAL_RCC_OscConfig>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012c4:	f000 f9ee 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2207      	movs	r2, #7
 80012cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2202      	movs	r2, #2
 80012d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2102      	movs	r1, #2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f002 f951 	bl	800358c <HAL_RCC_ClockConfig>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012ee:	f000 f9d9 	bl	80016a4 <Error_Handler>
  }
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b015      	add	sp, #84	; 0x54
 80012f8:	bd90      	pop	{r4, r7, pc}
	...

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	0018      	movs	r0, r3
 8001306:	230c      	movs	r3, #12
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f004 fb8c 	bl	8005a28 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001312:	4a2e      	ldr	r2, [pc, #184]	; (80013cc <MX_ADC1_Init+0xd0>)
 8001314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	05d2      	lsls	r2, r2, #23
 800131c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001332:	2204      	movs	r2, #4
 8001334:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001338:	2200      	movs	r2, #0
 800133a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800133e:	2200      	movs	r2, #0
 8001340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001344:	2200      	movs	r2, #0
 8001346:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001350:	2220      	movs	r2, #32
 8001352:	2100      	movs	r1, #0
 8001354:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001364:	222c      	movs	r2, #44	; 0x2c
 8001366:	2100      	movs	r1, #0
 8001368:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001372:	2206      	movs	r2, #6
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001378:	2206      	movs	r2, #6
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800137e:	223c      	movs	r2, #60	; 0x3c
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_ADC1_Init+0xcc>)
 8001386:	2200      	movs	r2, #0
 8001388:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_ADC1_Init+0xcc>)
 800138c:	0018      	movs	r0, r3
 800138e:	f000 fd5d 	bl	8001e4c <HAL_ADC_Init>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001396:	f000 f985 	bl	80016a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	1d3a      	adds	r2, r7, #4
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_ADC1_Init+0xcc>)
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f001 f816 	bl	80023e4 <HAL_ADC_ConfigChannel>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80013bc:	f000 f972 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b004      	add	sp, #16
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000048 	.word	0x20000048
 80013cc:	40012400 	.word	0x40012400

080013d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_SPI1_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_SPI1_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_SPI1_Init+0x74>)
 80013dc:	2282      	movs	r2, #130	; 0x82
 80013de:	0052      	lsls	r2, r2, #1
 80013e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_SPI1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_SPI1_Init+0x74>)
 80013ea:	22e0      	movs	r2, #224	; 0xe0
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_SPI1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_SPI1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_SPI1_Init+0x74>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_SPI1_Init+0x74>)
 8001406:	2228      	movs	r2, #40	; 0x28
 8001408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SPI1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SPI1_Init+0x74>)
 800141e:	2207      	movs	r2, #7
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SPI1_Init+0x74>)
 800142a:	2208      	movs	r2, #8
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <MX_SPI1_Init+0x74>)
 8001430:	0018      	movs	r0, r3
 8001432:	f002 fc71 	bl	8003d18 <HAL_SPI_Init>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 f933 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000f8 	.word	0x200000f8
 8001448:	40013000 	.word	0x40013000

0800144c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	2310      	movs	r3, #16
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	0018      	movs	r0, r3
 8001458:	2310      	movs	r3, #16
 800145a:	001a      	movs	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	f004 fae3 	bl	8005a28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	0018      	movs	r0, r3
 8001466:	230c      	movs	r3, #12
 8001468:	001a      	movs	r2, r3
 800146a:	2100      	movs	r1, #0
 800146c:	f004 fadc 	bl	8005a28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_TIM1_Init+0xac>)
 8001472:	4a22      	ldr	r2, [pc, #136]	; (80014fc <MX_TIM1_Init+0xb0>)
 8001474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_TIM1_Init+0xac>)
 8001478:	223f      	movs	r2, #63	; 0x3f
 800147a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_TIM1_Init+0xac>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM1_Init+0xac>)
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <MX_TIM1_Init+0xb4>)
 8001486:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_TIM1_Init+0xac>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_TIM1_Init+0xac>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM1_Init+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_TIM1_Init+0xac>)
 800149c:	0018      	movs	r0, r3
 800149e:	f003 f957 	bl	8004750 <HAL_TIM_Base_Init>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80014a6:	f000 f8fd 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	2110      	movs	r1, #16
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	0152      	lsls	r2, r2, #5
 80014b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014b4:	187a      	adds	r2, r7, r1
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_TIM1_Init+0xac>)
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f003 fb8e 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014c4:	f000 f8ee 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014da:	1d3a      	adds	r2, r7, #4
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_TIM1_Init+0xac>)
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f003 fd8d 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80014ea:	f000 f8db 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b008      	add	sp, #32
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	200000ac 	.word	0x200000ac
 80014fc:	40012c00 	.word	0x40012c00
 8001500:	0000fde8 	.word	0x0000fde8

08001504 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_TIM16_Init+0x48>)
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <MX_TIM16_Init+0x4c>)
 800150c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_TIM16_Init+0x48>)
 8001510:	22fa      	movs	r2, #250	; 0xfa
 8001512:	00d2      	lsls	r2, r2, #3
 8001514:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_TIM16_Init+0x48>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 640;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_TIM16_Init+0x48>)
 800151e:	22a0      	movs	r2, #160	; 0xa0
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_TIM16_Init+0x48>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_TIM16_Init+0x48>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_TIM16_Init+0x48>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <MX_TIM16_Init+0x48>)
 8001538:	0018      	movs	r0, r3
 800153a:	f003 f909 	bl	8004750 <HAL_TIM_Base_Init>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001542:	f000 f8af 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000188 	.word	0x20000188
 8001550:	40014400 	.word	0x40014400

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	2414      	movs	r4, #20
 800155c:	193b      	adds	r3, r7, r4
 800155e:	0018      	movs	r0, r3
 8001560:	2314      	movs	r3, #20
 8001562:	001a      	movs	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	f004 fa5f 	bl	8005a28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <MX_GPIO_Init+0x13c>)
 800156c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156e:	4b48      	ldr	r3, [pc, #288]	; (8001690 <MX_GPIO_Init+0x13c>)
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <MX_GPIO_Init+0x13c>)
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	2201      	movs	r2, #1
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <MX_GPIO_Init+0x13c>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001586:	4b42      	ldr	r3, [pc, #264]	; (8001690 <MX_GPIO_Init+0x13c>)
 8001588:	2104      	movs	r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <MX_GPIO_Init+0x13c>)
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	2204      	movs	r2, #4
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <MX_GPIO_Init+0x13c>)
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <MX_GPIO_Init+0x13c>)
 80015a0:	2102      	movs	r1, #2
 80015a2:	430a      	orrs	r2, r1
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <MX_GPIO_Init+0x13c>)
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MX_GPIO_Init+0x13c>)
 80015b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <MX_GPIO_Init+0x13c>)
 80015b8:	2108      	movs	r1, #8
 80015ba:	430a      	orrs	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <MX_GPIO_Init+0x13c>)
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	2208      	movs	r2, #8
 80015c4:	4013      	ands	r3, r2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_Pin|amarelo_Pin, GPIO_PIN_RESET);
 80015ca:	2390      	movs	r3, #144	; 0x90
 80015cc:	0059      	lsls	r1, r3, #1
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	2200      	movs	r2, #0
 80015d4:	0018      	movs	r0, r3
 80015d6:	f001 fc15 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, rosa_Pin|azul_Pin|laranja_Pin, GPIO_PIN_RESET);
 80015da:	492e      	ldr	r1, [pc, #184]	; (8001694 <MX_GPIO_Init+0x140>)
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <MX_GPIO_Init+0x144>)
 80015de:	2200      	movs	r2, #0
 80015e0:	0018      	movs	r0, r3
 80015e2:	f001 fc0f 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80015e6:	23c0      	movs	r3, #192	; 0xc0
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	482c      	ldr	r0, [pc, #176]	; (800169c <MX_GPIO_Init+0x148>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	0019      	movs	r1, r3
 80015f0:	f001 fc08 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin amarelo_Pin */
  GPIO_InitStruct.Pin = led_Pin|amarelo_Pin;
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	2290      	movs	r2, #144	; 0x90
 80015f8:	0052      	lsls	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2201      	movs	r2, #1
 8001600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2203      	movs	r2, #3
 800160c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	193a      	adds	r2, r7, r4
 8001610:	23a0      	movs	r3, #160	; 0xa0
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	0011      	movs	r1, r2
 8001616:	0018      	movs	r0, r3
 8001618:	f001 fa88 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2220      	movs	r2, #32
 8001620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	193b      	adds	r3, r7, r4
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800162e:	193b      	adds	r3, r7, r4
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <MX_GPIO_Init+0x14c>)
 8001632:	0019      	movs	r1, r3
 8001634:	0010      	movs	r0, r2
 8001636:	f001 fa79 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : rosa_Pin azul_Pin laranja_Pin */
  GPIO_InitStruct.Pin = rosa_Pin|azul_Pin|laranja_Pin;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_GPIO_Init+0x140>)
 800163e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2201      	movs	r2, #1
 8001644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	2203      	movs	r2, #3
 8001650:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	193b      	adds	r3, r7, r4
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <MX_GPIO_Init+0x144>)
 8001656:	0019      	movs	r1, r3
 8001658:	0010      	movs	r0, r2
 800165a:	f001 fa67 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800165e:	0021      	movs	r1, r4
 8001660:	187b      	adds	r3, r7, r1
 8001662:	22c0      	movs	r2, #192	; 0xc0
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2201      	movs	r2, #1
 800166c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2203      	movs	r2, #3
 8001678:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167a:	187b      	adds	r3, r7, r1
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <MX_GPIO_Init+0x148>)
 800167e:	0019      	movs	r1, r3
 8001680:	0010      	movs	r0, r2
 8001682:	f001 fa53 	bl	8002b2c <HAL_GPIO_Init>

}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b00b      	add	sp, #44	; 0x2c
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40021000 	.word	0x40021000
 8001694:	00004018 	.word	0x00004018
 8001698:	50000400 	.word	0x50000400
 800169c:	50000c00 	.word	0x50000c00
 80016a0:	50000800 	.word	0x50000800

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <nrf24_ce_digitalWrite>:
{

}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	0002      	movs	r2, r0
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state);
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <nrf24_ce_digitalWrite+0x24>)
 80016c6:	0019      	movs	r1, r3
 80016c8:	f001 fb9c 	bl	8002e04 <HAL_GPIO_WritePin>
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	50000c00 	.word	0x50000c00

080016d8 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, state);
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <nrf24_csn_digitalWrite+0x24>)
 80016ee:	0019      	movs	r1, r3
 80016f0:	f001 fb88 	bl	8002e04 <HAL_GPIO_WritePin>
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	50000c00 	.word	0x50000c00

08001700 <nrf24_spi_transfer>:
{
	return 0;
}
/* ------------------------------------------------------------------------- */

uint8_t nrf24_spi_transfer(uint8_t *tx){
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b087      	sub	sp, #28
 8001704:	af02      	add	r7, sp, #8
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t rx;

	HAL_SPI_TransmitReceive(&hspi1, tx, &rx, 1, 100);
 8001708:	240f      	movs	r4, #15
 800170a:	193a      	adds	r2, r7, r4
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <nrf24_spi_transfer+0x28>)
 8001710:	2364      	movs	r3, #100	; 0x64
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	f002 fbb7 	bl	8003e88 <HAL_SPI_TransmitReceive>

	return rx;
 800171a:	193b      	adds	r3, r7, r4
 800171c:	781b      	ldrb	r3, [r3, #0]
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b005      	add	sp, #20
 8001724:	bd90      	pop	{r4, r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	200000f8 	.word	0x200000f8

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_MspInit+0x4c>)
 8001734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_MspInit+0x4c>)
 8001738:	2101      	movs	r1, #1
 800173a:	430a      	orrs	r2, r1
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_MspInit+0x4c>)
 800174c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MspInit+0x4c>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0549      	lsls	r1, r1, #21
 8001754:	430a      	orrs	r2, r1
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_MspInit+0x4c>)
 800175a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	4013      	ands	r3, r2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fa3a 	bl	8001be4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b09d      	sub	sp, #116	; 0x74
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	235c      	movs	r3, #92	; 0x5c
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	0018      	movs	r0, r3
 800178a:	2314      	movs	r3, #20
 800178c:	001a      	movs	r2, r3
 800178e:	2100      	movs	r1, #0
 8001790:	f004 f94a 	bl	8005a28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001794:	2410      	movs	r4, #16
 8001796:	193b      	adds	r3, r7, r4
 8001798:	0018      	movs	r0, r3
 800179a:	234c      	movs	r3, #76	; 0x4c
 800179c:	001a      	movs	r2, r3
 800179e:	2100      	movs	r1, #0
 80017a0:	f004 f942 	bl	8005a28 <memset>
  if(hadc->Instance==ADC1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_ADC_MspInit+0xb0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d139      	bne.n	8001822 <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	01d2      	lsls	r2, r2, #7
 80017b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	0018      	movs	r0, r3
 80017c0:	f002 f86e 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d001      	beq.n	80017cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017c8:	f7ff ff6c 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_ADC_MspInit+0xb4>)
 80017ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_ADC_MspInit+0xb4>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0349      	lsls	r1, r1, #13
 80017d6:	430a      	orrs	r2, r1
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_ADC_MspInit+0xb4>)
 80017dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	035b      	lsls	r3, r3, #13
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_ADC_MspInit+0xb4>)
 80017ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_ADC_MspInit+0xb4>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_ADC_MspInit+0xb4>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001800:	215c      	movs	r1, #92	; 0x5c
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2203      	movs	r2, #3
 800180c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	187a      	adds	r2, r7, r1
 8001816:	23a0      	movs	r3, #160	; 0xa0
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f001 f985 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b01d      	add	sp, #116	; 0x74
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	40012400 	.word	0x40012400
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	2414      	movs	r4, #20
 800183e:	193b      	adds	r3, r7, r4
 8001840:	0018      	movs	r0, r3
 8001842:	2314      	movs	r3, #20
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f004 f8ee 	bl	8005a28 <memset>
  if(hspi->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_SPI_MspInit+0x9c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d138      	bne.n	80018c8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_SPI_MspInit+0xa0>)
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_SPI_MspInit+0xa0>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0149      	lsls	r1, r1, #5
 8001860:	430a      	orrs	r2, r1
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_SPI_MspInit+0xa0>)
 8001866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_SPI_MspInit+0xa0>)
 8001874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_SPI_MspInit+0xa0>)
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_SPI_MspInit+0xa0>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800188a:	0021      	movs	r1, r4
 800188c:	187b      	adds	r3, r7, r1
 800188e:	22c2      	movs	r2, #194	; 0xc2
 8001890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2202      	movs	r2, #2
 8001896:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	187a      	adds	r2, r7, r1
 80018ac:	23a0      	movs	r3, #160	; 0xa0
 80018ae:	05db      	lsls	r3, r3, #23
 80018b0:	0011      	movs	r1, r2
 80018b2:	0018      	movs	r0, r3
 80018b4:	f001 f93a 	bl	8002b2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2019      	movs	r0, #25
 80018be:	f001 f89b 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018c2:	2019      	movs	r0, #25
 80018c4:	f001 f8ad 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b00b      	add	sp, #44	; 0x2c
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	40013000 	.word	0x40013000
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b099      	sub	sp, #100	; 0x64
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	2414      	movs	r4, #20
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	0018      	movs	r0, r3
 80018e6:	234c      	movs	r3, #76	; 0x4c
 80018e8:	001a      	movs	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f004 f89c 	bl	8005a28 <memset>
  if(htim_base->Instance==TIM1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12d      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x7e>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	0392      	lsls	r2, r2, #14
 8001900:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	2200      	movs	r2, #0
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	193b      	adds	r3, r7, r4
 800190a:	0018      	movs	r0, r3
 800190c:	f001 ffc8 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d001      	beq.n	8001918 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001914:	f7ff fec6 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 800191a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0109      	lsls	r1, r1, #4
 8001922:	430a      	orrs	r2, r1
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 8001928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	200d      	movs	r0, #13
 800193a:	f001 f85d 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800193e:	200d      	movs	r0, #13
 8001940:	f001 f86f 	bl	8002a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	200e      	movs	r0, #14
 800194a:	f001 f855 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800194e:	200e      	movs	r0, #14
 8001950:	f001 f867 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001954:	e01a      	b.n	800198c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM16)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_TIM_Base_MspInit+0xc4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d115      	bne.n	800198c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0289      	lsls	r1, r1, #10
 800196a:	430a      	orrs	r2, r1
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	029b      	lsls	r3, r3, #10
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	2015      	movs	r0, #21
 8001982:	f001 f839 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8001986:	2015      	movs	r0, #21
 8001988:	f001 f84b 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b019      	add	sp, #100	; 0x64
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40014400 	.word	0x40014400

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f8ce 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f002 ffce 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	200000ac 	.word	0x200000ac

080019e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <TIM1_CC_IRQHandler+0x14>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f002 ffc2 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	200000ac 	.word	0x200000ac

08001a00 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8001a06:	0018      	movs	r0, r3
 8001a08:	f002 ffb6 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	20000188 	.word	0x20000188

08001a18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <SPI1_IRQHandler+0x14>)
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f002 fc04 	bl	800422c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	200000f8 	.word	0x200000f8

08001a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a40:	f7ff fff6 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a46:	490d      	ldr	r1, [pc, #52]	; (8001a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <LoopForever+0xe>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a5c:	4c0a      	ldr	r4, [pc, #40]	; (8001a88 <LoopForever+0x16>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a6a:	f003 ffb9 	bl	80059e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a6e:	f7ff fbd1 	bl	8001214 <main>

08001a72 <LoopForever>:

LoopForever:
  b LoopForever
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
  ldr   r0, =_estack
 8001a74:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001a80:	08005ad8 	.word	0x08005ad8
  ldr r2, =_sbss
 8001a84:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001a88:	200001ec 	.word	0x200001ec

08001a8c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_COMP_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_Init+0x3c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Init+0x3c>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0049      	lsls	r1, r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f000 f810 	bl	8001ad0 <HAL_InitTick>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e001      	b.n	8001ac0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fe36 	bl	800172c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	230f      	movs	r3, #15
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_InitTick+0x88>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02b      	beq.n	8001b40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_InitTick+0x8c>)
 8001aea:	681c      	ldr	r4, [r3, #0]
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_InitTick+0x88>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	0019      	movs	r1, r3
 8001af2:	23fa      	movs	r3, #250	; 0xfa
 8001af4:	0098      	lsls	r0, r3, #2
 8001af6:	f7fe fb05 	bl	8000104 <__udivsi3>
 8001afa:	0003      	movs	r3, r0
 8001afc:	0019      	movs	r1, r3
 8001afe:	0020      	movs	r0, r4
 8001b00:	f7fe fb00 	bl	8000104 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 ff9b 	bl	8002a42 <HAL_SYSTICK_Config>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d112      	bne.n	8001b36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d80a      	bhi.n	8001b2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 ff6a 	bl	80029f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_InitTick+0x90>)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00d      	b.n	8001b48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e008      	b.n	8001b48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e003      	b.n	8001b48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b005      	add	sp, #20
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x20>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	18d2      	adds	r2, r2, r3
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_IncTick+0x20>)
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	20000008 	.word	0x20000008
 8001b84:	200001d4 	.word	0x200001d4

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <HAL_GetTick+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	200001d4 	.word	0x200001d4

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	001a      	movs	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	189b      	adds	r3, r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	f7ff ffe0 	bl	8001b88 <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b004      	add	sp, #16
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	fffff9ff 	.word	0xfffff9ff

08001c10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001c20:	401a      	ands	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	fe3fffff 	.word	0xfe3fffff

08001c38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	23e0      	movs	r3, #224	; 0xe0
 8001c46:	045b      	lsls	r3, r3, #17
 8001c48:	4013      	ands	r3, r2
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	2104      	movs	r1, #4
 8001c66:	400a      	ands	r2, r1
 8001c68:	2107      	movs	r1, #7
 8001c6a:	4091      	lsls	r1, r2
 8001c6c:	000a      	movs	r2, r1
 8001c6e:	43d2      	mvns	r2, r2
 8001c70:	401a      	ands	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2104      	movs	r1, #4
 8001c76:	400b      	ands	r3, r1
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4099      	lsls	r1, r3
 8001c7c:	000b      	movs	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	23c0      	movs	r3, #192	; 0xc0
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b002      	add	sp, #8
 8001cac:	bd80      	pop	{r7, pc}

08001cae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	211f      	movs	r1, #31
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	4091      	lsls	r1, r2
 8001cc8:	000a      	movs	r2, r1
 8001cca:	43d2      	mvns	r2, r2
 8001ccc:	401a      	ands	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	4019      	ands	r1, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	201f      	movs	r0, #31
 8001cda:	4003      	ands	r3, r0
 8001cdc:	4099      	lsls	r1, r3
 8001cde:	000b      	movs	r3, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}

08001cee <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	035b      	lsls	r3, r3, #13
 8001d00:	0b5b      	lsrs	r3, r3, #13
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	0352      	lsls	r2, r2, #13
 8001d22:	0b52      	lsrs	r2, r2, #13
 8001d24:	43d2      	mvns	r2, r2
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	0212      	lsls	r2, r2, #8
 8001d48:	43d2      	mvns	r2, r2
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	400b      	ands	r3, r1
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001d56:	400b      	ands	r3, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	07ffff00 	.word	0x07ffff00

08001d6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	0552      	lsls	r2, r2, #21
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	6fffffe8 	.word	0x6fffffe8

08001d94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	401a      	ands	r2, r3
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	055b      	lsls	r3, r3, #21
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <LL_ADC_Enable+0x20>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2201      	movs	r2, #1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	7fffffe8 	.word	0x7fffffe8

08001de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <LL_ADC_IsEnabled+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_ADC_IsEnabled+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_ADC_REG_StartConversion+0x20>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	2204      	movs	r2, #4
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	7fffffe8 	.word	0x7fffffe8

08001e28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	231f      	movs	r3, #31
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1b1      	b.n	80021d6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fc7d 	bl	800177c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2254      	movs	r2, #84	; 0x54
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ff7d 	bl	8001d94 <LL_ADC_IsInternalRegulatorEnabled>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ff62 	bl	8001d6c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea8:	4bcd      	ldr	r3, [pc, #820]	; (80021e0 <HAL_ADC_Init+0x394>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	49cd      	ldr	r1, [pc, #820]	; (80021e4 <HAL_ADC_Init+0x398>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f928 	bl	8000104 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ff60 	bl	8001d94 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	2210      	movs	r2, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2201      	movs	r2, #1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef0:	231f      	movs	r3, #31
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ff93 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 8001f02:	0003      	movs	r3, r0
 8001f04:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d000      	beq.n	8001f12 <HAL_ADC_Init+0xc6>
 8001f10:	e154      	b.n	80021bc <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d000      	beq.n	8001f1a <HAL_ADC_Init+0xce>
 8001f18:	e150      	b.n	80021bc <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4ab2      	ldr	r2, [pc, #712]	; (80021e8 <HAL_ADC_Init+0x39c>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	2202      	movs	r2, #2
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff ff56 	bl	8001de0 <LL_ADC_IsEnabled>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d156      	bne.n	8001fe6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2218      	movs	r2, #24
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0f9b      	lsrs	r3, r3, #30
 8001f56:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	223c      	movs	r2, #60	; 0x3c
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0f9b      	lsrs	r3, r3, #30
 8001f74:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f7a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001f80:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001f86:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a94      	ldr	r2, [pc, #592]	; (80021ec <HAL_ADC_Init+0x3a0>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	061b      	lsls	r3, r3, #24
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d018      	beq.n	8001fe6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	05db      	lsls	r3, r3, #23
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d012      	beq.n	8001fe6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d00c      	beq.n	8001fe6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001fcc:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_ADC_Init+0x3a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a88      	ldr	r2, [pc, #544]	; (80021f4 <HAL_ADC_Init+0x3a8>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	23f0      	movs	r3, #240	; 0xf0
 8001fdc:	039b      	lsls	r3, r3, #14
 8001fde:	401a      	ands	r2, r3
 8001fe0:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_ADC_Init+0x3a4>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7e1b      	ldrb	r3, [r3, #24]
 8001fea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e5b      	ldrb	r3, [r3, #25]
 8001ff0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ff2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7e9b      	ldrb	r3, [r3, #26]
 8001ff8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ffa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_ADC_Init+0x1be>
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	e000      	b.n	800200c <HAL_ADC_Init+0x1c0>
 800200a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800200c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002012:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	da04      	bge.n	8002026 <HAL_ADC_Init+0x1da>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	e001      	b.n	800202a <HAL_ADC_Init+0x1de>
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800202a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	5c5b      	ldrb	r3, [r3, r1]
 8002032:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002034:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d115      	bne.n	8002072 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7e9b      	ldrb	r3, [r3, #26]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	0252      	lsls	r2, r2, #9
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	e00b      	b.n	8002072 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	2220      	movs	r2, #32
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2201      	movs	r2, #1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207e:	23e0      	movs	r3, #224	; 0xe0
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002088:	4313      	orrs	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_ADC_Init+0x3ac>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4a53      	ldr	r2, [pc, #332]	; (80021fc <HAL_ADC_Init+0x3b0>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	001a      	movs	r2, r3
 80020c6:	2100      	movs	r1, #0
 80020c8:	f7ff fdc3 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	494a      	ldr	r1, [pc, #296]	; (8002200 <HAL_ADC_Init+0x3b4>)
 80020d6:	001a      	movs	r2, r3
 80020d8:	f7ff fdbb 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2110      	movs	r1, #16
 80020f0:	4249      	negs	r1, r1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
 80020f6:	e03a      	b.n	800216e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	039b      	lsls	r3, r3, #14
 8002100:	429a      	cmp	r2, r3
 8002102:	d134      	bne.n	800216e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e00c      	b.n	8002124 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	40da      	lsrs	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	220f      	movs	r2, #15
 8002118:	4013      	ands	r3, r2
 800211a:	2b0f      	cmp	r3, #15
 800211c:	d006      	beq.n	800212c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	3301      	adds	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b07      	cmp	r3, #7
 8002128:	d9ef      	bls.n	800210a <HAL_ADC_Init+0x2be>
 800212a:	e000      	b.n	800212e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 800212c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d109      	bne.n	8002148 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2110      	movs	r1, #16
 8002140:	4249      	negs	r1, r1
 8002142:	430a      	orrs	r2, r1
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
 8002146:	e012      	b.n	800216e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	3b01      	subs	r3, #1
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	221c      	movs	r2, #28
 8002158:	4013      	ands	r3, r2
 800215a:	2210      	movs	r2, #16
 800215c:	4252      	negs	r2, r2
 800215e:	409a      	lsls	r2, r3
 8002160:	0011      	movs	r1, r2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_ADC_Init+0x3b8>)
 8002176:	4013      	ands	r3, r2
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	429a      	cmp	r2, r3
 800217c:	d10b      	bne.n	8002196 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	2203      	movs	r2, #3
 800218a:	4393      	bics	r3, r2
 800218c:	2201      	movs	r2, #1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002194:	e01c      	b.n	80021d0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	2212      	movs	r2, #18
 800219c:	4393      	bics	r3, r2
 800219e:	2210      	movs	r2, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2201      	movs	r2, #1
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80021b2:	231f      	movs	r3, #31
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80021ba:	e009      	b.n	80021d0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	2210      	movs	r2, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021c8:	231f      	movs	r3, #31
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80021d0:	231f      	movs	r3, #31
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b008      	add	sp, #32
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	20000000 	.word	0x20000000
 80021e4:	00030d40 	.word	0x00030d40
 80021e8:	fffffefd 	.word	0xfffffefd
 80021ec:	1ffffc02 	.word	0x1ffffc02
 80021f0:	40012708 	.word	0x40012708
 80021f4:	ffc3ffff 	.word	0xffc3ffff
 80021f8:	fffe0219 	.word	0xfffe0219
 80021fc:	dffffc02 	.word	0xdffffc02
 8002200:	07ffff04 	.word	0x07ffff04
 8002204:	833fffe7 	.word	0x833fffe7

08002208 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fe07 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d135      	bne.n	800228a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2254      	movs	r2, #84	; 0x54
 8002222:	5c9b      	ldrb	r3, [r3, r2]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_ADC_Start+0x24>
 8002228:	2302      	movs	r3, #2
 800222a:	e035      	b.n	8002298 <HAL_ADC_Start+0x90>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2254      	movs	r2, #84	; 0x54
 8002230:	2101      	movs	r1, #1
 8002232:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002234:	250f      	movs	r5, #15
 8002236:	197c      	adds	r4, r7, r5
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 faaa 	bl	8002794 <ADC_Enable>
 8002240:	0003      	movs	r3, r0
 8002242:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002244:	197b      	adds	r3, r7, r5
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d119      	bne.n	8002280 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_ADC_Start+0x98>)
 8002252:	4013      	ands	r3, r2
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	0052      	lsls	r2, r2, #1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	221c      	movs	r2, #28
 800226a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2254      	movs	r2, #84	; 0x54
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff fdc3 	bl	8001e04 <LL_ADC_REG_StartConversion>
 800227e:	e008      	b.n	8002292 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2254      	movs	r2, #84	; 0x54
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]
 8002288:	e003      	b.n	8002292 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800228a:	230f      	movs	r3, #15
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2202      	movs	r2, #2
 8002290:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002292:	230f      	movs	r3, #15
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	781b      	ldrb	r3, [r3, #0]
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	fffff0fe 	.word	0xfffff0fe

080022a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d102      	bne.n	80022bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80022b6:	2308      	movs	r3, #8
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e00f      	b.n	80022dc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d007      	beq.n	80022d8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	2220      	movs	r2, #32
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e072      	b.n	80023be <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80022d8:	2304      	movs	r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022dc:	f7ff fc54 	bl	8001b88 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80022e4:	e01f      	b.n	8002326 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	d01c      	beq.n	8002326 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022ec:	f7ff fc4c 	bl	8001b88 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <HAL_ADC_PollForConversion+0x5e>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d111      	bne.n	8002326 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	d10b      	bne.n	8002326 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	2204      	movs	r2, #4
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2254      	movs	r2, #84	; 0x54
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04b      	b.n	80023be <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4013      	ands	r3, r2
 8002330:	d0d9      	beq.n	80022e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fca1 	bl	8001c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d02e      	beq.n	80023ac <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7e9b      	ldrb	r3, [r3, #26]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d12a      	bne.n	80023ac <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	2b08      	cmp	r3, #8
 8002362:	d123      	bne.n	80023ac <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff fd5d 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d110      	bne.n	8002394 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	210c      	movs	r1, #12
 800237e:	438a      	bics	r2, r1
 8002380:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_ADC_PollForConversion+0x124>)
 8002388:	4013      	ands	r3, r2
 800238a:	2201      	movs	r2, #1
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58
 8002392:	e00b      	b.n	80023ac <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	2220      	movs	r2, #32
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2201      	movs	r2, #1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	220c      	movs	r2, #12
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	fffffefe 	.word	0xfffffefe

080023cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2317      	movs	r3, #23
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2254      	movs	r2, #84	; 0x54
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x24>
 8002404:	2302      	movs	r3, #2
 8002406:	e1c0      	b.n	800278a <HAL_ADC_ConfigChannel+0x3a6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2254      	movs	r2, #84	; 0x54
 800240c:	2101      	movs	r1, #1
 800240e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fd07 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d000      	beq.n	8002420 <HAL_ADC_ConfigChannel+0x3c>
 800241e:	e1a3      	b.n	8002768 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d100      	bne.n	800242a <HAL_ADC_ConfigChannel+0x46>
 8002428:	e143      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	429a      	cmp	r2, r3
 8002434:	d004      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800243a:	4ac1      	ldr	r2, [pc, #772]	; (8002740 <HAL_ADC_ConfigChannel+0x35c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d108      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0019      	movs	r1, r3
 800244a:	0010      	movs	r0, r2
 800244c:	f7ff fc4f 	bl	8001cee <LL_ADC_REG_SetSequencerChAdd>
 8002450:	e0c9      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	211f      	movs	r1, #31
 800245c:	400b      	ands	r3, r1
 800245e:	210f      	movs	r1, #15
 8002460:	4099      	lsls	r1, r3
 8002462:	000b      	movs	r3, r1
 8002464:	43db      	mvns	r3, r3
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	035b      	lsls	r3, r3, #13
 8002470:	0b5b      	lsrs	r3, r3, #13
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x9c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	221f      	movs	r2, #31
 800247c:	4013      	ands	r3, r2
 800247e:	e098      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d000      	beq.n	800248c <HAL_ADC_ConfigChannel+0xa8>
 800248a:	e091      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1cc>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d000      	beq.n	8002498 <HAL_ADC_ConfigChannel+0xb4>
 8002496:	e089      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1c8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d000      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0xc0>
 80024a2:	e081      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1c4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2208      	movs	r2, #8
 80024aa:	4013      	ands	r3, r2
 80024ac:	d000      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0xcc>
 80024ae:	e079      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1c0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_ConfigChannel+0xd8>
 80024ba:	e071      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1bc>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2220      	movs	r2, #32
 80024c2:	4013      	ands	r3, r2
 80024c4:	d000      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0xe4>
 80024c6:	e069      	b.n	800259c <HAL_ADC_ConfigChannel+0x1b8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d000      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0xf0>
 80024d2:	e061      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1b4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	4013      	ands	r3, r2
 80024dc:	d000      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0xfc>
 80024de:	e059      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1b0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d151      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1ac>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d149      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1a8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4013      	ands	r3, r2
 8002502:	d141      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1a4>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d139      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1a0>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	015b      	lsls	r3, r3, #5
 8002518:	4013      	ands	r3, r2
 800251a:	d131      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x19c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	019b      	lsls	r3, r3, #6
 8002524:	4013      	ands	r3, r2
 8002526:	d129      	bne.n	800257c <HAL_ADC_ConfigChannel+0x198>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	4013      	ands	r3, r2
 8002532:	d121      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x194>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4013      	ands	r3, r2
 800253e:	d119      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x190>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	4013      	ands	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x18c>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d109      	bne.n	800256c <HAL_ADC_ConfigChannel+0x188>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	02db      	lsls	r3, r3, #11
 8002560:	4013      	ands	r3, r2
 8002562:	d001      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x184>
 8002564:	2312      	movs	r3, #18
 8002566:	e024      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	2300      	movs	r3, #0
 800256a:	e022      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	2311      	movs	r3, #17
 800256e:	e020      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2310      	movs	r3, #16
 8002572:	e01e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	230f      	movs	r3, #15
 8002576:	e01c      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	230e      	movs	r3, #14
 800257a:	e01a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	230d      	movs	r3, #13
 800257e:	e018      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	230c      	movs	r3, #12
 8002582:	e016      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	230b      	movs	r3, #11
 8002586:	e014      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002588:	230a      	movs	r3, #10
 800258a:	e012      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800258c:	2309      	movs	r3, #9
 800258e:	e010      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	2308      	movs	r3, #8
 8002592:	e00e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002594:	2307      	movs	r3, #7
 8002596:	e00c      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	2306      	movs	r3, #6
 800259a:	e00a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800259c:	2305      	movs	r3, #5
 800259e:	e008      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025b0:	2300      	movs	r3, #0
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6852      	ldr	r2, [r2, #4]
 80025b6:	201f      	movs	r0, #31
 80025b8:	4002      	ands	r2, r0
 80025ba:	4093      	lsls	r3, r2
 80025bc:	000a      	movs	r2, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d808      	bhi.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	001a      	movs	r2, r3
 80025e2:	f7ff fb64 	bl	8001cae <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	001a      	movs	r2, r3
 80025f4:	f7ff fb9e 	bl	8001d34 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db00      	blt.n	8002602 <HAL_ADC_ConfigChannel+0x21e>
 8002600:	e0bc      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002602:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fb17 	bl	8001c38 <LL_ADC_GetCommonPathInternalCh>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_ADC_ConfigChannel+0x364>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d122      	bne.n	800265e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002620:	d11d      	bne.n	800265e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0412      	lsls	r2, r2, #16
 8002628:	4313      	orrs	r3, r2
 800262a:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800262c:	0019      	movs	r1, r3
 800262e:	0010      	movs	r0, r2
 8002630:	f7ff faee 	bl	8001c10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002634:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_ADC_ConfigChannel+0x368>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4945      	ldr	r1, [pc, #276]	; (8002750 <HAL_ADC_ConfigChannel+0x36c>)
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd62 	bl	8000104 <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	0013      	movs	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	189b      	adds	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800264e:	e002      	b.n	8002656 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800265c:	e08e      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_ADC_ConfigChannel+0x370>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10e      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a2>
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	045b      	lsls	r3, r3, #17
 800266e:	4013      	ands	r3, r2
 8002670:	d109      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0452      	lsls	r2, r2, #17
 8002678:	4313      	orrs	r3, r2
 800267a:	4a32      	ldr	r2, [pc, #200]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7ff fac6 	bl	8001c10 <LL_ADC_SetCommonPathInternalCh>
 8002684:	e07a      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a33      	ldr	r2, [pc, #204]	; (8002758 <HAL_ADC_ConfigChannel+0x374>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d000      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x2ae>
 8002690:	e074      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	03db      	lsls	r3, r3, #15
 8002698:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800269a:	d000      	beq.n	800269e <HAL_ADC_ConfigChannel+0x2ba>
 800269c:	e06e      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	03d2      	lsls	r2, r2, #15
 80026a4:	4313      	orrs	r3, r2
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026a8:	0019      	movs	r1, r3
 80026aa:	0010      	movs	r0, r2
 80026ac:	f7ff fab0 	bl	8001c10 <LL_ADC_SetCommonPathInternalCh>
 80026b0:	e064      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_ADC_ConfigChannel+0x35c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d107      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7ff fb1c 	bl	8001d10 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da4d      	bge.n	800277c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff faa8 	bl	8001c38 <LL_ADC_GetCommonPathInternalCh>
 80026e8:	0003      	movs	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <HAL_ADC_ConfigChannel+0x364>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_ADC_ConfigChannel+0x378>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f7ff fa85 	bl	8001c10 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e039      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_ADC_ConfigChannel+0x370>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d108      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_ADC_ConfigChannel+0x37c>)
 8002716:	4013      	ands	r3, r2
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800271a:	0019      	movs	r1, r3
 800271c:	0010      	movs	r0, r2
 800271e:	f7ff fa77 	bl	8001c10 <LL_ADC_SetCommonPathInternalCh>
 8002722:	e02b      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_ADC_ConfigChannel+0x374>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d126      	bne.n	800277c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_ADC_ConfigChannel+0x380>)
 8002732:	4013      	ands	r3, r2
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7ff fa69 	bl	8001c10 <LL_ADC_SetCommonPathInternalCh>
 800273e:	e01d      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
 8002740:	80000004 	.word	0x80000004
 8002744:	40012708 	.word	0x40012708
 8002748:	b0001000 	.word	0xb0001000
 800274c:	20000000 	.word	0x20000000
 8002750:	00030d40 	.word	0x00030d40
 8002754:	b8004000 	.word	0xb8004000
 8002758:	b4002000 	.word	0xb4002000
 800275c:	ff7fffff 	.word	0xff7fffff
 8002760:	feffffff 	.word	0xfeffffff
 8002764:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	2220      	movs	r2, #32
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2254      	movs	r2, #84	; 0x54
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002784:	2317      	movs	r3, #23
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	781b      	ldrb	r3, [r3, #0]
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b006      	add	sp, #24
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)

08002794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fb1b 	bl	8001de0 <LL_ADC_IsEnabled>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d000      	beq.n	80027b0 <ADC_Enable+0x1c>
 80027ae:	e069      	b.n	8002884 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <ADC_Enable+0xfc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00d      	beq.n	80027d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	2210      	movs	r2, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2201      	movs	r2, #1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e056      	b.n	8002886 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff faed 	bl	8001dbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <ADC_Enable+0x100>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fa27 	bl	8001c38 <LL_ADC_GetCommonPathInternalCh>
 80027ea:	0002      	movs	r2, r0
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00f      	beq.n	8002814 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <ADC_Enable+0x104>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4928      	ldr	r1, [pc, #160]	; (800289c <ADC_Enable+0x108>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fc82 	bl	8000104 <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	3301      	adds	r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002806:	e002      	b.n	800280e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3b01      	subs	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d033      	beq.n	8002884 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800281c:	f7ff f9b4 	bl	8001b88 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002824:	e027      	b.n	8002876 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff fad8 	bl	8001de0 <LL_ADC_IsEnabled>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d104      	bne.n	800283e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff fabf 	bl	8001dbc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283e:	f7ff f9a3 	bl	8001b88 <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d914      	bls.n	8002876 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00d      	beq.n	8002876 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	2210      	movs	r2, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2201      	movs	r2, #1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d1d0      	bne.n	8002826 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	80000017 	.word	0x80000017
 8002894:	40012708 	.word	0x40012708
 8002898:	20000000 	.word	0x20000000
 800289c:	00030d40 	.word	0x00030d40

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b7f      	cmp	r3, #127	; 0x7f
 80028b2:	d809      	bhi.n	80028c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	001a      	movs	r2, r3
 80028ba:	231f      	movs	r3, #31
 80028bc:	401a      	ands	r2, r3
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_EnableIRQ+0x30>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	4091      	lsls	r1, r2
 80028c4:	000a      	movs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	0002      	movs	r2, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b7f      	cmp	r3, #127	; 0x7f
 80028e8:	d828      	bhi.n	800293c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ea:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <__NVIC_SetPriority+0xd4>)
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	33c0      	adds	r3, #192	; 0xc0
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	589b      	ldr	r3, [r3, r2]
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	0011      	movs	r1, r2
 8002900:	2203      	movs	r2, #3
 8002902:	400a      	ands	r2, r1
 8002904:	00d2      	lsls	r2, r2, #3
 8002906:	21ff      	movs	r1, #255	; 0xff
 8002908:	4091      	lsls	r1, r2
 800290a:	000a      	movs	r2, r1
 800290c:	43d2      	mvns	r2, r2
 800290e:	401a      	ands	r2, r3
 8002910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	22ff      	movs	r2, #255	; 0xff
 8002918:	401a      	ands	r2, r3
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	2303      	movs	r3, #3
 8002922:	4003      	ands	r3, r0
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <__NVIC_SetPriority+0xd4>)
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b25b      	sxtb	r3, r3
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	430a      	orrs	r2, r1
 8002934:	33c0      	adds	r3, #192	; 0xc0
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800293a:	e031      	b.n	80029a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <__NVIC_SetPriority+0xd8>)
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0019      	movs	r1, r3
 8002944:	230f      	movs	r3, #15
 8002946:	400b      	ands	r3, r1
 8002948:	3b08      	subs	r3, #8
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3306      	adds	r3, #6
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1dfa      	adds	r2, r7, #7
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	0011      	movs	r1, r2
 800295c:	2203      	movs	r2, #3
 800295e:	400a      	ands	r2, r1
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	21ff      	movs	r1, #255	; 0xff
 8002964:	4091      	lsls	r1, r2
 8002966:	000a      	movs	r2, r1
 8002968:	43d2      	mvns	r2, r2
 800296a:	401a      	ands	r2, r3
 800296c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	401a      	ands	r2, r3
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	0018      	movs	r0, r3
 800297c:	2303      	movs	r3, #3
 800297e:	4003      	ands	r3, r0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <__NVIC_SetPriority+0xd8>)
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	001c      	movs	r4, r3
 800298c:	230f      	movs	r3, #15
 800298e:	4023      	ands	r3, r4
 8002990:	3b08      	subs	r3, #8
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	430a      	orrs	r2, r1
 8002996:	3306      	adds	r3, #6
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	18c3      	adds	r3, r0, r3
 800299c:	3304      	adds	r3, #4
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b003      	add	sp, #12
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	045b      	lsls	r3, r3, #17
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d301      	bcc.n	80029c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c4:	2301      	movs	r3, #1
 80029c6:	e010      	b.n	80029ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <SysTick_Config+0x44>)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	3a01      	subs	r2, #1
 80029ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d0:	2301      	movs	r3, #1
 80029d2:	425b      	negs	r3, r3
 80029d4:	2103      	movs	r1, #3
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff ff7c 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x44>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x44>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	210f      	movs	r1, #15
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	1c02      	adds	r2, r0, #0
 8002a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff ff5d 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	0002      	movs	r2, r0
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff33 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff ffaf 	bl	80029b0 <SysTick_Config>
 8002a52:	0003      	movs	r3, r0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	210f      	movs	r1, #15
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2225      	movs	r2, #37	; 0x25
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d006      	beq.n	8002a86 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e048      	b.n	8002b18 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	210e      	movs	r1, #14
 8002a92:	438a      	bics	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	491d      	ldr	r1, [pc, #116]	; (8002b28 <HAL_DMA_Abort_IT+0xcc>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	221c      	movs	r2, #28
 8002abc:	401a      	ands	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4091      	lsls	r1, r2
 8002ac6:	000a      	movs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ad2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	4910      	ldr	r1, [pc, #64]	; (8002b28 <HAL_DMA_Abort_IT+0xcc>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002af4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2225      	movs	r2, #37	; 0x25
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	2100      	movs	r1, #0
 8002b04:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	0010      	movs	r0, r2
 8002b16:	4798      	blx	r3
    }
  }
  return status;
 8002b18:	230f      	movs	r3, #15
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	fffffeff 	.word	0xfffffeff

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3a:	e14d      	b.n	8002dd8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4091      	lsls	r1, r2
 8002b46:	000a      	movs	r2, r1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d100      	bne.n	8002b54 <HAL_GPIO_Init+0x28>
 8002b52:	e13e      	b.n	8002dd2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d005      	beq.n	8002b6c <HAL_GPIO_Init+0x40>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d130      	bne.n	8002bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	43da      	mvns	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	2201      	movs	r2, #1
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d017      	beq.n	8002c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d123      	bne.n	8002c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	58d3      	ldr	r3, [r2, r3]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2207      	movs	r2, #7
 8002c28:	4013      	ands	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2107      	movs	r1, #7
 8002c42:	400b      	ands	r3, r1
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	6939      	ldr	r1, [r7, #16]
 8002c5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	409a      	lsls	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	23c0      	movs	r3, #192	; 0xc0
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d100      	bne.n	8002ca0 <HAL_GPIO_Init+0x174>
 8002c9e:	e098      	b.n	8002dd2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ca0:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	589b      	ldr	r3, [r3, r2]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	0013      	movs	r3, r2
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	23a0      	movs	r3, #160	; 0xa0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x1d6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2c8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1d2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <HAL_GPIO_Init+0x2cc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1ce>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1ca>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_GPIO_Init+0x2d4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1c6>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x1d8>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x1d8>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x1d8>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x1d8>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x1d8>
 8002d02:	2300      	movs	r3, #0
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	2103      	movs	r1, #3
 8002d08:	400a      	ands	r2, r1
 8002d0a:	00d2      	lsls	r2, r2, #3
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d14:	4936      	ldr	r1, [pc, #216]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d22:	4a33      	ldr	r2, [pc, #204]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	58d3      	ldr	r3, [r2, r3]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d48:	4929      	ldr	r1, [pc, #164]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002d52:	2384      	movs	r3, #132	; 0x84
 8002d54:	58d3      	ldr	r3, [r2, r3]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d76:	491e      	ldr	r1, [pc, #120]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002d78:	2284      	movs	r2, #132	; 0x84
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43da      	mvns	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	035b      	lsls	r3, r3, #13
 8002d96:	4013      	ands	r3, r2
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	039b      	lsls	r3, r3, #14
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	40da      	lsrs	r2, r3
 8002de0:	1e13      	subs	r3, r2, #0
 8002de2:	d000      	beq.n	8002de6 <HAL_GPIO_Init+0x2ba>
 8002de4:	e6aa      	b.n	8002b3c <HAL_GPIO_Init+0x10>
  }
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b006      	add	sp, #24
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021800 	.word	0x40021800
 8002df4:	50000400 	.word	0x50000400
 8002df8:	50000800 	.word	0x50000800
 8002dfc:	50000c00 	.word	0x50000c00
 8002e00:	50001000 	.word	0x50001000

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	0008      	movs	r0, r1
 8002e0e:	0011      	movs	r1, r2
 8002e10:	1cbb      	adds	r3, r7, #2
 8002e12:	1c02      	adds	r2, r0, #0
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	1c7b      	adds	r3, r7, #1
 8002e18:	1c0a      	adds	r2, r1, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e1c:	1c7b      	adds	r3, r7, #1
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e24:	1cbb      	adds	r3, r7, #2
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e2e:	1cbb      	adds	r3, r7, #2
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d11f      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	189b      	adds	r3, r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4912      	ldr	r1, [pc, #72]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd f946 	bl	8000104 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7e:	e008      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e001      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e009      	b.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d0ed      	beq.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	fffff9ff 	.word	0xfffff9ff
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	000f4240 	.word	0x000f4240

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f000 fb56 	bl	8003580 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d100      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x20>
 8002ede:	e07d      	b.n	8002fdc <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee0:	4bc3      	ldr	r3, [pc, #780]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2238      	movs	r2, #56	; 0x38
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eea:	4bc1      	ldr	r3, [pc, #772]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_OscConfig+0x40>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d002      	beq.n	8002f06 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4bba      	ldr	r3, [pc, #744]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d063      	beq.n	8002fda <HAL_RCC_OscConfig+0x11a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d15f      	bne.n	8002fda <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f000 fb30 	bl	8003580 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	025b      	lsls	r3, r3, #9
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x7c>
 8002f2c:	4bb0      	ldr	r3, [pc, #704]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4baf      	ldr	r3, [pc, #700]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	0249      	lsls	r1, r1, #9
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e020      	b.n	8002f7e <HAL_RCC_OscConfig+0xbe>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	02db      	lsls	r3, r3, #11
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10e      	bne.n	8002f66 <HAL_RCC_OscConfig+0xa6>
 8002f48:	4ba9      	ldr	r3, [pc, #676]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4ba8      	ldr	r3, [pc, #672]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	02c9      	lsls	r1, r1, #11
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	4ba6      	ldr	r3, [pc, #664]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4ba5      	ldr	r3, [pc, #660]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0249      	lsls	r1, r1, #9
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0xbe>
 8002f66:	4ba2      	ldr	r3, [pc, #648]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4ba1      	ldr	r3, [pc, #644]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f6c:	49a1      	ldr	r1, [pc, #644]	; (80031f4 <HAL_RCC_OscConfig+0x334>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	4b9f      	ldr	r3, [pc, #636]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b9e      	ldr	r3, [pc, #632]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002f78:	499f      	ldr	r1, [pc, #636]	; (80031f8 <HAL_RCC_OscConfig+0x338>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d014      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fdff 	bl	8001b88 <HAL_GetTick>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fdfa 	bl	8001b88 <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e2ee      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa2:	4b93      	ldr	r3, [pc, #588]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	4013      	ands	r3, r2
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xd0>
 8002fae:	e015      	b.n	8002fdc <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fdea 	bl	8001b88 <HAL_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fba:	f7fe fde5 	bl	8001b88 <HAL_GetTick>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e2d9      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0xfa>
 8002fd8:	e000      	b.n	8002fdc <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d100      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x128>
 8002fe6:	e099      	b.n	800311c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe8:	4b81      	ldr	r3, [pc, #516]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2238      	movs	r2, #56	; 0x38
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d102      	bne.n	8003008 <HAL_RCC_OscConfig+0x148>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d002      	beq.n	800300e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d135      	bne.n	800307a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300e:	4b78      	ldr	r3, [pc, #480]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4013      	ands	r3, r2
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x166>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e2ac      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4a74      	ldr	r2, [pc, #464]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	4b6e      	ldr	r3, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003042:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6e      	ldr	r2, [pc, #440]	; (8003200 <HAL_RCC_OscConfig+0x340>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0adb      	lsrs	r3, r3, #11
 800305c:	2207      	movs	r2, #7
 800305e:	4013      	ands	r3, r2
 8003060:	4a68      	ldr	r2, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x344>)
 8003062:	40da      	lsrs	r2, r3
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x348>)
 8003066:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x34c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0018      	movs	r0, r3
 800306e:	f7fe fd2f 	bl	8001ad0 <HAL_InitTick>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d051      	beq.n	800311a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e282      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d030      	beq.n	80030e4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003082:	4b5b      	ldr	r3, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5e      	ldr	r2, [pc, #376]	; (8003200 <HAL_RCC_OscConfig+0x340>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003096:	4b56      	ldr	r3, [pc, #344]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	0049      	lsls	r1, r1, #1
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fd70 	bl	8001b88 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fe fd6b 	bl	8001b88 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e25f      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c0:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4013      	ands	r3, r2
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <HAL_RCC_OscConfig+0x33c>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	021a      	lsls	r2, r3, #8
 80030dc:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e01b      	b.n	800311c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030e4:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80030ea:	4949      	ldr	r1, [pc, #292]	; (8003210 <HAL_RCC_OscConfig+0x350>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe fd4a 	bl	8001b88 <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe fd45 	bl	8001b88 <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e239      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4013      	ands	r3, r2
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x23a>
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2208      	movs	r2, #8
 8003122:	4013      	ands	r3, r2
 8003124:	d047      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003126:	4b32      	ldr	r3, [pc, #200]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2238      	movs	r2, #56	; 0x38
 800312c:	4013      	ands	r3, r2
 800312e:	2b18      	cmp	r3, #24
 8003130:	d10a      	bne.n	8003148 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d03c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2f6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d138      	bne.n	80031b6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e21b      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d019      	beq.n	8003184 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003152:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003154:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003156:	2101      	movs	r1, #1
 8003158:	430a      	orrs	r2, r1
 800315a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fd14 	bl	8001b88 <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003166:	f7fe fd0f 	bl	8001b88 <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e203      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	2202      	movs	r2, #2
 800317e:	4013      	ands	r3, r2
 8003180:	d0f1      	beq.n	8003166 <HAL_RCC_OscConfig+0x2a6>
 8003182:	e018      	b.n	80031b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 8003186:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 800318a:	2101      	movs	r1, #1
 800318c:	438a      	bics	r2, r1
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fe fcfa 	bl	8001b88 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe fcf5 	bl	8001b88 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1e9      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	2202      	movs	r2, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d1f1      	bne.n	800319a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2204      	movs	r2, #4
 80031bc:	4013      	ands	r3, r2
 80031be:	d100      	bne.n	80031c2 <HAL_RCC_OscConfig+0x302>
 80031c0:	e0c6      	b.n	8003350 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	231f      	movs	r3, #31
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2238      	movs	r2, #56	; 0x38
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d11e      	bne.n	8003214 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_OscConfig+0x330>)
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d100      	bne.n	80031e2 <HAL_RCC_OscConfig+0x322>
 80031e0:	e0b6      	b.n	8003350 <HAL_RCC_OscConfig+0x490>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d000      	beq.n	80031ec <HAL_RCC_OscConfig+0x32c>
 80031ea:	e0b1      	b.n	8003350 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e1c7      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
 80031f0:	40021000 	.word	0x40021000
 80031f4:	fffeffff 	.word	0xfffeffff
 80031f8:	fffbffff 	.word	0xfffbffff
 80031fc:	ffff80ff 	.word	0xffff80ff
 8003200:	ffffc7ff 	.word	0xffffc7ff
 8003204:	00f42400 	.word	0x00f42400
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004
 8003210:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003214:	4bb8      	ldr	r3, [pc, #736]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	055b      	lsls	r3, r3, #21
 800321c:	4013      	ands	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x364>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x366>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	4bb3      	ldr	r3, [pc, #716]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800322c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322e:	4bb2      	ldr	r3, [pc, #712]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0549      	lsls	r1, r1, #21
 8003234:	430a      	orrs	r2, r1
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
 8003238:	4baf      	ldr	r3, [pc, #700]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800323a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	055b      	lsls	r3, r3, #21
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	4bab      	ldr	r3, [pc, #684]	; (80034fc <HAL_RCC_OscConfig+0x63c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d11a      	bne.n	8003290 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325a:	4ba8      	ldr	r3, [pc, #672]	; (80034fc <HAL_RCC_OscConfig+0x63c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4ba7      	ldr	r3, [pc, #668]	; (80034fc <HAL_RCC_OscConfig+0x63c>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0049      	lsls	r1, r1, #1
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003268:	f7fe fc8e 	bl	8001b88 <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe fc89 	bl	8001b88 <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e17d      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b9d      	ldr	r3, [pc, #628]	; (80034fc <HAL_RCC_OscConfig+0x63c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4013      	ands	r3, r2
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3e6>
 8003298:	4b97      	ldr	r3, [pc, #604]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800329a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800329c:	4b96      	ldr	r3, [pc, #600]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800329e:	2101      	movs	r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x420>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x408>
 80032ae:	4b92      	ldr	r3, [pc, #584]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b2:	4b91      	ldr	r3, [pc, #580]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032b4:	2104      	movs	r1, #4
 80032b6:	430a      	orrs	r2, r1
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ba:	4b8f      	ldr	r3, [pc, #572]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032be:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0x420>
 80032c8:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032cc:	4b8a      	ldr	r3, [pc, #552]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d4:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032d8:	4b87      	ldr	r3, [pc, #540]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80032da:	2104      	movs	r1, #4
 80032dc:	438a      	bics	r2, r1
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d014      	beq.n	8003312 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fc4e 	bl	8001b88 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f0:	e009      	b.n	8003306 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fc49 	bl	8001b88 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	4a80      	ldr	r2, [pc, #512]	; (8003500 <HAL_RCC_OscConfig+0x640>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e13c      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003306:	4b7c      	ldr	r3, [pc, #496]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x432>
 8003310:	e013      	b.n	800333a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe fc39 	bl	8001b88 <HAL_GetTick>
 8003316:	0003      	movs	r3, r0
 8003318:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800331a:	e009      	b.n	8003330 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe fc34 	bl	8001b88 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	4a76      	ldr	r2, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x640>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e127      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003330:	4b71      	ldr	r3, [pc, #452]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2202      	movs	r2, #2
 8003336:	4013      	ands	r3, r2
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800333a:	231f      	movs	r3, #31
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003348:	4b6b      	ldr	r3, [pc, #428]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800334a:	496e      	ldr	r1, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x644>)
 800334c:	400a      	ands	r2, r1
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d039      	beq.n	80033ce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01b      	beq.n	800339a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	03c9      	lsls	r1, r1, #15
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fc0a 	bl	8001b88 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337a:	f7fe fc05 	bl	8001b88 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0f9      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800338c:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	4013      	ands	r3, r2
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x4ba>
 8003398:	e019      	b.n	80033ce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800339a:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b56      	ldr	r3, [pc, #344]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80033a0:	4959      	ldr	r1, [pc, #356]	; (8003508 <HAL_RCC_OscConfig+0x648>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe fbef 	bl	8001b88 <HAL_GetTick>
 80033aa:	0003      	movs	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b0:	f7fe fbea 	bl	8001b88 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0de      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033c2:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	4013      	ands	r3, r2
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d100      	bne.n	80033d8 <HAL_RCC_OscConfig+0x518>
 80033d6:	e0d2      	b.n	800357e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2238      	movs	r2, #56	; 0x38
 80033de:	4013      	ands	r3, r2
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d100      	bne.n	80033e6 <HAL_RCC_OscConfig+0x526>
 80033e4:	e081      	b.n	80034ea <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d156      	bne.n	800349c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80033f4:	4945      	ldr	r1, [pc, #276]	; (800350c <HAL_RCC_OscConfig+0x64c>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fbc5 	bl	8001b88 <HAL_GetTick>
 80033fe:	0003      	movs	r3, r0
 8003400:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fbc0 	bl	8001b88 <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0b4      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	049b      	lsls	r3, r3, #18
 800341e:	4013      	ands	r3, r2
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <HAL_RCC_OscConfig+0x650>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	431a      	orrs	r2, r3
 8003450:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003452:	430a      	orrs	r2, r1
 8003454:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0449      	lsls	r1, r1, #17
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	0549      	lsls	r1, r1, #21
 800346e:	430a      	orrs	r2, r1
 8003470:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe fb89 	bl	8001b88 <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fb84 	bl	8001b88 <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e078      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	049b      	lsls	r3, r3, #18
 8003496:	4013      	ands	r3, r2
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x5bc>
 800349a:	e070      	b.n	800357e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80034a2:	491a      	ldr	r1, [pc, #104]	; (800350c <HAL_RCC_OscConfig+0x64c>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80034ae:	2103      	movs	r1, #3
 80034b0:	438a      	bics	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80034ba:	4916      	ldr	r1, [pc, #88]	; (8003514 <HAL_RCC_OscConfig+0x654>)
 80034bc:	400a      	ands	r2, r1
 80034be:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fb62 	bl	8001b88 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fb5d 	bl	8001b88 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e051      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_OscConfig+0x638>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	049b      	lsls	r3, r3, #18
 80034e4:	4013      	ands	r3, r2
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x60a>
 80034e8:	e049      	b.n	800357e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e044      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
 8003500:	00001388 	.word	0x00001388
 8003504:	efffffff 	.word	0xefffffff
 8003508:	ffbfffff 	.word	0xffbfffff
 800350c:	feffffff 	.word	0xfeffffff
 8003510:	11c1808c 	.word	0x11c1808c
 8003514:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x6c8>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2203      	movs	r2, #3
 8003522:	401a      	ands	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	429a      	cmp	r2, r3
 800352a:	d126      	bne.n	800357a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2270      	movs	r2, #112	; 0x70
 8003530:	401a      	ands	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11f      	bne.n	800357a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	23fe      	movs	r3, #254	; 0xfe
 800353e:	01db      	lsls	r3, r3, #7
 8003540:	401a      	ands	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d116      	bne.n	800357a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	23f8      	movs	r3, #248	; 0xf8
 8003550:	039b      	lsls	r3, r3, #14
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d10e      	bne.n	800357a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	23e0      	movs	r3, #224	; 0xe0
 8003560:	051b      	lsls	r3, r3, #20
 8003562:	401a      	ands	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	0f5b      	lsrs	r3, r3, #29
 8003570:	075a      	lsls	r2, r3, #29
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b008      	add	sp, #32
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0e9      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2207      	movs	r2, #7
 80035a6:	4013      	ands	r3, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d91e      	bls.n	80035ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b73      	ldr	r3, [pc, #460]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2207      	movs	r2, #7
 80035b4:	4393      	bics	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	4b70      	ldr	r3, [pc, #448]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035c0:	f7fe fae2 	bl	8001b88 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035c8:	e009      	b.n	80035de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7fe fadd 	bl	8001b88 <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	4a6a      	ldr	r2, [pc, #424]	; (8003780 <HAL_RCC_ClockConfig+0x1f4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0ca      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035de:	4b67      	ldr	r3, [pc, #412]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2207      	movs	r2, #7
 80035e4:	4013      	ands	r3, r2
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2202      	movs	r2, #2
 80035f2:	4013      	ands	r3, r2
 80035f4:	d015      	beq.n	8003622 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	4013      	ands	r3, r2
 80035fe:	d006      	beq.n	800360e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003600:	4b60      	ldr	r3, [pc, #384]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b5f      	ldr	r3, [pc, #380]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003606:	21e0      	movs	r1, #224	; 0xe0
 8003608:	01c9      	lsls	r1, r1, #7
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360e:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4a5d      	ldr	r2, [pc, #372]	; (8003788 <HAL_RCC_ClockConfig+0x1fc>)
 8003614:	4013      	ands	r3, r2
 8003616:	0019      	movs	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	4013      	ands	r3, r2
 800362a:	d057      	beq.n	80036dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	029b      	lsls	r3, r3, #10
 800363c:	4013      	ands	r3, r2
 800363e:	d12b      	bne.n	8003698 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e097      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d107      	bne.n	800365c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364c:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	049b      	lsls	r3, r3, #18
 8003654:	4013      	ands	r3, r2
 8003656:	d11f      	bne.n	8003698 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e08b      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003664:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4013      	ands	r3, r2
 800366e:	d113      	bne.n	8003698 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e07f      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d106      	bne.n	800368a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367c:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	2202      	movs	r2, #2
 8003682:	4013      	ands	r3, r2
 8003684:	d108      	bne.n	8003698 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e074      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368a:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e06d      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003698:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2207      	movs	r2, #7
 800369e:	4393      	bics	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f7fe fa6c 	bl	8001b88 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b4:	e009      	b.n	80036ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b6:	f7fe fa67 	bl	8001b88 <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <HAL_RCC_ClockConfig+0x1f4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e054      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2238      	movs	r2, #56	; 0x38
 80036d0:	401a      	ands	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1ec      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2207      	movs	r2, #7
 80036e2:	4013      	ands	r3, r2
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d21e      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2207      	movs	r2, #7
 80036f0:	4393      	bics	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fa44 	bl	8001b88 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003704:	e009      	b.n	800371a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003706:	f7fe fa3f 	bl	8001b88 <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_RCC_ClockConfig+0x1f4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e02c      	b.n	8003774 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2207      	movs	r2, #7
 8003720:	4013      	ands	r3, r2
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2204      	movs	r2, #4
 800372e:	4013      	ands	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_RCC_ClockConfig+0x200>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003746:	f000 f829 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800374a:	0001      	movs	r1, r0
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	220f      	movs	r2, #15
 8003754:	401a      	ands	r2, r3
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_RCC_ClockConfig+0x204>)
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	58d3      	ldr	r3, [r2, r3]
 800375c:	221f      	movs	r2, #31
 800375e:	4013      	ands	r3, r2
 8003760:	000a      	movs	r2, r1
 8003762:	40da      	lsrs	r2, r3
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_ClockConfig+0x208>)
 8003766:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_ClockConfig+0x20c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0018      	movs	r0, r3
 800376e:	f7fe f9af 	bl	8001ad0 <HAL_InitTick>
 8003772:	0003      	movs	r3, r0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b004      	add	sp, #16
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40022000 	.word	0x40022000
 8003780:	00001388 	.word	0x00001388
 8003784:	40021000 	.word	0x40021000
 8003788:	fffff0ff 	.word	0xfffff0ff
 800378c:	ffff8fff 	.word	0xffff8fff
 8003790:	08005a90 	.word	0x08005a90
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a2:	4b3c      	ldr	r3, [pc, #240]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2238      	movs	r2, #56	; 0x38
 80037a8:	4013      	ands	r3, r2
 80037aa:	d10f      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	0adb      	lsrs	r3, r3, #11
 80037b2:	2207      	movs	r2, #7
 80037b4:	4013      	ands	r3, r2
 80037b6:	2201      	movs	r2, #1
 80037b8:	409a      	lsls	r2, r3
 80037ba:	0013      	movs	r3, r2
 80037bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037be:	6839      	ldr	r1, [r7, #0]
 80037c0:	4835      	ldr	r0, [pc, #212]	; (8003898 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037c2:	f7fc fc9f 	bl	8000104 <__udivsi3>
 80037c6:	0003      	movs	r3, r0
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e05d      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2238      	movs	r2, #56	; 0x38
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d102      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d8:	4b30      	ldr	r3, [pc, #192]	; (800389c <HAL_RCC_GetSysClockFreq+0x100>)
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e054      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037de:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2238      	movs	r2, #56	; 0x38
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d138      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2203      	movs	r2, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	2207      	movs	r2, #7
 80037fc:	4013      	ands	r3, r2
 80037fe:	3301      	adds	r3, #1
 8003800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d10d      	bne.n	8003824 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4824      	ldr	r0, [pc, #144]	; (800389c <HAL_RCC_GetSysClockFreq+0x100>)
 800380c:	f7fc fc7a 	bl	8000104 <__udivsi3>
 8003810:	0003      	movs	r3, r0
 8003812:	0019      	movs	r1, r3
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	227f      	movs	r2, #127	; 0x7f
 800381c:	4013      	ands	r3, r2
 800381e:	434b      	muls	r3, r1
 8003820:	617b      	str	r3, [r7, #20]
        break;
 8003822:	e00d      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	481c      	ldr	r0, [pc, #112]	; (8003898 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003828:	f7fc fc6c 	bl	8000104 <__udivsi3>
 800382c:	0003      	movs	r3, r0
 800382e:	0019      	movs	r1, r3
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	227f      	movs	r2, #127	; 0x7f
 8003838:	4013      	ands	r3, r2
 800383a:	434b      	muls	r3, r1
 800383c:	617b      	str	r3, [r7, #20]
        break;
 800383e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0f5b      	lsrs	r3, r3, #29
 8003846:	2207      	movs	r2, #7
 8003848:	4013      	ands	r3, r2
 800384a:	3301      	adds	r3, #1
 800384c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	6978      	ldr	r0, [r7, #20]
 8003852:	f7fc fc57 	bl	8000104 <__udivsi3>
 8003856:	0003      	movs	r3, r0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e015      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2238      	movs	r2, #56	; 0x38
 8003862:	4013      	ands	r3, r2
 8003864:	2b20      	cmp	r3, #32
 8003866:	d103      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2238      	movs	r2, #56	; 0x38
 8003876:	4013      	ands	r3, r2
 8003878:	2b18      	cmp	r3, #24
 800387a:	d103      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800387c:	23fa      	movs	r3, #250	; 0xfa
 800387e:	01db      	lsls	r3, r3, #7
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e001      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003888:	693b      	ldr	r3, [r7, #16]
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b006      	add	sp, #24
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	40021000 	.word	0x40021000
 8003898:	00f42400 	.word	0x00f42400
 800389c:	007a1200 	.word	0x007a1200

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80038a8:	2313      	movs	r3, #19
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b0:	2312      	movs	r3, #18
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	4013      	ands	r3, r2
 80038c2:	d100      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038c4:	e0ad      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2011      	movs	r0, #17
 80038c8:	183b      	adds	r3, r7, r0
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	055b      	lsls	r3, r3, #21
 80038d6:	4013      	ands	r3, r2
 80038d8:	d110      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	4b44      	ldr	r3, [pc, #272]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038de:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038e0:	2180      	movs	r1, #128	; 0x80
 80038e2:	0549      	lsls	r1, r1, #21
 80038e4:	430a      	orrs	r2, r1
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038e8:	4b40      	ldr	r3, [pc, #256]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	055b      	lsls	r3, r3, #21
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fc:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	0049      	lsls	r1, r1, #1
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800390a:	f7fe f93d 	bl	8001b88 <HAL_GetTick>
 800390e:	0003      	movs	r3, r0
 8003910:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003912:	e00b      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fe f938 	bl	8001b88 <HAL_GetTick>
 8003918:	0002      	movs	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d904      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003922:	2313      	movs	r3, #19
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2203      	movs	r2, #3
 8003928:	701a      	strb	r2, [r3, #0]
        break;
 800392a:	e005      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4013      	ands	r3, r2
 8003936:	d0ed      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003938:	2313      	movs	r3, #19
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d15e      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003946:	23c0      	movs	r3, #192	; 0xc0
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4013      	ands	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d019      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d014      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003964:	4013      	ands	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800396a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	0249      	lsls	r1, r1, #9
 8003972:	430a      	orrs	r2, r1
 8003974:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800397c:	491e      	ldr	r1, [pc, #120]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800397e:	400a      	ands	r2, r1
 8003980:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2201      	movs	r2, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d016      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe f8fa 	bl	8001b88 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fe f8f5 	bl	8001b88 <HAL_GetTick>
 800399e:	0002      	movs	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	4a15      	ldr	r2, [pc, #84]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d904      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80039aa:	2313      	movs	r3, #19
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2203      	movs	r2, #3
 80039b0:	701a      	strb	r2, [r3, #0]
            break;
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d0ed      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80039be:	2313      	movs	r3, #19
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039d8:	430a      	orrs	r2, r1
 80039da:	65da      	str	r2, [r3, #92]	; 0x5c
 80039dc:	e016      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039de:	2312      	movs	r3, #18
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2213      	movs	r2, #19
 80039e4:	18ba      	adds	r2, r7, r2
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e00f      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	fffffcff 	.word	0xfffffcff
 80039f8:	fffeffff 	.word	0xfffeffff
 80039fc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	2312      	movs	r3, #18
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	2213      	movs	r2, #19
 8003a06:	18ba      	adds	r2, r7, r2
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a0c:	2311      	movs	r3, #17
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4bb6      	ldr	r3, [pc, #728]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a1a:	4bb5      	ldr	r3, [pc, #724]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a1c:	49b5      	ldr	r1, [pc, #724]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a1e:	400a      	ands	r2, r1
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a2c:	4bb0      	ldr	r3, [pc, #704]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	2203      	movs	r2, #3
 8003a32:	4393      	bics	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4bad      	ldr	r3, [pc, #692]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2202      	movs	r2, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a4a:	4ba9      	ldr	r3, [pc, #676]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	220c      	movs	r2, #12
 8003a50:	4393      	bics	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	4ba5      	ldr	r3, [pc, #660]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2204      	movs	r2, #4
 8003a64:	4013      	ands	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a68:	4ba1      	ldr	r3, [pc, #644]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	2230      	movs	r2, #48	; 0x30
 8003a6e:	4393      	bics	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4b9e      	ldr	r3, [pc, #632]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2210      	movs	r2, #16
 8003a82:	4013      	ands	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a86:	4b9a      	ldr	r3, [pc, #616]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	4a9b      	ldr	r2, [pc, #620]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	4b96      	ldr	r3, [pc, #600]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	015b      	lsls	r3, r3, #5
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003aa6:	4b92      	ldr	r3, [pc, #584]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	4a94      	ldr	r2, [pc, #592]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	4b8e      	ldr	r3, [pc, #568]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ac6:	4b8a      	ldr	r3, [pc, #552]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	4a8d      	ldr	r2, [pc, #564]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad4:	4b86      	ldr	r3, [pc, #536]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ae6:	4b82      	ldr	r3, [pc, #520]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	4a86      	ldr	r2, [pc, #536]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2220      	movs	r2, #32
 8003b00:	4013      	ands	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b04:	4b7a      	ldr	r3, [pc, #488]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	4a7f      	ldr	r2, [pc, #508]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	4b77      	ldr	r3, [pc, #476]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2240      	movs	r2, #64	; 0x40
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	4a79      	ldr	r2, [pc, #484]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b32:	430a      	orrs	r2, r1
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	01db      	lsls	r3, r3, #7
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d015      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b42:	4b6b      	ldr	r3, [pc, #428]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	0899      	lsrs	r1, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b60:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	0249      	lsls	r1, r1, #9
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	031b      	lsls	r3, r3, #12
 8003b76:	4013      	ands	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	2240      	movs	r2, #64	; 0x40
 8003b80:	4393      	bics	r3, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	039b      	lsls	r3, r3, #14
 8003b96:	4013      	ands	r3, r2
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b9a:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	4a5c      	ldr	r2, [pc, #368]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003baa:	430a      	orrs	r2, r1
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	03db      	lsls	r3, r3, #15
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bba:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	0449      	lsls	r1, r1, #17
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	03db      	lsls	r3, r3, #15
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d016      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be4:	430a      	orrs	r2, r1
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	045b      	lsls	r3, r3, #17
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bf4:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	0449      	lsls	r1, r1, #17
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d014      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c0e:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	2203      	movs	r2, #3
 8003c14:	4393      	bics	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d106      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	0249      	lsls	r1, r1, #9
 8003c34:	430a      	orrs	r2, r1
 8003c36:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	019b      	lsls	r3, r3, #6
 8003c40:	4013      	ands	r3, r2
 8003c42:	d014      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	220c      	movs	r2, #12
 8003c4a:	4393      	bics	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c52:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c54:	430a      	orrs	r2, r1
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	0249      	lsls	r1, r1, #9
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	045b      	lsls	r3, r3, #17
 8003c76:	4013      	ands	r3, r2
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	019b      	lsls	r3, r3, #6
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0449      	lsls	r1, r1, #17
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	049b      	lsls	r3, r3, #18
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	0449      	lsls	r1, r1, #17
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ce2:	2312      	movs	r3, #18
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b006      	add	sp, #24
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	efffffff 	.word	0xefffffff
 8003cf8:	fffff3ff 	.word	0xfffff3ff
 8003cfc:	fffffcff 	.word	0xfffffcff
 8003d00:	fff3ffff 	.word	0xfff3ffff
 8003d04:	ffcfffff 	.word	0xffcfffff
 8003d08:	ffffcfff 	.word	0xffffcfff
 8003d0c:	ffff3fff 	.word	0xffff3fff
 8003d10:	ffbfffff 	.word	0xffbfffff
 8003d14:	feffffff 	.word	0xfeffffff

08003d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0a8      	b.n	8003e7c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2382      	movs	r3, #130	; 0x82
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d009      	beq.n	8003d52 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	61da      	str	r2, [r3, #28]
 8003d44:	e005      	b.n	8003d52 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	225d      	movs	r2, #93	; 0x5d
 8003d5c:	5c9b      	ldrb	r3, [r3, r2]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	225c      	movs	r2, #92	; 0x5c
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fd fd60 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	225d      	movs	r2, #93	; 0x5d
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	23e0      	movs	r3, #224	; 0xe0
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d902      	bls.n	8003d9e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e002      	b.n	8003da4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	015b      	lsls	r3, r3, #5
 8003da2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	23f0      	movs	r3, #240	; 0xf0
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d008      	beq.n	8003dc2 <HAL_SPI_Init+0xaa>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	23e0      	movs	r3, #224	; 0xe0
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	2382      	movs	r3, #130	; 0x82
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	401a      	ands	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6899      	ldr	r1, [r3, #8]
 8003dd0:	2384      	movs	r3, #132	; 0x84
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2102      	movs	r1, #2
 8003dde:	400b      	ands	r3, r1
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2101      	movs	r1, #1
 8003de8:	400b      	ands	r3, r1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6999      	ldr	r1, [r3, #24]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	400b      	ands	r3, r1
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2138      	movs	r1, #56	; 0x38
 8003dfe:	400b      	ands	r3, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	400b      	ands	r3, r1
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	401a      	ands	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	2204      	movs	r2, #4
 8003e28:	401a      	ands	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2110      	movs	r1, #16
 8003e30:	400b      	ands	r3, r1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	2108      	movs	r1, #8
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	23f0      	movs	r3, #240	; 0xf0
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	400b      	ands	r3, r1
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	015b      	lsls	r3, r3, #5
 8003e52:	401a      	ands	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4907      	ldr	r1, [pc, #28]	; (8003e84 <HAL_SPI_Init+0x16c>)
 8003e68:	400a      	ands	r2, r1
 8003e6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	225d      	movs	r2, #93	; 0x5d
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b004      	add	sp, #16
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	fffff7ff 	.word	0xfffff7ff

08003e88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	001a      	movs	r2, r3
 8003e96:	1cbb      	adds	r3, r7, #2
 8003e98:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e9e:	2323      	movs	r3, #35	; 0x23
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	225c      	movs	r2, #92	; 0x5c
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x2c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e1b5      	b.n	8004220 <HAL_SPI_TransmitReceive+0x398>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	225c      	movs	r2, #92	; 0x5c
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ebc:	f7fd fe64 	bl	8001b88 <HAL_GetTick>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ec4:	201b      	movs	r0, #27
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	215d      	movs	r1, #93	; 0x5d
 8003ecc:	5c52      	ldrb	r2, [r2, r1]
 8003ece:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ed6:	2312      	movs	r3, #18
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	1cba      	adds	r2, r7, #2
 8003edc:	8812      	ldrh	r2, [r2, #0]
 8003ede:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d011      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x84>
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	2382      	movs	r3, #130	; 0x82
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d107      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x7a>
 8003efa:	183b      	adds	r3, r7, r0
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d004      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003f02:	2323      	movs	r3, #35	; 0x23
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2202      	movs	r2, #2
 8003f08:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f0a:	e17e      	b.n	800420a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x98>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x98>
 8003f18:	1cbb      	adds	r3, r7, #2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003f20:	2323      	movs	r3, #35	; 0x23
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f28:	e16f      	b.n	800420a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	225d      	movs	r2, #93	; 0x5d
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	225d      	movs	r2, #93	; 0x5d
 8003f3a:	2105      	movs	r1, #5
 8003f3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1cba      	adds	r2, r7, #2
 8003f4e:	2146      	movs	r1, #70	; 0x46
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1cba      	adds	r2, r7, #2
 8003f58:	2144      	movs	r1, #68	; 0x44
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1cba      	adds	r2, r7, #2
 8003f68:	8812      	ldrh	r2, [r2, #0]
 8003f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1cba      	adds	r2, r7, #2
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	23e0      	movs	r3, #224	; 0xe0
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d908      	bls.n	8003f9e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	49a4      	ldr	r1, [pc, #656]	; (8004228 <HAL_SPI_TransmitReceive+0x3a0>)
 8003f98:	400a      	ands	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	e008      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0149      	lsls	r1, r1, #5
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d007      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2140      	movs	r1, #64	; 0x40
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	23e0      	movs	r3, #224	; 0xe0
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d800      	bhi.n	8003fdc <HAL_SPI_TransmitReceive+0x154>
 8003fda:	e07f      	b.n	80040dc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x168>
 8003fe4:	2312      	movs	r3, #18
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d000      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x168>
 8003fee:	e069      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	1c9a      	adds	r2, r3, #2
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004014:	e056      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2202      	movs	r2, #2
 800401e:	4013      	ands	r3, r2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d11b      	bne.n	800405c <HAL_SPI_TransmitReceive+0x1d4>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_SPI_TransmitReceive+0x1d4>
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	2b01      	cmp	r3, #1
 8004032:	d113      	bne.n	800405c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2201      	movs	r2, #1
 8004064:	4013      	ands	r3, r2
 8004066:	2b01      	cmp	r3, #1
 8004068:	d11c      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x21c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2246      	movs	r2, #70	; 0x46
 800406e:	5a9b      	ldrh	r3, [r3, r2]
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	b292      	uxth	r2, r2
 8004082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2246      	movs	r2, #70	; 0x46
 8004092:	5a9b      	ldrh	r3, [r3, r2]
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b299      	uxth	r1, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2246      	movs	r2, #70	; 0x46
 800409e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040a0:	2301      	movs	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040a4:	f7fd fd70 	bl	8001b88 <HAL_GetTick>
 80040a8:	0002      	movs	r2, r0
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d807      	bhi.n	80040c4 <HAL_SPI_TransmitReceive+0x23c>
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	3301      	adds	r3, #1
 80040b8:	d004      	beq.n	80040c4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80040ba:	2323      	movs	r3, #35	; 0x23
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	2203      	movs	r2, #3
 80040c0:	701a      	strb	r2, [r3, #0]
        goto error;
 80040c2:	e0a2      	b.n	800420a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1a3      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x18e>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2246      	movs	r2, #70	; 0x46
 80040d2:	5a9b      	ldrh	r3, [r3, r2]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d19d      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x18e>
 80040da:	e085      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x268>
 80040e4:	2312      	movs	r3, #18
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d000      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x268>
 80040ee:	e070      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004116:	e05c      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2202      	movs	r2, #2
 8004120:	4013      	ands	r3, r2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d11c      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x2d8>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d017      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x2d8>
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	2b01      	cmp	r3, #1
 8004134:	d114      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2201      	movs	r2, #1
 8004168:	4013      	ands	r3, r2
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11e      	bne.n	80041ac <HAL_SPI_TransmitReceive+0x324>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2246      	movs	r2, #70	; 0x46
 8004172:	5a9b      	ldrh	r3, [r3, r2]
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	001a      	movs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2246      	movs	r2, #70	; 0x46
 800419a:	5a9b      	ldrh	r3, [r3, r2]
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b299      	uxth	r1, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a8:	2301      	movs	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041ac:	f7fd fcec 	bl	8001b88 <HAL_GetTick>
 80041b0:	0002      	movs	r2, r0
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d802      	bhi.n	80041c2 <HAL_SPI_TransmitReceive+0x33a>
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	3301      	adds	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x340>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80041c8:	2323      	movs	r3, #35	; 0x23
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2203      	movs	r2, #3
 80041ce:	701a      	strb	r2, [r3, #0]
        goto error;
 80041d0:	e01b      	b.n	800420a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d19d      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x290>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2246      	movs	r2, #70	; 0x46
 80041e0:	5a9b      	ldrh	r3, [r3, r2]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d197      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 fa68 	bl	80046c4 <SPI_EndRxTxTransaction>
 80041f4:	1e03      	subs	r3, r0, #0
 80041f6:	d007      	beq.n	8004208 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80041f8:	2323      	movs	r3, #35	; 0x23
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
 8004206:	e000      	b.n	800420a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004208:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	225d      	movs	r2, #93	; 0x5d
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	225c      	movs	r2, #92	; 0x5c
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800421a:	2323      	movs	r3, #35	; 0x23
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	781b      	ldrb	r3, [r3, #0]
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b00a      	add	sp, #40	; 0x28
 8004226:	bd80      	pop	{r7, pc}
 8004228:	ffffefff 	.word	0xffffefff

0800422c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	001a      	movs	r2, r3
 800424a:	2301      	movs	r3, #1
 800424c:	4013      	ands	r3, r2
 800424e:	d10f      	bne.n	8004270 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2201      	movs	r2, #1
 8004254:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004256:	d00b      	beq.n	8004270 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	001a      	movs	r2, r3
 800425e:	2301      	movs	r3, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d005      	beq.n	8004270 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	0010      	movs	r0, r2
 800426c:	4798      	blx	r3
    return;
 800426e:	e0d5      	b.n	800441c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	001a      	movs	r2, r3
 8004276:	2301      	movs	r3, #1
 8004278:	4013      	ands	r3, r2
 800427a:	d00b      	beq.n	8004294 <HAL_SPI_IRQHandler+0x68>
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	09db      	lsrs	r3, r3, #7
 8004280:	001a      	movs	r2, r3
 8004282:	2301      	movs	r3, #1
 8004284:	4013      	ands	r3, r2
 8004286:	d005      	beq.n	8004294 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	0010      	movs	r0, r2
 8004290:	4798      	blx	r3
    return;
 8004292:	e0c3      	b.n	800441c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	001a      	movs	r2, r3
 800429a:	2301      	movs	r3, #1
 800429c:	4013      	ands	r3, r2
 800429e:	d10c      	bne.n	80042ba <HAL_SPI_IRQHandler+0x8e>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	001a      	movs	r2, r3
 80042a6:	2301      	movs	r3, #1
 80042a8:	4013      	ands	r3, r2
 80042aa:	d106      	bne.n	80042ba <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	001a      	movs	r2, r3
 80042b2:	2301      	movs	r3, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	d100      	bne.n	80042ba <HAL_SPI_IRQHandler+0x8e>
 80042b8:	e0b0      	b.n	800441c <HAL_SPI_IRQHandler+0x1f0>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	001a      	movs	r2, r3
 80042c0:	2301      	movs	r3, #1
 80042c2:	4013      	ands	r3, r2
 80042c4:	d100      	bne.n	80042c8 <HAL_SPI_IRQHandler+0x9c>
 80042c6:	e0a9      	b.n	800441c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	001a      	movs	r2, r3
 80042ce:	2301      	movs	r3, #1
 80042d0:	4013      	ands	r3, r2
 80042d2:	d023      	beq.n	800431c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	225d      	movs	r2, #93	; 0x5d
 80042d8:	5c9b      	ldrb	r3, [r3, r2]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d011      	beq.n	8004304 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	2204      	movs	r2, #4
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e00b      	b.n	800431c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
        return;
 800431a:	e07f      	b.n	800441c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	001a      	movs	r2, r3
 8004322:	2301      	movs	r3, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d014      	beq.n	8004352 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	2201      	movs	r2, #1
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2140      	movs	r1, #64	; 0x40
 800434c:	438a      	bics	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	001a      	movs	r2, r3
 8004358:	2301      	movs	r3, #1
 800435a:	4013      	ands	r3, r2
 800435c:	d00c      	beq.n	8004378 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	2208      	movs	r2, #8
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	2b00      	cmp	r3, #0
 800437e:	d04c      	beq.n	800441a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	21e0      	movs	r1, #224	; 0xe0
 800438c:	438a      	bics	r2, r1
 800438e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	225d      	movs	r2, #93	; 0x5d
 8004394:	2101      	movs	r1, #1
 8004396:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2202      	movs	r2, #2
 800439c:	4013      	ands	r3, r2
 800439e:	d103      	bne.n	80043a8 <HAL_SPI_IRQHandler+0x17c>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2201      	movs	r2, #1
 80043a4:	4013      	ands	r3, r2
 80043a6:	d032      	beq.n	800440e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2103      	movs	r1, #3
 80043b4:	438a      	bics	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	4a17      	ldr	r2, [pc, #92]	; (8004424 <HAL_SPI_IRQHandler+0x1f8>)
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fe fb45 	bl	8002a5c <HAL_DMA_Abort_IT>
 80043d2:	1e03      	subs	r3, r0, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_SPI_IRQHandler+0x1f8>)
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7fe fb30 	bl	8002a5c <HAL_DMA_Abort_IT>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800440c:	e004      	b.n	8004418 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f809 	bl	8004428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004416:	e000      	b.n	800441a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004418:	46c0      	nop			; (mov r8, r8)
    return;
 800441a:	46c0      	nop			; (mov r8, r8)
  }
}
 800441c:	46bd      	mov	sp, r7
 800441e:	b008      	add	sp, #32
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	08004439 	.word	0x08004439

08004428 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2246      	movs	r2, #70	; 0x46
 800444a:	2100      	movs	r1, #0
 800444c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff ffe6 	bl	8004428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b004      	add	sp, #16
 8004462:	bd80      	pop	{r7, pc}

08004464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004474:	f7fd fb88 	bl	8001b88 <HAL_GetTick>
 8004478:	0002      	movs	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	18d3      	adds	r3, r2, r3
 8004482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004484:	f7fd fb80 	bl	8001b88 <HAL_GetTick>
 8004488:	0003      	movs	r3, r0
 800448a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448c:	4b3a      	ldr	r3, [pc, #232]	; (8004578 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	015b      	lsls	r3, r3, #5
 8004492:	0d1b      	lsrs	r3, r3, #20
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	4353      	muls	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449a:	e058      	b.n	800454e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	d055      	beq.n	800454e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a2:	f7fd fb71 	bl	8001b88 <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d902      	bls.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d142      	bne.n	800453e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	21e0      	movs	r1, #224	; 0xe0
 80044c4:	438a      	bics	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	2382      	movs	r3, #130	; 0x82
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d113      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	429a      	cmp	r2, r3
 80044de:	d005      	beq.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d107      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	438a      	bics	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	019b      	lsls	r3, r3, #6
 8004504:	429a      	cmp	r2, r3
 8004506:	d110      	bne.n	800452a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	491a      	ldr	r1, [pc, #104]	; (800457c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004514:	400a      	ands	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	0189      	lsls	r1, r1, #6
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	225d      	movs	r2, #93	; 0x5d
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	225c      	movs	r2, #92	; 0x5c
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e017      	b.n	800456e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3b01      	subs	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4013      	ands	r3, r2
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	425a      	negs	r2, r3
 800455e:	4153      	adcs	r3, r2
 8004560:	b2db      	uxtb	r3, r3
 8004562:	001a      	movs	r2, r3
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d197      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b008      	add	sp, #32
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	20000000 	.word	0x20000000
 800457c:	ffffdfff 	.word	0xffffdfff

08004580 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800458e:	2317      	movs	r3, #23
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004596:	f7fd faf7 	bl	8001b88 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045a6:	f7fd faef 	bl	8001b88 <HAL_GetTick>
 80045aa:	0003      	movs	r3, r0
 80045ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	0013      	movs	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	00da      	lsls	r2, r3, #3
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	0d1b      	lsrs	r3, r3, #20
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	4353      	muls	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045cc:	e068      	b.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	23c0      	movs	r3, #192	; 0xc0
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d10a      	bne.n	80045ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	2117      	movs	r1, #23
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	d055      	beq.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f4:	f7fd fac8 	bl	8001b88 <HAL_GetTick>
 80045f8:	0002      	movs	r2, r0
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	429a      	cmp	r2, r3
 8004602:	d902      	bls.n	800460a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d142      	bne.n	8004690 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	21e0      	movs	r1, #224	; 0xe0
 8004616:	438a      	bics	r2, r1
 8004618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	2382      	movs	r3, #130	; 0x82
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	429a      	cmp	r2, r3
 8004624:	d113      	bne.n	800464e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	429a      	cmp	r2, r3
 8004630:	d005      	beq.n	800463e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	429a      	cmp	r2, r3
 800463c:	d107      	bne.n	800464e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	438a      	bics	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	429a      	cmp	r2, r3
 8004658:	d110      	bne.n	800467c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4916      	ldr	r1, [pc, #88]	; (80046c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004666:	400a      	ands	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	0189      	lsls	r1, r1, #6
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	225d      	movs	r2, #93	; 0x5d
 8004680:	2101      	movs	r1, #1
 8004682:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	225c      	movs	r2, #92	; 0x5c
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e010      	b.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3b01      	subs	r3, #1
 800469e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d18e      	bne.n	80045ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b00a      	add	sp, #40	; 0x28
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	20000000 	.word	0x20000000
 80046c0:	ffffdfff 	.word	0xffffdfff

080046c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	23c0      	movs	r3, #192	; 0xc0
 80046d4:	0159      	lsls	r1, r3, #5
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	0013      	movs	r3, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	f7ff ff4e 	bl	8004580 <SPI_WaitFifoStateUntilTimeout>
 80046e4:	1e03      	subs	r3, r0, #0
 80046e6:	d007      	beq.n	80046f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	2220      	movs	r2, #32
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e027      	b.n	8004748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	0013      	movs	r3, r2
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	f7ff fead 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d007      	beq.n	800471e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	2220      	movs	r2, #32
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e014      	b.n	8004748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	23c0      	movs	r3, #192	; 0xc0
 8004722:	00d9      	lsls	r1, r3, #3
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	0013      	movs	r3, r2
 800472c:	2200      	movs	r2, #0
 800472e:	f7ff ff27 	bl	8004580 <SPI_WaitFifoStateUntilTimeout>
 8004732:	1e03      	subs	r3, r0, #0
 8004734:	d007      	beq.n	8004746 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473a:	2220      	movs	r2, #32
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e000      	b.n	8004748 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b004      	add	sp, #16
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e04a      	b.n	80047f8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	223d      	movs	r2, #61	; 0x3d
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	223c      	movs	r2, #60	; 0x3c
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f7fd f8ad 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	223d      	movs	r2, #61	; 0x3d
 8004782:	2102      	movs	r1, #2
 8004784:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3304      	adds	r3, #4
 800478e:	0019      	movs	r1, r3
 8004790:	0010      	movs	r0, r2
 8004792:	f000 fb0f 	bl	8004db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2248      	movs	r2, #72	; 0x48
 800479a:	2101      	movs	r1, #1
 800479c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	223e      	movs	r2, #62	; 0x3e
 80047a2:	2101      	movs	r1, #1
 80047a4:	5499      	strb	r1, [r3, r2]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	223f      	movs	r2, #63	; 0x3f
 80047aa:	2101      	movs	r1, #1
 80047ac:	5499      	strb	r1, [r3, r2]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2240      	movs	r2, #64	; 0x40
 80047b2:	2101      	movs	r1, #1
 80047b4:	5499      	strb	r1, [r3, r2]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2241      	movs	r2, #65	; 0x41
 80047ba:	2101      	movs	r1, #1
 80047bc:	5499      	strb	r1, [r3, r2]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2242      	movs	r2, #66	; 0x42
 80047c2:	2101      	movs	r1, #1
 80047c4:	5499      	strb	r1, [r3, r2]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2243      	movs	r2, #67	; 0x43
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2244      	movs	r2, #68	; 0x44
 80047d2:	2101      	movs	r1, #1
 80047d4:	5499      	strb	r1, [r3, r2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2245      	movs	r2, #69	; 0x45
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2246      	movs	r2, #70	; 0x46
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2247      	movs	r2, #71	; 0x47
 80047ea:	2101      	movs	r1, #1
 80047ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	223d      	movs	r2, #61	; 0x3d
 80047f2:	2101      	movs	r1, #1
 80047f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	223d      	movs	r2, #61	; 0x3d
 800480c:	5c9b      	ldrb	r3, [r3, r2]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d001      	beq.n	8004818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e03f      	b.n	8004898 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	223d      	movs	r2, #61	; 0x3d
 800481c:	2102      	movs	r1, #2
 800481e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <HAL_TIM_Base_Start+0xa0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d014      	beq.n	8004854 <HAL_TIM_Base_Start+0x54>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	05db      	lsls	r3, r3, #23
 8004832:	429a      	cmp	r2, r3
 8004834:	d00e      	beq.n	8004854 <HAL_TIM_Base_Start+0x54>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <HAL_TIM_Base_Start+0xa4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_TIM_Base_Start+0x54>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_TIM_Base_Start+0xa8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_Base_Start+0x54>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a17      	ldr	r2, [pc, #92]	; (80048ac <HAL_TIM_Base_Start+0xac>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d116      	bne.n	8004882 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <HAL_TIM_Base_Start+0xb0>)
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b06      	cmp	r3, #6
 8004864:	d016      	beq.n	8004894 <HAL_TIM_Base_Start+0x94>
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	429a      	cmp	r2, r3
 800486e:	d011      	beq.n	8004894 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2101      	movs	r1, #1
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	e008      	b.n	8004894 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e000      	b.n	8004896 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b004      	add	sp, #16
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40014000 	.word	0x40014000
 80048b0:	00010007 	.word	0x00010007

080048b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	223d      	movs	r2, #61	; 0x3d
 80048c0:	5c9b      	ldrb	r3, [r3, r2]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e047      	b.n	800495c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	223d      	movs	r2, #61	; 0x3d
 80048d0:	2102      	movs	r1, #2
 80048d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	430a      	orrs	r2, r1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_TIM_Base_Start_IT+0xb0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d014      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x64>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	05db      	lsls	r3, r3, #23
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d00e      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x64>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <HAL_TIM_Base_Start_IT+0xb4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x64>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_TIM_Base_Start_IT+0xb8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x64>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_TIM_Base_Start_IT+0xbc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d116      	bne.n	8004946 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	4a15      	ldr	r2, [pc, #84]	; (8004974 <HAL_TIM_Base_Start_IT+0xc0>)
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b06      	cmp	r3, #6
 8004928:	d016      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0xa4>
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	025b      	lsls	r3, r3, #9
 8004930:	429a      	cmp	r2, r3
 8004932:	d011      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2101      	movs	r1, #1
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	e008      	b.n	8004958 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2101      	movs	r1, #1
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e000      	b.n	800495a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	b004      	add	sp, #16
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40014000 	.word	0x40014000
 8004974:	00010007 	.word	0x00010007

08004978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d124      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d11d      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2203      	movs	r2, #3
 80049a2:	4252      	negs	r2, r2
 80049a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2203      	movs	r2, #3
 80049b4:	4013      	ands	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 f9e2 	bl	8004d84 <HAL_TIM_IC_CaptureCallback>
 80049c0:	e007      	b.n	80049d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 f9d5 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f9e1 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2204      	movs	r2, #4
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d125      	bne.n	8004a32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2204      	movs	r2, #4
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11e      	bne.n	8004a32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2205      	movs	r2, #5
 80049fa:	4252      	negs	r2, r2
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	23c0      	movs	r3, #192	; 0xc0
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 f9b5 	bl	8004d84 <HAL_TIM_IC_CaptureCallback>
 8004a1a:	e007      	b.n	8004a2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 f9a8 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f9b4 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d124      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2208      	movs	r2, #8
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d11d      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2209      	movs	r2, #9
 8004a54:	4252      	negs	r2, r2
 8004a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2203      	movs	r2, #3
 8004a66:	4013      	ands	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f989 	bl	8004d84 <HAL_TIM_IC_CaptureCallback>
 8004a72:	e007      	b.n	8004a84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 f97c 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 f988 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2210      	movs	r2, #16
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d125      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d11e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2211      	movs	r2, #17
 8004aac:	4252      	negs	r2, r2
 8004aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	23c0      	movs	r3, #192	; 0xc0
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 f95c 	bl	8004d84 <HAL_TIM_IC_CaptureCallback>
 8004acc:	e007      	b.n	8004ade <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 f94f 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 f95b 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10f      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d108      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2202      	movs	r2, #2
 8004b06:	4252      	negs	r2, r2
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 fb05 	bl	800511c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d10f      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d108      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2281      	movs	r2, #129	; 0x81
 8004b34:	4252      	negs	r2, r2
 8004b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 fade 	bl	80050fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d10e      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d107      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <HAL_TIM_IRQHandler+0x260>)
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 facd 	bl	800510c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2240      	movs	r2, #64	; 0x40
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d10f      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2240      	movs	r2, #64	; 0x40
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d108      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2241      	movs	r2, #65	; 0x41
 8004b94:	4252      	negs	r2, r2
 8004b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f000 f902 	bl	8004da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d10f      	bne.n	8004bce <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d108      	bne.n	8004bce <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2221      	movs	r2, #33	; 0x21
 8004bc2:	4252      	negs	r2, r2
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fa8f 	bl	80050ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	fffffeff 	.word	0xfffffeff

08004bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	223c      	movs	r2, #60	; 0x3c
 8004bea:	5c9b      	ldrb	r3, [r3, r2]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0b7      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x188>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	223c      	movs	r2, #60	; 0x3c
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	223d      	movs	r2, #61	; 0x3d
 8004c00:	2102      	movs	r1, #2
 8004c02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <HAL_TIM_ConfigClockSource+0x190>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a56      	ldr	r2, [pc, #344]	; (8004d70 <HAL_TIM_ConfigClockSource+0x194>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	0192      	lsls	r2, r2, #6
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d040      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xd6>
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	0192      	lsls	r2, r2, #6
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d900      	bls.n	8004c3a <HAL_TIM_ConfigClockSource+0x5e>
 8004c38:	e088      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	0152      	lsls	r2, r2, #5
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d100      	bne.n	8004c44 <HAL_TIM_ConfigClockSource+0x68>
 8004c42:	e085      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	0152      	lsls	r2, r2, #5
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d900      	bls.n	8004c4e <HAL_TIM_ConfigClockSource+0x72>
 8004c4c:	e07e      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c4e:	2b70      	cmp	r3, #112	; 0x70
 8004c50:	d018      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0xa8>
 8004c52:	d900      	bls.n	8004c56 <HAL_TIM_ConfigClockSource+0x7a>
 8004c54:	e07a      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c56:	2b60      	cmp	r3, #96	; 0x60
 8004c58:	d04f      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x11e>
 8004c5a:	d900      	bls.n	8004c5e <HAL_TIM_ConfigClockSource+0x82>
 8004c5c:	e076      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c5e:	2b50      	cmp	r3, #80	; 0x50
 8004c60:	d03b      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xfe>
 8004c62:	d900      	bls.n	8004c66 <HAL_TIM_ConfigClockSource+0x8a>
 8004c64:	e072      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d057      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x13e>
 8004c6a:	d900      	bls.n	8004c6e <HAL_TIM_ConfigClockSource+0x92>
 8004c6c:	e06e      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d063      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15e>
 8004c72:	d86b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d060      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15e>
 8004c78:	d868      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d05d      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15e>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d05b      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c82:	e063      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f000 f994 	bl	8004fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2277      	movs	r2, #119	; 0x77
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e04f      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f000 f97d 	bl	8004fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	01c9      	lsls	r1, r1, #7
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
      break;
 8004cd8:	e03b      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	001a      	movs	r2, r3
 8004ce8:	f000 f8ee 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2150      	movs	r1, #80	; 0x50
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f948 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e02b      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	001a      	movs	r2, r3
 8004d08:	f000 f90c 	bl	8004f24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2160      	movs	r1, #96	; 0x60
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 f938 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 8004d18:	e01b      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	001a      	movs	r2, r3
 8004d28:	f000 f8ce 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f928 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e00b      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	0019      	movs	r1, r3
 8004d44:	0010      	movs	r0, r2
 8004d46:	f000 f91f 	bl	8004f88 <TIM_ITRx_SetConfig>
        break;
 8004d4a:	e002      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	e000      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004d50:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	223d      	movs	r2, #61	; 0x3d
 8004d56:	2101      	movs	r1, #1
 8004d58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	223c      	movs	r2, #60	; 0x3c
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b004      	add	sp, #16
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	ffceff88 	.word	0xffceff88
 8004d70:	ffff00ff 	.word	0xffff00ff

08004d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b002      	add	sp, #8
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b002      	add	sp, #8
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b002      	add	sp, #8
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b002      	add	sp, #8
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a38      	ldr	r2, [pc, #224]	; (8004ea8 <TIM_Base_SetConfig+0xf4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00c      	beq.n	8004de6 <TIM_Base_SetConfig+0x32>
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	05db      	lsls	r3, r3, #23
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d007      	beq.n	8004de6 <TIM_Base_SetConfig+0x32>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a34      	ldr	r2, [pc, #208]	; (8004eac <TIM_Base_SetConfig+0xf8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_Base_SetConfig+0x32>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a33      	ldr	r2, [pc, #204]	; (8004eb0 <TIM_Base_SetConfig+0xfc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d108      	bne.n	8004df8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2270      	movs	r2, #112	; 0x70
 8004dea:	4393      	bics	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	; (8004ea8 <TIM_Base_SetConfig+0xf4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d01c      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	05db      	lsls	r3, r3, #23
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d017      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <TIM_Base_SetConfig+0xf8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <TIM_Base_SetConfig+0xfc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <TIM_Base_SetConfig+0x100>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <TIM_Base_SetConfig+0x104>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <TIM_Base_SetConfig+0x108>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0x86>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <TIM_Base_SetConfig+0x10c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <TIM_Base_SetConfig+0x110>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	4393      	bics	r3, r2
 8004e52:	001a      	movs	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <TIM_Base_SetConfig+0xf4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_Base_SetConfig+0xde>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <TIM_Base_SetConfig+0x104>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0xde>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <TIM_Base_SetConfig+0x108>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0xde>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <TIM_Base_SetConfig+0x10c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d103      	bne.n	8004e9a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b004      	add	sp, #16
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40002000 	.word	0x40002000
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	fffffcff 	.word	0xfffffcff

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4393      	bics	r3, r2
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	22f0      	movs	r2, #240	; 0xf0
 8004ef2:	4393      	bics	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	220a      	movs	r2, #10
 8004f04:	4393      	bics	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b006      	add	sp, #24
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	2210      	movs	r2, #16
 8004f36:	4393      	bics	r3, r2
 8004f38:	001a      	movs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <TIM_TI2_ConfigInputStage+0x60>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	22a0      	movs	r2, #160	; 0xa0
 8004f60:	4393      	bics	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b006      	add	sp, #24
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	ffff0fff 	.word	0xffff0fff

08004f88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <TIM_ITRx_SetConfig+0x34>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	609a      	str	r2, [r3, #8]
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b004      	add	sp, #16
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	ffcfff8f 	.word	0xffcfff8f

08004fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <TIM_ETR_SetConfig+0x3c>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b006      	add	sp, #24
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	ffff00ff 	.word	0xffff00ff

08005000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	223c      	movs	r2, #60	; 0x3c
 800500e:	5c9b      	ldrb	r3, [r3, r2]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005014:	2302      	movs	r3, #2
 8005016:	e05a      	b.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	223c      	movs	r2, #60	; 0x3c
 800501c:	2101      	movs	r1, #1
 800501e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	223d      	movs	r2, #61	; 0x3d
 8005024:	2102      	movs	r1, #2
 8005026:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d108      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2270      	movs	r2, #112	; 0x70
 8005058:	4393      	bics	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d014      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	05db      	lsls	r3, r3, #23
 8005080:	429a      	cmp	r2, r3
 8005082:	d00e      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10c      	bne.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	4393      	bics	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223d      	movs	r2, #61	; 0x3d
 80050c0:	2101      	movs	r1, #1
 80050c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	223c      	movs	r2, #60	; 0x3c
 80050c8:	2100      	movs	r1, #0
 80050ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	ff0fffff 	.word	0xff0fffff
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40014000 	.word	0x40014000

080050ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f4:	46c0      	nop			; (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_PeriodElapsedCallback>:
 uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 uint8_t rx_address[5] = {0xD8,0xD8,0xD8,0xD8,0xD8};
 uint8_t status=10;

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim16)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	if (received_array[0] != 0){
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d014      	beq.n	8005156 <HAL_TIM_PeriodElapsedCallback+0x3a>
	if (received_array[1]==1)
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x26>
	{step_drive_steps(&Motor, 1, STEP_DIRECTION_ACW, 0);}
 8005134:	480b      	ldr	r0, [pc, #44]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005136:	2300      	movs	r3, #0
 8005138:	2201      	movs	r2, #1
 800513a:	2101      	movs	r1, #1
 800513c:	f000 fc23 	bl	8005986 <step_drive_steps>
	else if(received_array[1]==2)
	{step_drive_steps(&Motor, 1, STEP_DIRECTION_CW, 0);}
    }

}
 8005140:	e009      	b.n	8005156 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if(received_array[1]==2)
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d105      	bne.n	8005156 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{step_drive_steps(&Motor, 1, STEP_DIRECTION_CW, 0);}
 800514a:	4806      	ldr	r0, [pc, #24]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800514c:	2300      	movs	r3, #0
 800514e:	2202      	movs	r2, #2
 8005150:	2101      	movs	r1, #1
 8005152:	f000 fc18 	bl	8005986 <step_drive_steps>
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b002      	add	sp, #8
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	200001dc 	.word	0x200001dc
 8005164:	2000015c 	.word	0x2000015c

08005168 <convic>:

 void convic(){
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < 250; i++){
 800516e:	1dfb      	adds	r3, r7, #7
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e017      	b.n	80051a6 <convic+0x3e>
	HAL_ADC_Start(&hadc1);
 8005176:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <convic+0x6c>)
 8005178:	0018      	movs	r0, r3
 800517a:	f7fd f845 	bl	8002208 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,100);
 800517e:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <convic+0x6c>)
 8005180:	2164      	movs	r1, #100	; 0x64
 8005182:	0018      	movs	r0, r3
 8005184:	f7fd f88e 	bl	80022a4 <HAL_ADC_PollForConversion>
	vin += HAL_ADC_GetValue(&hadc1);
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <convic+0x6c>)
 800518a:	0018      	movs	r0, r3
 800518c:	f7fd f91e 	bl	80023cc <HAL_ADC_GetValue>
 8005190:	0002      	movs	r2, r0
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <convic+0x70>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	18d2      	adds	r2, r2, r3
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <convic+0x70>)
 800519a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i < 250; i++){
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	1dfb      	adds	r3, r7, #7
 80051a2:	3201      	adds	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	1dfb      	adds	r3, r7, #7
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2bf9      	cmp	r3, #249	; 0xf9
 80051ac:	d9e3      	bls.n	8005176 <convic+0xe>
    }
	vin=vin/250;
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <convic+0x70>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	21fa      	movs	r1, #250	; 0xfa
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fa ffa5 	bl	8000104 <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	001a      	movs	r2, r3
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <convic+0x70>)
 80051c0:	601a      	str	r2, [r3, #0]
	corrente=vin;
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <convic+0x70>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <convic+0x74>)
 80051c8:	601a      	str	r2, [r3, #0]


}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b002      	add	sp, #8
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	20000048 	.word	0x20000048
 80051d8:	200001e4 	.word	0x200001e4
 80051dc:	200001e0 	.word	0x200001e0

080051e0 <app_init>:

 void app_init(){
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start(&htim1);
 80051e4:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <app_init+0x74>)
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7ff fb0a 	bl	8004800 <HAL_TIM_Base_Start>

	Motor.pins.Blue.gpio = azul_GPIO_Port;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <app_init+0x78>)
 80051ee:	4a1b      	ldr	r2, [pc, #108]	; (800525c <app_init+0x7c>)
 80051f0:	60da      	str	r2, [r3, #12]
	Motor.pins.Blue.pin = azul_Pin;
 80051f2:	4b19      	ldr	r3, [pc, #100]	; (8005258 <app_init+0x78>)
 80051f4:	2208      	movs	r2, #8
 80051f6:	611a      	str	r2, [r3, #16]
	Motor.pins.Orange.gpio = laranja_GPIO_Port;
 80051f8:	4b17      	ldr	r3, [pc, #92]	; (8005258 <app_init+0x78>)
 80051fa:	4a18      	ldr	r2, [pc, #96]	; (800525c <app_init+0x7c>)
 80051fc:	615a      	str	r2, [r3, #20]
	Motor.pins.Orange.pin = laranja_Pin;
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <app_init+0x78>)
 8005200:	2210      	movs	r2, #16
 8005202:	619a      	str	r2, [r3, #24]
	Motor.pins.Yellow.gpio = amarelo_GPIO_Port;
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <app_init+0x78>)
 8005206:	22a0      	movs	r2, #160	; 0xa0
 8005208:	05d2      	lsls	r2, r2, #23
 800520a:	605a      	str	r2, [r3, #4]
	Motor.pins.Yellow.pin = amarelo_Pin;
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <app_init+0x78>)
 800520e:	2280      	movs	r2, #128	; 0x80
 8005210:	0052      	lsls	r2, r2, #1
 8005212:	609a      	str	r2, [r3, #8]
	Motor.pins.Pink.gpio = rosa_GPIO_Port;
 8005214:	4b10      	ldr	r3, [pc, #64]	; (8005258 <app_init+0x78>)
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <app_init+0x7c>)
 8005218:	61da      	str	r2, [r3, #28]
	Motor.pins.Pink.pin = rosa_Pin;
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <app_init+0x78>)
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	01d2      	lsls	r2, r2, #7
 8005220:	621a      	str	r2, [r3, #32]


	step_init(&Motor);
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <app_init+0x78>)
 8005224:	0018      	movs	r0, r3
 8005226:	f000 fb95 	bl	8005954 <step_init>
		HAL_TIM_Base_Start_IT(&htim16);
 800522a:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <app_init+0x80>)
 800522c:	0018      	movs	r0, r3
 800522e:	f7ff fb41 	bl	80048b4 <HAL_TIM_Base_Start_IT>
		nrf24_config(2,2);
 8005232:	2102      	movs	r1, #2
 8005234:	2002      	movs	r0, #2
 8005236:	f000 f877 	bl	8005328 <nrf24_config>

		 nrf24_tx_address(rx_address);
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <app_init+0x84>)
 800523c:	0018      	movs	r0, r3
 800523e:	f000 f8df 	bl	8005400 <nrf24_tx_address>
		 nrf24_rx_address(tx_address);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <app_init+0x88>)
 8005244:	0018      	movs	r0, r3
 8005246:	f000 f8c7 	bl	80053d8 <nrf24_rx_address>
		 nrf24_powerUpRx();
 800524a:	f000 f9a7 	bl	800559c <nrf24_powerUpRx>


 }
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	200000ac 	.word	0x200000ac
 8005258:	2000015c 	.word	0x2000015c
 800525c:	50000400 	.word	0x50000400
 8005260:	20000188 	.word	0x20000188
 8005264:	20000014 	.word	0x20000014
 8005268:	2000000c 	.word	0x2000000c

0800526c <app_run>:

 void app_run(){
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	af00      	add	r7, sp, #0


	 while (1){
		/* status = nrf24_dataReady();*/
		if(nrf24_dataReady()) {
 8005270:	f000 f8da 	bl	8005428 <nrf24_dataReady>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d0fb      	beq.n	8005270 <app_run+0x4>
			nrf24_getData(received_array);
 8005278:	4b23      	ldr	r3, [pc, #140]	; (8005308 <app_run+0x9c>)
 800527a:	0018      	movs	r0, r3
 800527c:	f000 f900 	bl	8005480 <nrf24_getData>
	     __HAL_TIM_SET_PRESCALER(&htim16, (2018 - received_array[0]*18.18));
 8005280:	4b21      	ldr	r3, [pc, #132]	; (8005308 <app_run+0x9c>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	0018      	movs	r0, r3
 8005286:	f7fb fe1b 	bl	8000ec0 <__aeabi_i2d>
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <app_run+0xa0>)
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <app_run+0xa4>)
 800528e:	f7fa ffe3 	bl	8000258 <__aeabi_dmul>
 8005292:	0002      	movs	r2, r0
 8005294:	000b      	movs	r3, r1
 8005296:	2000      	movs	r0, #0
 8005298:	491e      	ldr	r1, [pc, #120]	; (8005314 <app_run+0xa8>)
 800529a:	f7fb fa49 	bl	8000730 <__aeabi_dsub>
 800529e:	0002      	movs	r2, r0
 80052a0:	000b      	movs	r3, r1
 80052a2:	491d      	ldr	r1, [pc, #116]	; (8005318 <app_run+0xac>)
 80052a4:	680c      	ldr	r4, [r1, #0]
 80052a6:	0010      	movs	r0, r2
 80052a8:	0019      	movs	r1, r3
 80052aa:	f7fa ffb7 	bl	800021c <__aeabi_d2uiz>
 80052ae:	0003      	movs	r3, r0
 80052b0:	62a3      	str	r3, [r4, #40]	; 0x28
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 80052b2:	23a0      	movs	r3, #160	; 0xa0
 80052b4:	05db      	lsls	r3, r3, #23
 80052b6:	2201      	movs	r2, #1
 80052b8:	2120      	movs	r1, #32
 80052ba:	0018      	movs	r0, r3
 80052bc:	f7fd fda2 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80052c0:	2032      	movs	r0, #50	; 0x32
 80052c2:	f7fc fc6b 	bl	8001b9c <HAL_Delay>
			convic();
 80052c6:	f7ff ff4f 	bl	8005168 <convic>
			transmit_array[0] = corrente;
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <app_run+0xb0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <app_run+0xb4>)
 80052d2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 80052d4:	23a0      	movs	r3, #160	; 0xa0
 80052d6:	05db      	lsls	r3, r3, #23
 80052d8:	2200      	movs	r2, #0
 80052da:	2120      	movs	r1, #32
 80052dc:	0018      	movs	r0, r3
 80052de:	f7fd fd91 	bl	8002e04 <HAL_GPIO_WritePin>
			nrf24_send(transmit_array);
 80052e2:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <app_run+0xb4>)
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f8e9 	bl	80054bc <nrf24_send>
			while(nrf24_isSending());
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	f000 f912 	bl	8005514 <nrf24_isSending>
 80052f0:	1e03      	subs	r3, r0, #0
 80052f2:	d1fb      	bne.n	80052ec <app_run+0x80>
			status=nrf24_lastMessageStatus();
 80052f4:	f000 f937 	bl	8005566 <nrf24_lastMessageStatus>
 80052f8:	0003      	movs	r3, r0
 80052fa:	001a      	movs	r2, r3
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <app_run+0xb8>)
 80052fe:	701a      	strb	r2, [r3, #0]
			nrf24_powerUpRx();
 8005300:	f000 f94c 	bl	800559c <nrf24_powerUpRx>
		if(nrf24_dataReady()) {
 8005304:	e7b4      	b.n	8005270 <app_run+0x4>
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	200001dc 	.word	0x200001dc
 800530c:	7ae147ae 	.word	0x7ae147ae
 8005310:	40322e14 	.word	0x40322e14
 8005314:	409f8800 	.word	0x409f8800
 8005318:	20000188 	.word	0x20000188
 800531c:	200001e0 	.word	0x200001e0
 8005320:	200001d8 	.word	0x200001d8
 8005324:	20000019 	.word	0x20000019

08005328 <nrf24_config>:
    nrf24_csn_digitalWrite(HIGH);    
}

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	0002      	movs	r2, r0
 8005330:	1dfb      	adds	r3, r7, #7
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	1dbb      	adds	r3, r7, #6
 8005336:	1c0a      	adds	r2, r1, #0
 8005338:	701a      	strb	r2, [r3, #0]
	uint8_t teste = 0;
 800533a:	240f      	movs	r4, #15
 800533c:	193b      	adds	r3, r7, r4
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
    /* Use static payload length ... */
    payload_len = pay_length;
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <nrf24_config+0xac>)
 8005344:	1dba      	adds	r2, r7, #6
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	701a      	strb	r2, [r3, #0]

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 800534a:	1dfb      	adds	r3, r7, #7
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	0019      	movs	r1, r3
 8005350:	2005      	movs	r0, #5
 8005352:	f000 f9b5 	bl	80056c0 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8005356:	2100      	movs	r1, #0
 8005358:	2011      	movs	r0, #17
 800535a:	f000 f9b1 	bl	80056c0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <nrf24_config+0xac>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	0019      	movs	r1, r3
 8005364:	2012      	movs	r0, #18
 8005366:	f000 f9ab 	bl	80056c0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 800536a:	2100      	movs	r1, #0
 800536c:	2013      	movs	r0, #19
 800536e:	f000 f9a7 	bl	80056c0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 8005372:	2100      	movs	r1, #0
 8005374:	2014      	movs	r0, #20
 8005376:	f000 f9a3 	bl	80056c0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 800537a:	2100      	movs	r1, #0
 800537c:	2015      	movs	r0, #21
 800537e:	f000 f99f 	bl	80056c0 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 8005382:	2100      	movs	r1, #0
 8005384:	2016      	movs	r0, #22
 8005386:	f000 f99b 	bl	80056c0 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 800538a:	2106      	movs	r1, #6
 800538c:	2006      	movs	r0, #6
 800538e:	f000 f997 	bl	80056c0 <nrf24_configRegister>
    nrf24_readRegister(RF_SETUP, &teste, 1);
 8005392:	193b      	adds	r3, r7, r4
 8005394:	2201      	movs	r2, #1
 8005396:	0019      	movs	r1, r3
 8005398:	2006      	movs	r0, #6
 800539a:	f000 f9b4 	bl	8005706 <nrf24_readRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 800539e:	2108      	movs	r1, #8
 80053a0:	2000      	movs	r0, #0
 80053a2:	f000 f98d 	bl	80056c0 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 80053a6:	2103      	movs	r1, #3
 80053a8:	2001      	movs	r0, #1
 80053aa:	f000 f989 	bl	80056c0 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 80053ae:	2103      	movs	r1, #3
 80053b0:	2002      	movs	r0, #2
 80053b2:	f000 f985 	bl	80056c0 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 80053b6:	214f      	movs	r1, #79	; 0x4f
 80053b8:	2004      	movs	r0, #4
 80053ba:	f000 f981 	bl	80056c0 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 80053be:	2100      	movs	r1, #0
 80053c0:	201c      	movs	r0, #28
 80053c2:	f000 f97d 	bl	80056c0 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 80053c6:	f000 f8e9 	bl	800559c <nrf24_powerUpRx>
}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b005      	add	sp, #20
 80053d0:	bd90      	pop	{r4, r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	200001e8 	.word	0x200001e8

080053d8 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    nrf24_ce_digitalWrite(LOW);
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7fc f965 	bl	80016b0 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2205      	movs	r2, #5
 80053ea:	0019      	movs	r1, r3
 80053ec:	200b      	movs	r0, #11
 80053ee:	f000 f9ae 	bl	800574e <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 80053f2:	2001      	movs	r0, #1
 80053f4:	f7fc f95c 	bl	80016b0 <nrf24_ce_digitalWrite>
}
 80053f8:	46c0      	nop			; (mov r8, r8)
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b002      	add	sp, #8
 80053fe:	bd80      	pop	{r7, pc}

08005400 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2205      	movs	r2, #5
 800540c:	0019      	movs	r1, r3
 800540e:	200a      	movs	r0, #10
 8005410:	f000 f99d 	bl	800574e <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2205      	movs	r2, #5
 8005418:	0019      	movs	r1, r3
 800541a:	2010      	movs	r0, #16
 800541c:	f000 f997 	bl	800574e <nrf24_writeRegister>
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 800542e:	1dfc      	adds	r4, r7, #7
 8005430:	f000 f884 	bl	800553c <nrf24_getStatus>
 8005434:	0003      	movs	r3, r0
 8005436:	7023      	strb	r3, [r4, #0]

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2240      	movs	r2, #64	; 0x40
 800543e:	4013      	ands	r3, r2
 8005440:	d001      	beq.n	8005446 <nrf24_dataReady+0x1e>
    {
        return 1;
 8005442:	2301      	movs	r3, #1
 8005444:	e005      	b.n	8005452 <nrf24_dataReady+0x2a>
    }

    return !nrf24_rxFifoEmpty();;
 8005446:	f000 f808 	bl	800545a <nrf24_rxFifoEmpty>
 800544a:	0003      	movs	r3, r0
 800544c:	425a      	negs	r2, r3
 800544e:	4153      	adcs	r3, r2
 8005450:	b2db      	uxtb	r3, r3
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b003      	add	sp, #12
 8005458:	bd90      	pop	{r4, r7, pc}

0800545a <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 8005460:	1dfb      	adds	r3, r7, #7
 8005462:	2201      	movs	r2, #1
 8005464:	0019      	movs	r1, r3
 8005466:	2017      	movs	r0, #23
 8005468:	f000 f94d 	bl	8005706 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 800546c:	1dfb      	adds	r3, r7, #7
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	4013      	ands	r3, r2
 8005474:	b2db      	uxtb	r3, r3
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b002      	add	sp, #8
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
 8005488:	2000      	movs	r0, #0
 800548a:	f7fc f925 	bl	80016d8 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 800548e:	2061      	movs	r0, #97	; 0x61
 8005490:	f000 f8ad 	bl	80055ee <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <nrf24_getData+0x38>)
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	0018      	movs	r0, r3
 800549e:	f000 f8bd 	bl	800561c <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f7fc f918 	bl	80016d8 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	2007      	movs	r0, #7
 80054ac:	f000 f908 	bl	80056c0 <nrf24_configRegister>
}
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b002      	add	sp, #8
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200001e8 	.word	0x200001e8

080054bc <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
 80054c4:	2000      	movs	r0, #0
 80054c6:	f7fc f8f3 	bl	80016b0 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 80054ca:	f000 f883 	bl	80055d4 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
 80054ce:	2000      	movs	r0, #0
 80054d0:	f7fc f902 	bl	80016d8 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
 80054d4:	20e1      	movs	r0, #225	; 0xe1
 80054d6:	f000 f88a 	bl	80055ee <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
 80054da:	2001      	movs	r0, #1
 80054dc:	f7fc f8fc 	bl	80016d8 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 80054e0:	2000      	movs	r0, #0
 80054e2:	f7fc f8f9 	bl	80016d8 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 80054e6:	20a0      	movs	r0, #160	; 0xa0
 80054e8:	f000 f881 	bl	80055ee <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <nrf24_send+0x54>)
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f8bd 	bl	8005674 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7fc f8ec 	bl	80016d8 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
 8005500:	2001      	movs	r0, #1
 8005502:	f7fc f8d5 	bl	80016b0 <nrf24_ce_digitalWrite>
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	b002      	add	sp, #8
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	200001e8 	.word	0x200001e8

08005514 <nrf24_isSending>:

uint8_t nrf24_isSending()
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 800551a:	1dfc      	adds	r4, r7, #7
 800551c:	f000 f80e 	bl	800553c <nrf24_getStatus>
 8005520:	0003      	movs	r3, r0
 8005522:	7023      	strb	r3, [r4, #0]
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2230      	movs	r2, #48	; 0x30
 800552a:	4013      	ands	r3, r2
 800552c:	d001      	beq.n	8005532 <nrf24_isSending+0x1e>
    {        
        return 0; /* false */
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <nrf24_isSending+0x20>
    }

    return 1; /* true */
 8005532:	2301      	movs	r3, #1

}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b003      	add	sp, #12
 800553a:	bd90      	pop	{r4, r7, pc}

0800553c <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 8005542:	2000      	movs	r0, #0
 8005544:	f7fc f8c8 	bl	80016d8 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 8005548:	1dfc      	adds	r4, r7, #7
 800554a:	20ff      	movs	r0, #255	; 0xff
 800554c:	f000 f84f 	bl	80055ee <spi_transfer>
 8005550:	0003      	movs	r3, r0
 8005552:	7023      	strb	r3, [r4, #0]
    nrf24_csn_digitalWrite(HIGH);
 8005554:	2001      	movs	r0, #1
 8005556:	f7fc f8bf 	bl	80016d8 <nrf24_csn_digitalWrite>
    return rv;
 800555a:	1dfb      	adds	r3, r7, #7
 800555c:	781b      	ldrb	r3, [r3, #0]
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b003      	add	sp, #12
 8005564:	bd90      	pop	{r4, r7, pc}

08005566 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
 8005566:	b590      	push	{r4, r7, lr}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
    uint8_t rv;

    rv = nrf24_getStatus();
 800556c:	1dfc      	adds	r4, r7, #7
 800556e:	f7ff ffe5 	bl	800553c <nrf24_getStatus>
 8005572:	0003      	movs	r3, r0
 8005574:	7023      	strb	r3, [r4, #0]

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
 8005576:	1dfb      	adds	r3, r7, #7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2220      	movs	r2, #32
 800557c:	4013      	ands	r3, r2
 800557e:	d001      	beq.n	8005584 <nrf24_lastMessageStatus+0x1e>
    {
        return NRF24_TRANSMISSON_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	e007      	b.n	8005594 <nrf24_lastMessageStatus+0x2e>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
 8005584:	1dfb      	adds	r3, r7, #7
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2210      	movs	r2, #16
 800558a:	4013      	ands	r3, r2
 800558c:	d001      	beq.n	8005592 <nrf24_lastMessageStatus+0x2c>
    {
        return NRF24_MESSAGE_LOST;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <nrf24_lastMessageStatus+0x2e>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
 8005592:	23ff      	movs	r3, #255	; 0xff
    }
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	b003      	add	sp, #12
 800559a:	bd90      	pop	{r4, r7, pc}

0800559c <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{     
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
    nrf24_csn_digitalWrite(LOW);
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7fc f899 	bl	80016d8 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 80055a6:	20e2      	movs	r0, #226	; 0xe2
 80055a8:	f000 f821 	bl	80055ee <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 80055ac:	2001      	movs	r0, #1
 80055ae:	f7fc f893 	bl	80016d8 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 80055b2:	2170      	movs	r1, #112	; 0x70
 80055b4:	2007      	movs	r0, #7
 80055b6:	f000 f883 	bl	80056c0 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fc f878 	bl	80016b0 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 80055c0:	210b      	movs	r1, #11
 80055c2:	2000      	movs	r0, #0
 80055c4:	f000 f87c 	bl	80056c0 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 80055c8:	2001      	movs	r0, #1
 80055ca:	f7fc f871 	bl	80016b0 <nrf24_ce_digitalWrite>
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 80055d8:	2170      	movs	r1, #112	; 0x70
 80055da:	2007      	movs	r0, #7
 80055dc:	f000 f870 	bl	80056c0 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 80055e0:	210a      	movs	r1, #10
 80055e2:	2000      	movs	r0, #0
 80055e4:	f000 f86c 	bl	80056c0 <nrf24_configRegister>
}
 80055e8:	46c0      	nop			; (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 80055ee:	b5b0      	push	{r4, r5, r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	0002      	movs	r2, r0
 80055f6:	1dfb      	adds	r3, r7, #7
 80055f8:	701a      	strb	r2, [r3, #0]
    uint8_t rx = 0;    
 80055fa:	250f      	movs	r5, #15
 80055fc:	197b      	adds	r3, r7, r5
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]

    rx = nrf24_spi_transfer(&tx);
 8005602:	197c      	adds	r4, r7, r5
 8005604:	1dfb      	adds	r3, r7, #7
 8005606:	0018      	movs	r0, r3
 8005608:	f7fc f87a 	bl	8001700 <nrf24_spi_transfer>
 800560c:	0003      	movs	r3, r0
 800560e:	7023      	strb	r3, [r4, #0]

    return rx;
 8005610:	197b      	adds	r3, r7, r5
 8005612:	781b      	ldrb	r3, [r3, #0]
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bdb0      	pop	{r4, r5, r7, pc}

0800561c <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for(i=0;i<len;i++)
 800562a:	2317      	movs	r3, #23
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e013      	b.n	800565c <nrf24_transferSync+0x40>
    {
        datain[i] = spi_transfer(dataout[i]);
 8005634:	2517      	movs	r5, #23
 8005636:	197b      	adds	r3, r7, r5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	7819      	ldrb	r1, [r3, #0]
 8005640:	197b      	adds	r3, r7, r5
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	18d4      	adds	r4, r2, r3
 8005648:	0008      	movs	r0, r1
 800564a:	f7ff ffd0 	bl	80055ee <spi_transfer>
 800564e:	0003      	movs	r3, r0
 8005650:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 8005652:	197b      	adds	r3, r7, r5
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	197b      	adds	r3, r7, r5
 8005658:	3201      	adds	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	2317      	movs	r3, #23
 800565e:	18fa      	adds	r2, r7, r3
 8005660:	1dfb      	adds	r3, r7, #7
 8005662:	7812      	ldrb	r2, [r2, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d3e4      	bcc.n	8005634 <nrf24_transferSync+0x18>
    }

}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b006      	add	sp, #24
 8005672:	bdb0      	pop	{r4, r5, r7, pc}

08005674 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	000a      	movs	r2, r1
 800567e:	1cfb      	adds	r3, r7, #3
 8005680:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    
    for(i=0;i<len;i++)
 8005682:	230f      	movs	r3, #15
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e00d      	b.n	80056a8 <nrf24_transmitSync+0x34>
    {
        spi_transfer(dataout[i]);
 800568c:	240f      	movs	r4, #15
 800568e:	193b      	adds	r3, r7, r4
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	18d3      	adds	r3, r2, r3
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	0018      	movs	r0, r3
 800569a:	f7ff ffa8 	bl	80055ee <spi_transfer>
    for(i=0;i<len;i++)
 800569e:	193b      	adds	r3, r7, r4
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	193b      	adds	r3, r7, r4
 80056a4:	3201      	adds	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	230f      	movs	r3, #15
 80056aa:	18fa      	adds	r2, r7, r3
 80056ac:	1cfb      	adds	r3, r7, #3
 80056ae:	7812      	ldrb	r2, [r2, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3ea      	bcc.n	800568c <nrf24_transmitSync+0x18>
    }

}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b005      	add	sp, #20
 80056be:	bd90      	pop	{r4, r7, pc}

080056c0 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	0002      	movs	r2, r0
 80056c8:	1dfb      	adds	r3, r7, #7
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	1dbb      	adds	r3, r7, #6
 80056ce:	1c0a      	adds	r2, r1, #0
 80056d0:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 80056d2:	2000      	movs	r0, #0
 80056d4:	f7fc f800 	bl	80016d8 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	221f      	movs	r2, #31
 80056de:	4013      	ands	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2220      	movs	r2, #32
 80056e4:	4313      	orrs	r3, r2
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff ff80 	bl	80055ee <spi_transfer>
    spi_transfer(value);
 80056ee:	1dbb      	adds	r3, r7, #6
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7ff ff7b 	bl	80055ee <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 80056f8:	2001      	movs	r0, #1
 80056fa:	f7fb ffed 	bl	80016d8 <nrf24_csn_digitalWrite>
}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	46bd      	mov	sp, r7
 8005702:	b002      	add	sp, #8
 8005704:	bd80      	pop	{r7, pc}

08005706 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6039      	str	r1, [r7, #0]
 800570e:	0011      	movs	r1, r2
 8005710:	1dfb      	adds	r3, r7, #7
 8005712:	1c02      	adds	r2, r0, #0
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	1dbb      	adds	r3, r7, #6
 8005718:	1c0a      	adds	r2, r1, #0
 800571a:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 800571c:	2000      	movs	r0, #0
 800571e:	f7fb ffdb 	bl	80016d8 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8005722:	1dfb      	adds	r3, r7, #7
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	221f      	movs	r2, #31
 8005728:	4013      	ands	r3, r2
 800572a:	b2db      	uxtb	r3, r3
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff ff5e 	bl	80055ee <spi_transfer>
    nrf24_transferSync(value,value,len);
 8005732:	1dbb      	adds	r3, r7, #6
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff ff6e 	bl	800561c <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 8005740:	2001      	movs	r0, #1
 8005742:	f7fb ffc9 	bl	80016d8 <nrf24_csn_digitalWrite>
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b002      	add	sp, #8
 800574c:	bd80      	pop	{r7, pc}

0800574e <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	0011      	movs	r1, r2
 8005758:	1dfb      	adds	r3, r7, #7
 800575a:	1c02      	adds	r2, r0, #0
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	1dbb      	adds	r3, r7, #6
 8005760:	1c0a      	adds	r2, r1, #0
 8005762:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 8005764:	2000      	movs	r0, #0
 8005766:	f7fb ffb7 	bl	80016d8 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 800576a:	1dfb      	adds	r3, r7, #7
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	221f      	movs	r2, #31
 8005770:	4013      	ands	r3, r2
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2220      	movs	r2, #32
 8005776:	4313      	orrs	r3, r2
 8005778:	b2db      	uxtb	r3, r3
 800577a:	0018      	movs	r0, r3
 800577c:	f7ff ff37 	bl	80055ee <spi_transfer>
    nrf24_transmitSync(value,len);
 8005780:	1dbb      	adds	r3, r7, #6
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f7ff ff73 	bl	8005674 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 800578e:	2001      	movs	r0, #1
 8005790:	f7fb ffa2 	bl	80016d8 <nrf24_csn_digitalWrite>
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bd80      	pop	{r7, pc}

0800579c <__step_turnoff>:
uint8_t Steps4[4][4] = {{1, 0, 0, 0},
						{0, 1, 0, 0},
						{0, 0, 1, 0},
						{0, 0, 0, 1}};

void __step_turnoff(step_motor_t *obj){
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(obj->pins.Orange.gpio, obj->pins.Orange.pin, GPIO_PIN_RESET);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6958      	ldr	r0, [r3, #20]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2200      	movs	r2, #0
 80057b0:	0019      	movs	r1, r3
 80057b2:	f7fd fb27 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(obj->pins.Yellow.gpio, obj->pins.Yellow.pin,  GPIO_PIN_RESET);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6858      	ldr	r0, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	0019      	movs	r1, r3
 80057c4:	f7fd fb1e 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(obj->pins.Pink.gpio, obj->pins.Pink.pin,  GPIO_PIN_RESET);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69d8      	ldr	r0, [r3, #28]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2200      	movs	r2, #0
 80057d4:	0019      	movs	r1, r3
 80057d6:	f7fd fb15 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(obj->pins.Blue.gpio, obj->pins.Blue.pin, GPIO_PIN_RESET) ;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68d8      	ldr	r0, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2200      	movs	r2, #0
 80057e6:	0019      	movs	r1, r3
 80057e8:	f7fd fb0c 	bl	8002e04 <HAL_GPIO_WritePin>
}
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b002      	add	sp, #8
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <__onestep>:

void __onestep (step_motor_t *obj){
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	  if(obj->direction==STEP_DIRECTION_CW){
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	222b      	movs	r2, #43	; 0x2b
 8005800:	5c9b      	ldrb	r3, [r3, r2]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d13f      	bne.n	8005886 <__onestep+0x92>
			HAL_GPIO_WritePin(obj->pins.Orange.gpio, obj->pins.Orange.pin,Steps4[obj->stepN][0]);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6958      	ldr	r0, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	b299      	uxth	r1, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	222a      	movs	r2, #42	; 0x2a
 8005814:	5c9b      	ldrb	r3, [r3, r2]
 8005816:	001a      	movs	r2, r3
 8005818:	4b4d      	ldr	r3, [pc, #308]	; (8005950 <__onestep+0x15c>)
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	5cd3      	ldrb	r3, [r2, r3]
 800581e:	001a      	movs	r2, r3
 8005820:	f7fd faf0 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(obj->pins.Yellow.gpio, obj->pins.Yellow.pin,  Steps4[obj->stepN][1]);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6858      	ldr	r0, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	b299      	uxth	r1, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	222a      	movs	r2, #42	; 0x2a
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	4a46      	ldr	r2, [pc, #280]	; (8005950 <__onestep+0x15c>)
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	18d3      	adds	r3, r2, r3
 800583a:	3301      	adds	r3, #1
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	001a      	movs	r2, r3
 8005840:	f7fd fae0 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(obj->pins.Pink.gpio, obj->pins.Pink.pin,  Steps4[obj->stepN][2]);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69d8      	ldr	r0, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	b299      	uxth	r1, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	222a      	movs	r2, #42	; 0x2a
 8005852:	5c9b      	ldrb	r3, [r3, r2]
 8005854:	4a3e      	ldr	r2, [pc, #248]	; (8005950 <__onestep+0x15c>)
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	18d3      	adds	r3, r2, r3
 800585a:	3302      	adds	r3, #2
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	001a      	movs	r2, r3
 8005860:	f7fd fad0 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(obj->pins.Blue.gpio, obj->pins.Blue.pin, Steps4[obj->stepN][3]);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68d8      	ldr	r0, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	b299      	uxth	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	222a      	movs	r2, #42	; 0x2a
 8005872:	5c9b      	ldrb	r3, [r3, r2]
 8005874:	4a36      	ldr	r2, [pc, #216]	; (8005950 <__onestep+0x15c>)
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	3303      	adds	r3, #3
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	001a      	movs	r2, r3
 8005880:	f7fd fac0 	bl	8002e04 <HAL_GPIO_WritePin>
 8005884:	e04e      	b.n	8005924 <__onestep+0x130>
			/*HAL_Delay(obj->delay);*/

	  }
	  else if(obj->direction==STEP_DIRECTION_ACW){
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	222b      	movs	r2, #43	; 0x2b
 800588a:	5c9b      	ldrb	r3, [r3, r2]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d149      	bne.n	8005924 <__onestep+0x130>
			HAL_GPIO_WritePin(obj->pins.Orange.gpio, obj->pins.Orange.pin,Steps4[3-obj->stepN][0]);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6958      	ldr	r0, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	b299      	uxth	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	222a      	movs	r2, #42	; 0x2a
 800589e:	5c9b      	ldrb	r3, [r3, r2]
 80058a0:	001a      	movs	r2, r3
 80058a2:	2303      	movs	r3, #3
 80058a4:	1a9a      	subs	r2, r3, r2
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <__onestep+0x15c>)
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	5cd3      	ldrb	r3, [r2, r3]
 80058ac:	001a      	movs	r2, r3
 80058ae:	f7fd faa9 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(obj->pins.Yellow.gpio, obj->pins.Yellow.pin,  Steps4[3-obj->stepN][1]);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6858      	ldr	r0, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	b299      	uxth	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	222a      	movs	r2, #42	; 0x2a
 80058c0:	5c9b      	ldrb	r3, [r3, r2]
 80058c2:	001a      	movs	r2, r3
 80058c4:	2303      	movs	r3, #3
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	4a21      	ldr	r2, [pc, #132]	; (8005950 <__onestep+0x15c>)
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	001a      	movs	r2, r3
 80058d4:	f7fd fa96 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(obj->pins.Pink.gpio, obj->pins.Pink.pin,  Steps4[3-obj->stepN][2]);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69d8      	ldr	r0, [r3, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	b299      	uxth	r1, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	222a      	movs	r2, #42	; 0x2a
 80058e6:	5c9b      	ldrb	r3, [r3, r2]
 80058e8:	001a      	movs	r2, r3
 80058ea:	2303      	movs	r3, #3
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	4a18      	ldr	r2, [pc, #96]	; (8005950 <__onestep+0x15c>)
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	3302      	adds	r3, #2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	001a      	movs	r2, r3
 80058fa:	f7fd fa83 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(obj->pins.Blue.gpio, obj->pins.Blue.pin, Steps4[3-obj->stepN][3]);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68d8      	ldr	r0, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	b299      	uxth	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	222a      	movs	r2, #42	; 0x2a
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	001a      	movs	r2, r3
 8005910:	2303      	movs	r3, #3
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <__onestep+0x15c>)
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	3303      	adds	r3, #3
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	001a      	movs	r2, r3
 8005920:	f7fd fa70 	bl	8002e04 <HAL_GPIO_WritePin>
			/*HAL_Delay(obj->delay);*/
	  }
	  obj->stepN++;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	222a      	movs	r2, #42	; 0x2a
 8005928:	5c9b      	ldrb	r3, [r3, r2]
 800592a:	3301      	adds	r3, #1
 800592c:	b2d9      	uxtb	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	222a      	movs	r2, #42	; 0x2a
 8005932:	5499      	strb	r1, [r3, r2]
	  if(obj->stepN>=4)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	222a      	movs	r2, #42	; 0x2a
 8005938:	5c9b      	ldrb	r3, [r3, r2]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d903      	bls.n	8005946 <__onestep+0x152>
		  obj->stepN = 0;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	222a      	movs	r2, #42	; 0x2a
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]
	}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	b002      	add	sp, #8
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	2000001c 	.word	0x2000001c

08005954 <step_init>:

// Publics

void step_init(step_motor_t *obj){
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	if (obj != NULL){
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <step_init+0x2a>
		// reset all variables of objejct step
		obj->delay = 0;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
		obj->direction = STEP_DIRECTION_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	222b      	movs	r2, #43	; 0x2b
 800596c:	2100      	movs	r1, #0
 800596e:	5499      	strb	r1, [r3, r2]
		obj->steps = 0;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	625a      	str	r2, [r3, #36]	; 0x24
		// turno off all gpios
		__step_turnoff(obj);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff ff0f 	bl	800579c <__step_turnoff>
	}
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}

08005986 <step_drive_steps>:

void step_drive_steps(step_motor_t *obj, uint32_t step ,step_direction_e dir, uint16_t delay)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	0019      	movs	r1, r3
 8005992:	1dfb      	adds	r3, r7, #7
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	1c0a      	adds	r2, r1, #0
 800599a:	801a      	strh	r2, [r3, #0]
	if (obj != NULL){
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d019      	beq.n	80059d6 <step_drive_steps+0x50>
		obj->delay = delay;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1d3a      	adds	r2, r7, #4
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	851a      	strh	r2, [r3, #40]	; 0x28
		obj->direction = dir;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1dfa      	adds	r2, r7, #7
 80059ae:	212b      	movs	r1, #43	; 0x2b
 80059b0:	7812      	ldrb	r2, [r2, #0]
 80059b2:	545a      	strb	r2, [r3, r1]
		obj->steps = step;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
		/*obj->stepN = 0;*/
		for (uint32_t k=0; k<step; k++){
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e006      	b.n	80059ce <step_drive_steps+0x48>
		  __onestep(obj);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	0018      	movs	r0, r3
 80059c4:	f7ff ff16 	bl	80057f4 <__onestep>
		for (uint32_t k=0; k<step; k++){
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3301      	adds	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3f4      	bcc.n	80059c0 <step_drive_steps+0x3a>
		}
		// turno off all gpios
	/*	__step_turnoff(obj);*/
	}
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b006      	add	sp, #24
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <__libc_init_array>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	2600      	movs	r6, #0
 80059e4:	4d0c      	ldr	r5, [pc, #48]	; (8005a18 <__libc_init_array+0x38>)
 80059e6:	4c0d      	ldr	r4, [pc, #52]	; (8005a1c <__libc_init_array+0x3c>)
 80059e8:	1b64      	subs	r4, r4, r5
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	42a6      	cmp	r6, r4
 80059ee:	d109      	bne.n	8005a04 <__libc_init_array+0x24>
 80059f0:	2600      	movs	r6, #0
 80059f2:	f000 f821 	bl	8005a38 <_init>
 80059f6:	4d0a      	ldr	r5, [pc, #40]	; (8005a20 <__libc_init_array+0x40>)
 80059f8:	4c0a      	ldr	r4, [pc, #40]	; (8005a24 <__libc_init_array+0x44>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d105      	bne.n	8005a0e <__libc_init_array+0x2e>
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	00b3      	lsls	r3, r6, #2
 8005a06:	58eb      	ldr	r3, [r5, r3]
 8005a08:	4798      	blx	r3
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7ee      	b.n	80059ec <__libc_init_array+0xc>
 8005a0e:	00b3      	lsls	r3, r6, #2
 8005a10:	58eb      	ldr	r3, [r5, r3]
 8005a12:	4798      	blx	r3
 8005a14:	3601      	adds	r6, #1
 8005a16:	e7f2      	b.n	80059fe <__libc_init_array+0x1e>
 8005a18:	08005ad0 	.word	0x08005ad0
 8005a1c:	08005ad0 	.word	0x08005ad0
 8005a20:	08005ad0 	.word	0x08005ad0
 8005a24:	08005ad4 	.word	0x08005ad4

08005a28 <memset>:
 8005a28:	0003      	movs	r3, r0
 8005a2a:	1882      	adds	r2, r0, r2
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <memset+0xa>
 8005a30:	4770      	bx	lr
 8005a32:	7019      	strb	r1, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	e7f9      	b.n	8005a2c <memset+0x4>

08005a38 <_init>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr

08005a44 <_fini>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr
